if ( TRACE ) { TRACE( JSON.parse( '["MonoHandler#GUIEditor","BlockColorApplier#init","BlockColorApplier#Start","BlockColorApplier#Update","BlockObj#Setup","BlockObj#SetBlockImage","BlockObj#SetBlockColor","BlockObj#BlockCanMove","BlockObj#SetSelected","BlockObj#SetSortingOrder","BlockObj#VisibleBlockDestroyLine","BombDetail#init","BombItem#init","BombItem#RemoveBomb","BombItem#Setup","BombItem#UpdateStepBomb","BombItem#DestroyBomb","BoosterManager.BoosterInfor#init","BoosterManager.HintInfor#init","BoosterManager.HintInfor#SaveHintInfor","BoosterManager.HintInfor#LoadHintInfor","BottomObj#init","CameraController#init","CameraController#Start","CameraController#InitializeCam","CameraController#UpdateCameraZoom","CameraSize#init","CameraSize#Start","CameraSize#SetupPlayGame","CameraSize#Initialize","CameraSizeByResolution#init","CameraSizeByResolution#Start","CameraSizeByResolution#Update","CameraSizeByResolution#UpdateCameraSize","CameraSizeByResolution#UpdateTargetSizes","CameraSizeByResolution#GetCurrentSize","ConstValue#init","CurveMove#GetTarget#get","CurveMove#init","CurveMove#Move","CurveMove#Update","DataInGame#init","DataInGame#Save","DataInGame#SaveDataMode","DataInGame#Load","DataInGame#FindDataMode","DataMode#init","DataMode#AddDataPlacePiece","DataMode#ClearData","DataMode#Save","DataMode#Load","DataPlacePiece#init","DataPlacePiece#Save","DataPlacePiece#Load","DentedPixel.LTExamples.PathBezier#OnEnable","DentedPixel.LTExamples.PathBezier#Start","DentedPixel.LTExamples.PathBezier#Update","DentedPixel.LTExamples.PathBezier#OnDrawGizmos","DentedPixel.LTExamples.TestingUnitTests#init","DentedPixel.LTExamples.TestingUnitTests#Awake","DentedPixel.LTExamples.TestingUnitTests#Start","DentedPixel.LTExamples.TestingUnitTests#cubeNamed","DentedPixel.LTExamples.TestingUnitTests#timeBasedTesting","DentedPixel.LTExamples.TestingUnitTests#lotsOfCancels","DentedPixel.LTExamples.TestingUnitTests#pauseTimeNow","DentedPixel.LTExamples.TestingUnitTests#rotateRepeatFinished","DentedPixel.LTExamples.TestingUnitTests#rotateRepeatAllFinished","DentedPixel.LTExamples.TestingUnitTests#eventGameObjectCalled","DentedPixel.LTExamples.TestingUnitTests#eventGeneralCalled","DestroyByTime#init","DestroyByTime#Start","DestroyByTime#SetTime","DestroyByTime#FixedUpdate","DG.Tweening.DOTweenCYInstruction.WaitForCompletion#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForCompletion#ctor","DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#ctor","DG.Tweening.DOTweenCYInstruction.WaitForKill#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForKill#ctor","DG.Tweening.DOTweenCYInstruction.WaitForPosition#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForPosition#ctor","DG.Tweening.DOTweenCYInstruction.WaitForRewind#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForRewind#ctor","DG.Tweening.DOTweenCYInstruction.WaitForStart#keepWaiting#get","DG.Tweening.DOTweenCYInstruction.WaitForStart#ctor","DG.Tweening.DOTweenModuleAudio#DOFade","DG.Tweening.DOTweenModuleAudio#DOPitch","DG.Tweening.DOTweenModuleAudio#DOSetFloat","DG.Tweening.DOTweenModuleAudio#DOComplete","DG.Tweening.DOTweenModuleAudio#DOKill","DG.Tweening.DOTweenModuleAudio#DOFlip","DG.Tweening.DOTweenModuleAudio#DOGoto","DG.Tweening.DOTweenModuleAudio#DOPause","DG.Tweening.DOTweenModuleAudio#DOPlay","DG.Tweening.DOTweenModuleAudio#DOPlayBackwards","DG.Tweening.DOTweenModuleAudio#DOPlayForward","DG.Tweening.DOTweenModuleAudio#DORestart","DG.Tweening.DOTweenModuleAudio#DORewind","DG.Tweening.DOTweenModuleAudio#DOSmoothRewind","DG.Tweening.DOTweenModuleAudio#DOTogglePause","DG.Tweening.DOTweenModulePhysics#DOMove","DG.Tweening.DOTweenModulePhysics#DOMoveX","DG.Tweening.DOTweenModulePhysics#DOMoveY","DG.Tweening.DOTweenModulePhysics#DOMoveZ","DG.Tweening.DOTweenModulePhysics#DORotate","DG.Tweening.DOTweenModulePhysics#DOLookAt","DG.Tweening.DOTweenModulePhysics#DOJump","DG.Tweening.DOTweenModulePhysics#DOPath","DG.Tweening.DOTweenModulePhysics#DOPath$1","DG.Tweening.DOTweenModulePhysics#DOLocalPath","DG.Tweening.DOTweenModulePhysics#DOLocalPath$1","DG.Tweening.DOTweenModulePhysics2D#DOMove","DG.Tweening.DOTweenModulePhysics2D#DOMoveX","DG.Tweening.DOTweenModulePhysics2D#DOMoveY","DG.Tweening.DOTweenModulePhysics2D#DORotate","DG.Tweening.DOTweenModulePhysics2D#DOJump","DG.Tweening.DOTweenModulePhysics2D#DOPath","DG.Tweening.DOTweenModulePhysics2D#DOPath$1","DG.Tweening.DOTweenModulePhysics2D#DOLocalPath","DG.Tweening.DOTweenModulePhysics2D#DOLocalPath$1","DG.Tweening.DOTweenModuleSprite#DOColor","DG.Tweening.DOTweenModuleSprite#DOFade","DG.Tweening.DOTweenModuleSprite#DOGradientColor","DG.Tweening.DOTweenModuleSprite#DOBlendableColor","DG.Tweening.DOTweenModuleUI#DOFade","DG.Tweening.DOTweenModuleUI#DOFade$1","DG.Tweening.DOTweenModuleUI#DOFade$2","DG.Tweening.DOTweenModuleUI#DOFade$3","DG.Tweening.DOTweenModuleUI#DOFade$4","DG.Tweening.DOTweenModuleUI#DOColor","DG.Tweening.DOTweenModuleUI#DOColor$1","DG.Tweening.DOTweenModuleUI#DOColor$2","DG.Tweening.DOTweenModuleUI#DOColor$3","DG.Tweening.DOTweenModuleUI#DOFillAmount","DG.Tweening.DOTweenModuleUI#DOGradientColor","DG.Tweening.DOTweenModuleUI#DOFlexibleSize","DG.Tweening.DOTweenModuleUI#DOMinSize","DG.Tweening.DOTweenModuleUI#DOPreferredSize","DG.Tweening.DOTweenModuleUI#DOScale","DG.Tweening.DOTweenModuleUI#DOAnchorPos","DG.Tweening.DOTweenModuleUI#DOAnchorPosX","DG.Tweening.DOTweenModuleUI#DOAnchorPosY","DG.Tweening.DOTweenModuleUI#DOAnchorPos3D","DG.Tweening.DOTweenModuleUI#DOAnchorPos3DX","DG.Tweening.DOTweenModuleUI#DOAnchorPos3DY","DG.Tweening.DOTweenModuleUI#DOAnchorPos3DZ","DG.Tweening.DOTweenModuleUI#DOAnchorMax","DG.Tweening.DOTweenModuleUI#DOAnchorMin","DG.Tweening.DOTweenModuleUI#DOPivot","DG.Tweening.DOTweenModuleUI#DOPivotX","DG.Tweening.DOTweenModuleUI#DOPivotY","DG.Tweening.DOTweenModuleUI#DOSizeDelta","DG.Tweening.DOTweenModuleUI#DOPunchAnchorPos","DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos","DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos$1","DG.Tweening.DOTweenModuleUI#DOJumpAnchorPos","DG.Tweening.DOTweenModuleUI#DONormalizedPos","DG.Tweening.DOTweenModuleUI#DOHorizontalNormalizedPos","DG.Tweening.DOTweenModuleUI#DOVerticalNormalizedPos","DG.Tweening.DOTweenModuleUI#DOValue","DG.Tweening.DOTweenModuleUI#DOCounter","DG.Tweening.DOTweenModuleUI#DOText","DG.Tweening.DOTweenModuleUI#DOBlendableColor","DG.Tweening.DOTweenModuleUI#DOBlendableColor$1","DG.Tweening.DOTweenModuleUI#DOBlendableColor$2","DG.Tweening.DOTweenModuleUI#DOShapeCircle","DG.Tweening.DOTweenModuleUI.Utils#SwitchToRectTransform","DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor","DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor$1","DG.Tweening.DOTweenModuleUnityVersion#WaitForCompletion","DG.Tweening.DOTweenModuleUnityVersion#WaitForRewind","DG.Tweening.DOTweenModuleUnityVersion#WaitForKill","DG.Tweening.DOTweenModuleUnityVersion#WaitForElapsedLoops","DG.Tweening.DOTweenModuleUnityVersion#WaitForPosition","DG.Tweening.DOTweenModuleUnityVersion#WaitForStart","DG.Tweening.DOTweenModuleUnityVersion#DOOffset","DG.Tweening.DOTweenModuleUnityVersion#DOTiling","DG.Tweening.DOTweenModuleUtils#Init","DG.Tweening.DOTweenModuleUtils#Preserver","DG.Tweening.DOTweenModuleUtils.Physics#SetOrientationOnPath","DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody2D","DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody","DG.Tweening.DOTweenModuleUtils.Physics#CreateDOTweenPathTween","DOTweenExtensions#AsyncWait","EffectObj#GetCurveMove#get","EffectObj#Setup","EffectObj#Play","ExampleSpline#Start","ExampleSpline#Update","ExampleSpline#OnDrawGizmos","Following#init","Following#Start","Following#Update","Following#moveArrow","FPSController#init","FPSController#Update","FPSController#SetFrameRate","GameSetting#init","GemCounter#init","GemCounter#Start","GemCounter#UpdateText","GemCounter#ReduceCount","GemCounter#ReceiveGem","GemCounter#ResetIconSize","GemCounter#CheckMatch","GeneralAdvancedTechniques#init","GeneralAdvancedTechniques#Start","GeneralBasic#Start","GeneralBasic#advancedExamples","GeneralBasics2d#Start","GeneralBasics2d#createSpriteDude","GeneralBasics2d#advancedExamples","GeneralCameraShake#init","GeneralCameraShake#Start","GeneralCameraShake#bigGuyJump","GeneralEasingTypes#init","GeneralEasingTypes#Start","GeneralEasingTypes#demoEaseTypes","GeneralEasingTypes#resetLines","GeneralEventsListeners#init","GeneralEventsListeners#Awake","GeneralEventsListeners#Start","GeneralEventsListeners#jumpUp","GeneralEventsListeners#changeColor","GeneralEventsListeners#OnCollisionEnter","GeneralEventsListeners#OnCollisionStay","GeneralEventsListeners#FixedUpdate","GeneralEventsListeners#OnMouseDown","GeneralSequencer#init","GeneralSequencer#Start","GeneralSimpleUI#Start","GeneralUISpace#Start","JsonArray#FromJson","JsonArray#ToJson","LayoutSupportDisplay#init","LayoutSupportDisplay#Start","LayoutSupportDisplay#SetUp","LayoutSupportDisplay#Update","LayoutSupportDisplay#SetUpLayoutElement","LayoutSupportDisplay#SetUpLayoutGroup","LayoutSupportDisplay#SetUpGridLayoutGroup","LayoutSupportDisplay#WindowChangeStart","LayoutSupportDisplay#WindowChangeUpdate","LayoutSupportDisplay.GridLayoutGroupValue#init","LayoutSupportDisplay.HorizontalOrVerticalLayoutValue#init","LayoutSupportDisplay.LayoutValue#init","LeanSmooth#damp","LeanSmooth#damp$2","LeanSmooth#damp$1","LeanSmooth#spring","LeanSmooth#spring$2","LeanSmooth#spring$1","LeanSmooth#linear","LeanSmooth#linear$2","LeanSmooth#linear$1","LeanSmooth#bounceOut","LeanSmooth#bounceOut$2","LeanSmooth#bounceOut$1","LeanTest#init","LeanTest#debug","LeanTest#expect","LeanTest#padRight","LeanTest#printOutLength","LeanTest#formatBC","LeanTest#formatB","LeanTest#formatC","LeanTest#overview","LeanTester#init","LeanTester#Start","LeanTester#timeoutCheck","LeanTween#maxSearch#get","LeanTween#maxSimulataneousTweens#get","LeanTween#tweensRunning#get","LeanTween#tweenEmpty#get","LeanTween#init","LeanTween#init","LeanTween#init$1","LeanTween#init$2","LeanTween#reset","LeanTween#onLevelWasLoaded54","LeanTween#internalOnLevelWasLoaded","LeanTween#update","LeanTween#removeTween$1","LeanTween#removeTween","LeanTween#add","LeanTween#closestRot","LeanTween#cancelAll","LeanTween#cancelAll$1","LeanTween#cancel$3","LeanTween#cancel$4","LeanTween#cancel$6","LeanTween#cancel$5","LeanTween#cancel","LeanTween#cancel$1","LeanTween#cancel$2","LeanTween#descr","LeanTween#description","LeanTween#descriptions","LeanTween#pause$2","LeanTween#pause","LeanTween#pause$1","LeanTween#pauseAll","LeanTween#resumeAll","LeanTween#resume$2","LeanTween#resume","LeanTween#resume$1","LeanTween#isPaused$1","LeanTween#isPaused$2","LeanTween#isPaused","LeanTween#isTweening$2","LeanTween#isTweening$3","LeanTween#isTweening$1","LeanTween#isTweening","LeanTween#drawBezierPath","LeanTween#logError","LeanTween#options$1","LeanTween#options","LeanTween#pushNewTween","LeanTween#play","LeanTween#sequence","LeanTween#alpha$1","LeanTween#alpha","LeanTween#alpha$2","LeanTween#textAlpha","LeanTween#alphaText","LeanTween#alphaCanvas","LeanTween#alphaVertex","LeanTween#color","LeanTween#color$1","LeanTween#textColor","LeanTween#colorText","LeanTween#delayedCall","LeanTween#delayedCall$1","LeanTween#delayedCall$2","LeanTween#delayedCall$3","LeanTween#destroyAfter","LeanTween#move$5","LeanTween#move$4","LeanTween#move$6","LeanTween#move$1","LeanTween#move$2","LeanTween#move","LeanTween#move$3","LeanTween#move$7","LeanTween#moveSpline$1","LeanTween#moveSpline","LeanTween#moveSplineLocal","LeanTween#moveMargin","LeanTween#moveX","LeanTween#moveX$1","LeanTween#moveY","LeanTween#moveY$1","LeanTween#moveZ","LeanTween#moveZ$1","LeanTween#moveLocal$2","LeanTween#moveLocal$3","LeanTween#moveLocal","LeanTween#moveLocal$1","LeanTween#moveLocalX","LeanTween#moveLocalY","LeanTween#moveLocalZ","LeanTween#rotate$1","LeanTween#rotate","LeanTween#rotate$2","LeanTween#rotate$3","LeanTween#rotateLocal","LeanTween#rotateX","LeanTween#rotateY","LeanTween#rotateZ","LeanTween#rotateAround","LeanTween#rotateAround$1","LeanTween#rotateAroundLocal","LeanTween#rotateAroundLocal$1","LeanTween#scale$1","LeanTween#scale","LeanTween#scale$2","LeanTween#scaleX","LeanTween#scaleY","LeanTween#scaleZ","LeanTween#value$8","LeanTween#value","LeanTween#value$10","LeanTween#value$11","LeanTween#value$9","LeanTween#value$1","LeanTween#value$6","LeanTween#value$2","LeanTween#value$7","LeanTween#value$3","LeanTween#value$4","LeanTween#value$5","LeanTween#delayedSound","LeanTween#delayedSound$1","LeanTween#size","LeanTween#tweenOnCurve","LeanTween#tweenOnCurveVector","LeanTween#easeOutQuadOpt","LeanTween#easeInQuadOpt","LeanTween#easeInOutQuadOpt","LeanTween#easeInOutQuadOpt$1","LeanTween#linear","LeanTween#clerp","LeanTween#spring","LeanTween#easeInQuad","LeanTween#easeOutQuad","LeanTween#easeInOutQuad","LeanTween#easeInOutQuadOpt2","LeanTween#easeInCubic","LeanTween#easeOutCubic","LeanTween#easeInOutCubic","LeanTween#easeInQuart","LeanTween#easeOutQuart","LeanTween#easeInOutQuart","LeanTween#easeInQuint","LeanTween#easeOutQuint","LeanTween#easeInOutQuint","LeanTween#easeInSine","LeanTween#easeOutSine","LeanTween#easeInOutSine","LeanTween#easeInExpo","LeanTween#easeOutExpo","LeanTween#easeInOutExpo","LeanTween#easeInCirc","LeanTween#easeOutCirc","LeanTween#easeInOutCirc","LeanTween#easeInBounce","LeanTween#easeOutBounce","LeanTween#easeInOutBounce","LeanTween#easeInBack","LeanTween#easeOutBack","LeanTween#easeInOutBack","LeanTween#easeInElastic","LeanTween#easeOutElastic","LeanTween#easeInOutElastic","LeanTween#followDamp","LeanTween#followSpring","LeanTween#followBounceOut","LeanTween#followLinear","LeanTween#addListener","LeanTween#addListener$1","LeanTween#removeListener$1","LeanTween#removeListener","LeanTween#removeListener$2","LeanTween#dispatchEvent","LeanTween#dispatchEvent$1","LeanTween#Update","LeanTweenExt#LeanAlpha$1","LeanTweenExt#LeanAlpha$2","LeanTweenExt#LeanAlpha","LeanTweenExt#LeanAlphaVertex","LeanTweenExt#LeanAlphaText","LeanTweenExt#LeanCancel","LeanTweenExt#LeanCancel$1","LeanTweenExt#LeanCancel$2","LeanTweenExt#LeanCancel$3","LeanTweenExt#LeanColor","LeanTweenExt#LeanColor$1","LeanTweenExt#LeanColorText","LeanTweenExt#LeanDelayedCall","LeanTweenExt#LeanDelayedCall$1","LeanTweenExt#LeanIsPaused","LeanTweenExt#LeanIsPaused$1","LeanTweenExt#LeanIsTweening","LeanTweenExt#LeanMove$3","LeanTweenExt#LeanMove$9","LeanTweenExt#LeanMove$5","LeanTweenExt#LeanMove$2","LeanTweenExt#LeanMove$8","LeanTweenExt#LeanMove$4","LeanTweenExt#LeanMove","LeanTweenExt#LeanMove$1","LeanTweenExt#LeanMove$10","LeanTweenExt#LeanMove$6","LeanTweenExt#LeanMove$7","LeanTweenExt#LeanMoveLocal$2","LeanTweenExt#LeanMoveLocal","LeanTweenExt#LeanMoveLocal$1","LeanTweenExt#LeanMoveLocal$5","LeanTweenExt#LeanMoveLocal$3","LeanTweenExt#LeanMoveLocal$4","LeanTweenExt#LeanMoveLocalX","LeanTweenExt#LeanMoveLocalX$1","LeanTweenExt#LeanMoveLocalY","LeanTweenExt#LeanMoveLocalY$1","LeanTweenExt#LeanMoveLocalZ","LeanTweenExt#LeanMoveLocalZ$1","LeanTweenExt#LeanMoveSpline$1","LeanTweenExt#LeanMoveSpline","LeanTweenExt#LeanMoveSpline$3","LeanTweenExt#LeanMoveSpline$2","LeanTweenExt#LeanMoveSplineLocal","LeanTweenExt#LeanMoveSplineLocal$1","LeanTweenExt#LeanMoveX","LeanTweenExt#LeanMoveX$2","LeanTweenExt#LeanMoveX$1","LeanTweenExt#LeanMoveY","LeanTweenExt#LeanMoveY$2","LeanTweenExt#LeanMoveY$1","LeanTweenExt#LeanMoveZ","LeanTweenExt#LeanMoveZ$2","LeanTweenExt#LeanMoveZ$1","LeanTweenExt#LeanPause","LeanTweenExt#LeanPlay","LeanTweenExt#LeanResume","LeanTweenExt#LeanRotate","LeanTweenExt#LeanRotate$2","LeanTweenExt#LeanRotate$1","LeanTweenExt#LeanRotateAround","LeanTweenExt#LeanRotateAround$2","LeanTweenExt#LeanRotateAround$1","LeanTweenExt#LeanRotateAroundLocal","LeanTweenExt#LeanRotateAroundLocal$2","LeanTweenExt#LeanRotateAroundLocal$1","LeanTweenExt#LeanRotateX","LeanTweenExt#LeanRotateX$1","LeanTweenExt#LeanRotateY","LeanTweenExt#LeanRotateY$1","LeanTweenExt#LeanRotateZ","LeanTweenExt#LeanRotateZ$1","LeanTweenExt#LeanScale","LeanTweenExt#LeanScale$2","LeanTweenExt#LeanScale$1","LeanTweenExt#LeanScaleX","LeanTweenExt#LeanScaleX$1","LeanTweenExt#LeanScaleY","LeanTweenExt#LeanScaleY$1","LeanTweenExt#LeanScaleZ","LeanTweenExt#LeanScaleZ$1","LeanTweenExt#LeanSize","LeanTweenExt#LeanValue$7","LeanTweenExt#LeanValue$6","LeanTweenExt#LeanValue$8","LeanTweenExt#LeanValue$9","LeanTweenExt#LeanValue","LeanTweenExt#LeanValue$5","LeanTweenExt#LeanValue$4","LeanTweenExt#LeanValue$1","LeanTweenExt#LeanValue$2","LeanTweenExt#LeanValue$3","LeanTweenExt#LeanSetPosX","LeanTweenExt#LeanSetPosY","LeanTweenExt#LeanSetPosZ","LeanTweenExt#LeanSetLocalPosX","LeanTweenExt#LeanSetLocalPosY","LeanTweenExt#LeanSetLocalPosZ","LTBezier#init","LTBezier#ctor","LTBezier#map","LTBezier#bezierPoint","LTBezier#point","LTBezierPath#distance#get","LTBezierPath#init","LTBezierPath#ctor","LTBezierPath#$ctor1","LTBezierPath#setPoints","LTBezierPath#point","LTBezierPath#place2d","LTBezierPath#placeLocal2d","LTBezierPath#place","LTBezierPath#place$1","LTBezierPath#placeLocal","LTBezierPath#placeLocal$1","LTBezierPath#gizmoDraw","LTBezierPath#ratioAtPoint","LTDescr#init","LTDescr#alphaRecursive$1","LTDescr#alphaRecursive","LTDescr#colorRecursive$1","LTDescr#colorRecursive","LTDescr#alphaRecursiveSprite","LTDescr#colorRecursiveSprite","LTDescr#textAlphaChildrenRecursive","LTDescr#textAlphaRecursive","LTDescr#textColorRecursive","LTDescr#tweenColor","LTDescr#from#get","LTDescr#from#set","LTDescr#to#get","LTDescr#to#set","LTDescr#toTrans#get","LTDescr#uniqueId#get","LTDescr#id#get","LTDescr#optional#get","LTDescr#optional#set","LTDescr#init","LTDescr#ctor","LTDescr#toString","LTDescr#cancel","LTDescr#reset","LTDescr#setFollow","LTDescr#setMoveX","LTDescr#setMoveY","LTDescr#setMoveZ","LTDescr#setMoveLocalX","LTDescr#setMoveLocalY","LTDescr#setMoveLocalZ","LTDescr#initFromInternal","LTDescr#setOffset","LTDescr#setMoveCurved","LTDescr#setMoveCurvedLocal","LTDescr#setMoveSpline","LTDescr#setMoveSplineLocal","LTDescr#setScaleX","LTDescr#setScaleY","LTDescr#setScaleZ","LTDescr#setRotateX","LTDescr#setRotateY","LTDescr#setRotateZ","LTDescr#setRotateAround","LTDescr#setRotateAroundLocal","LTDescr#setAlpha","LTDescr#setTextAlpha","LTDescr#setAlphaVertex","LTDescr#setColor","LTDescr#setCallbackColor","LTDescr#setTextColor","LTDescr#setCanvasAlpha","LTDescr#setCanvasGroupAlpha","LTDescr#setCanvasColor","LTDescr#setCanvasMoveX","LTDescr#setCanvasMoveY","LTDescr#setCanvasMoveZ","LTDescr#initCanvasRotateAround","LTDescr#setCanvasRotateAround","LTDescr#setCanvasRotateAroundLocal","LTDescr#setCanvasPlaySprite","LTDescr#setCanvasMove","LTDescr#setCanvasScale","LTDescr#setCanvasSizeDelta","LTDescr#callback","LTDescr#setCallback","LTDescr#setValue3","LTDescr#setMove","LTDescr#setMoveLocal","LTDescr#setMoveToTransform","LTDescr#setRotate","LTDescr#setRotateLocal","LTDescr#setScale","LTDescr#setScale$1","LTDescr#setGUIMove","LTDescr#setGUIMoveMargin","LTDescr#setGUIScale","LTDescr#setGUIAlpha","LTDescr#setGUIRotate","LTDescr#setDelayedSound","LTDescr#setTarget","LTDescr#init","LTDescr#initSpeed","LTDescr#updateNow","LTDescr#updateInternal","LTDescr#callOnCompletes","LTDescr#setFromColor","LTDescr#pause","LTDescr#resume","LTDescr#setAxis","LTDescr#setDelay","LTDescr#setEase","LTDescr#setEase$1","LTDescr#setEaseLinear","LTDescr#setEaseSpring","LTDescr#setEaseInQuad","LTDescr#setEaseOutQuad","LTDescr#setEaseInOutQuad","LTDescr#setEaseInCubic","LTDescr#setEaseOutCubic","LTDescr#setEaseInOutCubic","LTDescr#setEaseInQuart","LTDescr#setEaseOutQuart","LTDescr#setEaseInOutQuart","LTDescr#setEaseInQuint","LTDescr#setEaseOutQuint","LTDescr#setEaseInOutQuint","LTDescr#setEaseInSine","LTDescr#setEaseOutSine","LTDescr#setEaseInOutSine","LTDescr#setEaseInExpo","LTDescr#setEaseOutExpo","LTDescr#setEaseInOutExpo","LTDescr#setEaseInCirc","LTDescr#setEaseOutCirc","LTDescr#setEaseInOutCirc","LTDescr#setEaseInBounce","LTDescr#setEaseOutBounce","LTDescr#setEaseInOutBounce","LTDescr#setEaseInBack","LTDescr#setEaseOutBack","LTDescr#setEaseInOutBack","LTDescr#setEaseInElastic","LTDescr#setEaseOutElastic","LTDescr#setEaseInOutElastic","LTDescr#setEasePunch","LTDescr#setEaseShake","LTDescr#tweenOnCurve","LTDescr#easeInOutQuad","LTDescr#easeInQuad","LTDescr#easeOutQuad","LTDescr#easeLinear","LTDescr#easeSpring","LTDescr#easeInCubic","LTDescr#easeOutCubic","LTDescr#easeInOutCubic","LTDescr#easeInQuart","LTDescr#easeOutQuart","LTDescr#easeInOutQuart","LTDescr#easeInQuint","LTDescr#easeOutQuint","LTDescr#easeInOutQuint","LTDescr#easeInSine","LTDescr#easeOutSine","LTDescr#easeInOutSine","LTDescr#easeInExpo","LTDescr#easeOutExpo","LTDescr#easeInOutExpo","LTDescr#easeInCirc","LTDescr#easeOutCirc","LTDescr#easeInOutCirc","LTDescr#easeInBounce","LTDescr#easeOutBounce","LTDescr#easeInOutBounce","LTDescr#easeInBack","LTDescr#easeOutBack","LTDescr#easeInOutBack","LTDescr#easeInElastic","LTDescr#easeOutElastic","LTDescr#easeInOutElastic","LTDescr#setOvershoot","LTDescr#setPeriod","LTDescr#setTo$1","LTDescr#setTo","LTDescr#setFrom$1","LTDescr#setFrom","LTDescr#setDiff","LTDescr#setHasInitialized","LTDescr#setId","LTDescr#setPassed","LTDescr#setTime","LTDescr#setSpeed","LTDescr#setRepeat","LTDescr#setLoopType","LTDescr#setUseEstimatedTime","LTDescr#setIgnoreTimeScale","LTDescr#setUseFrames","LTDescr#setUseManualTime","LTDescr#setLoopCount","LTDescr#setLoopOnce","LTDescr#setLoopClamp","LTDescr#setLoopClamp$1","LTDescr#setLoopPingPong","LTDescr#setLoopPingPong$1","LTDescr#setOnComplete","LTDescr#setOnComplete$1","LTDescr#setOnComplete$2","LTDescr#setOnCompleteParam","LTDescr#setOnUpdate","LTDescr#setOnUpdate$1","LTDescr#setOnUpdate$5","LTDescr#setOnUpdate$4","LTDescr#setOnUpdate$6","LTDescr#setOnUpdate$2","LTDescr#setOnUpdate$3","LTDescr#setOnUpdateRatio","LTDescr#setOnUpdateObject","LTDescr#setOnUpdateVector2","LTDescr#setOnUpdateVector3","LTDescr#setOnUpdateColor","LTDescr#setOnUpdateColor$1","LTDescr#setOnUpdateParam","LTDescr#setOrientToPath","LTDescr#setOrientToPath2d","LTDescr#setRect","LTDescr#setRect$1","LTDescr#setRect$2","LTDescr#setPath","LTDescr#setPoint","LTDescr#setDestroyOnComplete","LTDescr#setAudio","LTDescr#setOnCompleteOnRepeat","LTDescr#setOnCompleteOnStart","LTDescr#setSprites","LTDescr#setFrameRate","LTDescr#setOnStart","LTDescr#setDirection","LTDescr#setRecursive","LTDescrOptional#init","LTDescrOptional#reset","LTDescrOptional#callOnUpdate","LTEvent#ctor","LTGUI#init","LTGUI#init","LTGUI#initRectCheck","LTGUI#reset","LTGUI#update","LTGUI#checkOnScreen","LTGUI#destroy","LTGUI#destroyAll","LTGUI#label$1","LTGUI#label","LTGUI#texture$1","LTGUI#texture","LTGUI#element","LTGUI#hasNoOverlap","LTGUI#pressedWithinRect","LTGUI#checkWithinRect","LTGUI#firstTouch","LTRect#hasInitiliazed#get","LTRect#id#get","LTRect#x#get","LTRect#x#set","LTRect#y#get","LTRect#y#set","LTRect#width#get","LTRect#width#set","LTRect#height#get","LTRect#height#set","LTRect#rect#get","LTRect#rect#set","LTRect#init","LTRect#ctor","LTRect#$ctor4","LTRect#$ctor1","LTRect#$ctor2","LTRect#$ctor3","LTRect#setId","LTRect#reset","LTRect#resetForRotation","LTRect#setStyle","LTRect#setFontScaleToFit","LTRect#setColor","LTRect#setAlpha","LTRect#setLabel","LTRect#setUseSimpleScale$1","LTRect#setUseSimpleScale","LTRect#setSizeByHeight","LTRect#toString","LTSeq#id#get","LTSeq#init","LTSeq#reset","LTSeq#init","LTSeq#addOn","LTSeq#addPreviousDelays","LTSeq#append$3","LTSeq#append$1","LTSeq#append$2","LTSeq#append$4","LTSeq#append$5","LTSeq#append","LTSeq#insert","LTSeq#setScale","LTSeq#setScaleRecursive","LTSeq#reverse","LTSpline#init","LTSpline#drawGizmo","LTSpline#drawLine","LTSpline#init","LTSpline#ctor","LTSpline#$ctor1","LTSpline#init","LTSpline#map","LTSpline#interp","LTSpline#ratioAtPoint","LTSpline#point","LTSpline#place2d","LTSpline#placeLocal2d","LTSpline#place","LTSpline#place$1","LTSpline#placeLocal","LTSpline#placeLocal$1","LTSpline#gizmoDraw","LTSpline#drawGizmo","LTSpline#generateVectors","LTUtility#reverse","MyExtensions#Shuffle","OrientationManager#IsCurrentlyPortrait#get","OrientationManager#Awake","OrientationManager#Start","OrientationManager#InitializeOrientation","OrientationManager#Update","OrientationManager#UpdateOrientation","OrientationManager#OrientationUpdate","OrientationManager#HandleScreenOrientationChange","OrientationManager#CheckIfPortrait","OrientationManager#OnDestroy","PathBezier2d#Start","PathBezier2d#OnDrawGizmos","PathSpline2d#Start","PathSpline2d#OnDrawGizmos","PathSplineEndless#init","PathSplineEndless#Start","PathSplineEndless#Update","PathSplineEndless#objectQueue","PathSplineEndless#addRandomTrackPoint","PathSplineEndless#refreshSpline","PathSplineEndless#playSwish","PathSplinePerformance#init","PathSplinePerformance#Start","PathSplinePerformance#Update","PathSplinePerformance#OnDrawGizmos","PathSplinePerformance#playSwish","PathSplines#OnEnable","PathSplines#Start","PathSplines#Update","PathSplines#OnDrawGizmos","PathSplineTrack#init","PathSplineTrack#Start","PathSplineTrack#Update","PathSplineTrack#OnDrawGizmos","PathSplineTrack#playSwish","PieceShape#init","PlayingManager.BlockContainer#init","PopUpFrameWork.PopupManager#Awake","PopUpFrameWork.PopupManager#Show","PopUpFrameWork.PopupManager#Show$1","PopUpFrameWork.PopupManager#Show$3","PopUpFrameWork.PopupManager#Show$2","PopUpFrameWork.PopupManager#CloseActivePopup","PopUpFrameWork.PopupManager#OnPopupHiding","PopUpFrameWork.PopupManager#GetPopupById","PopUpFrameWork.PopupManager.PopupInfo#init","RatioResolution#GetResolution","RatioResolution#GetMainGameViewSize","RectTransformByOrientation#init","RectTransformByOrientation#Start","RectTransformByOrientation#InitializeRect","RectTransformByOrientation#UpdateRect","RectTransformByOrientation#UpdateRectPos","RestartStage#RestartCurrentStage","RestartStage#Update","ScreenFrameWork.Screen.TransitionInfo#init","ScreenFrameWork.ScreenBackButton#Button#get","ScreenFrameWork.ScreenBackButton#CanvasGroup#get","ScreenFrameWork.ScreenBackButton#init","ScreenFrameWork.ScreenBackButton#Start","ScreenFrameWork.ScreenBackButton#OnButtonClicked","ScreenFrameWork.ScreenBackButton#OnSwitchingScreens","ScreenFrameWork.ScreenBackButton#PlayAnimation","SoundButton#OnPointerDown","SoundClipInfor#init","Timer#Schedule","Timer#StopSchedule","Timer#DoTask","Timer#ctor","Timer#$ctor1","Timer#Tick","Timer#Clear","UIAnimation#PlayAllById","UIAnimation#StopAllById","UIAnimation#GetAnimation","UIAnimation#GetAnimationsById","UIAnimation#DestroyAllAnimations","UIAnimation#PositionX","UIAnimation#PositionX$1","UIAnimation#PositionY","UIAnimation#PositionY$1","UIAnimation#ScaleX","UIAnimation#ScaleX$1","UIAnimation#ScaleY","UIAnimation#ScaleY$1","UIAnimation#RotationZ","UIAnimation#RotationZ$1","UIAnimation#Width$1","UIAnimation#Width","UIAnimation#Height$1","UIAnimation#Height","UIAnimation#Alpha","UIAnimation#Alpha$1","UIAnimation#Color","UIAnimation#Color$1","UIAnimation#CreateAnimation","UIAnimation#CreateColorAnimation","UIAnimation#CreateUIAnimation","UIAnimation#GetUIAnimation","UIAnimation#IsPlaying#get","UIAnimation#init","UIAnimation#Start","UIAnimation#Update","UIAnimation#Play","UIAnimation#Stop","UIAnimation#Init","UIAnimation#SetFromValue","UIAnimation#Check","UIAnimation#PlayAnimationAfterDelay","UIAnimation#PlayAnimation","UIAnimation#UpdateAnimation","UIAnimation#GetLerpT","UIAnimation#GetValue","UIAnimation#SetValue","UIAnimation#DestroyAnimation","Utilities#SystemTimeInMilliseconds#get","Utilities#WorldWidth#get","Utilities#WorldHeight#get","Utilities#XScale#get","Utilities#YScale#get","Utilities#Map","Utilities#Filter","Utilities#SwapValue","Utilities#EaseOut","Utilities#EaseIn","Utilities#MousePosition","Utilities#MouseDown","Utilities#MouseUp","Utilities#MouseNone","Utilities#CharToLower","Utilities#GCD","Utilities#GetCanvas","Utilities#CallExternalAndroid$1","Utilities#CallExternalAndroid","Utilities#ConvertToJsonString","Utilities#SetLayer","Utilities#ParseCSVFile","Utilities#DestroyAllChildren","Utilities#FindFile","Utilities#CalculateMD5Hash","Utilities#CompareLists","Utilities#PrintList","Utilities#Rotate","Utilities#CreateTexture","Utilities#GetFilesRecursively","Utilities#SwitchToRectTransform","Utilities#GetCanvasCamera","Utilities#SetAlpha","AdjustRectTransformForSafeArea#GetMainGameViewSize","AdjustRectTransformForSafeArea#init","AdjustRectTransformForSafeArea#Start","AdjustRectTransformForSafeArea#Update","AdjustRectTransformForSafeArea#UpdateUI","BlockBoard#CanPlace#get","BlockBoard#HighLight#get","BlockBoard#init","BlockBoard#SetBlockImage","BlockBoard#SetBlockGem","BlockBoard#SetLayer","BlockBoard#ToggleActiveBlockGFX","BlockBoard#ShowPlaceBlock","BlockBoard#DestroyAnimation","BlockBoard#VisibleBlock","BlockBoard#VisibleHightLight","BlockBoard#MultiplySortingOrder","BlockBoard#ShowBlocksCrossCanDestroy","BlockBoard#GetBlocksCrossDestroy","BlockBoard#FullBlockCross1","BlockBoard#FullBlockCross2","BoardContainer#SortInSpiralOrder","BoardContainer#GetWidth#get","BoardContainer#GetHeight#get","BoardContainer#GetBlocks#get","BoardContainer#GetAllBlocks#get","BoardContainer#GetBlockScale#get","BoardContainer#init","BoardContainer#Start","BoardContainer#NextGridSize","BoardContainer#SetBlockScale","BoardContainer#ChangeGridSize","BoardContainer#MinimizeGrid","BoardContainer#ScaleBorder","BoardContainer#BlocksFall","BoardContainer#ShakeBoard","BoardContainer#Reset","BoardContainer#BoardGrowBlockAnimation","BoardContainer#CollectGem","BoardContainer#Update","BoardContainer#CameraShake","BoardContainer#BlocksHasChild","BoardContainer#SetBlockImage","BoardContainer#VisibleBlock","BoardContainer#GameOver","BoardContainer#GetBlockPosition","BoardContainer#GetNextBlockPos","BombMode#init","BombMode#Start","BombMode#VisibleObjs","BombMode#GetGameMode","BombMode#NextPiece","BombMode#Setup","BombMode#ActionDestroyBlock","BombMode#ActionPlacePiece","BombMode#ReturnHome","BombMode#Reset","ScreenFrameWork.SingletonComponent$1#Instance#get","ScreenFrameWork.SingletonComponent$1#init","ScreenFrameWork.SingletonComponent$1#Exists","ScreenFrameWork.SingletonComponent$1#Awake","ScreenFrameWork.SingletonComponent$1#SetInstance","BoosterMoveDestroy#init","BoosterMoveDestroy#Setup","BoosterMoveDestroy#OnEnable","BoosterMoveDestroy#Move","BoosterMoveDestroy#Update","BoosterMoveDestroy#OnTriggerEnter2D","BoosterMoveDestroy#GUIEditor","EffectDestroyBlock3D#GetRigidbody#get","EffectDestroyBlock3D#init","EffectDestroyBlock3D#Acitve","EffectDestroyBlock3D#OnDisable","EffectDestroyBlock3D#Update","EmptyMode#init","EmptyMode#Start","EmptyMode#VisibleObjs","EmptyMode#GetGameMode","EmptyMode#NextPiece","EmptyMode#Setup","EmptyMode#ActionDestroyBlock","EmptyMode#ActionPlacePiece","EmptyMode#Reset","EmptyMode#ReturnHome","ScreenFrameWork.UIMonoBehaviour#RectT#get","ScreenFrameWork.UIMonoBehaviour#CG#get","ScreenFrameWork.UIMonoBehaviour#Shake","ScreenFrameWork.UIMonoBehaviour#StartShake","ScreenFrameWork.UIMonoBehaviour#ShakeLeft","ScreenFrameWork.UIMonoBehaviour#ShakeRight","ScreenFrameWork.UIMonoBehaviour#Pulse","ScreenFrameWork.UIMonoBehaviour#StartPulse","ScreenFrameWork.UIMonoBehaviour#Twist","ScreenFrameWork.UIMonoBehaviour#StartTwist","ScreenFrameWork.UIMonoBehaviour#StopRoutine","Piece#Score#get","Piece#GetBlockObjs#get","Piece#GetPieceID#get","Piece#init","Piece#Update","Piece#Setup","Piece#GetRandomBlockColor","Piece#SetupPieceClone","Piece#SetSelectPosition","Piece#SetSelected","Piece#GetWorldScale","Piece#CheckPieceCanPlaceBoard","Piece#CanPlacePieceOnBoard","Piece#SetBlockImage","Piece#SetBlockColor","Piece#SetBlockScale","Piece#PlacePiece","Piece#VisibleBlocks","Piece#FullBlockY","Piece#FullBlockX","TimeMode#init","TimeMode#Start","TimeMode#FixedUpdate","TimeMode#VisibleObjs","TimeMode#ShowEffectTime","TimeMode#UpdateProcessFill","TimeMode#GetGameMode","TimeMode#NextPiece","TimeMode#Setup","TimeMode#ActionDestroyBlock","TimeMode#ActionPlacePiece","TimeMode#ReturnHome","TimeMode#Reset","TutorialBoardData#init","TutorialBoardData#CanPlacePiece","TutorialBoardData#Setup","TutorialBoardData#EndStep","BoosterManager#inherits","BoosterManager#init","BoosterManager#GetBoosterType#get","BoosterManager#init","BoosterManager#SetBoosterType","BoosterManager#Start","BoosterManager#SetupPlayGame","BoosterManager#UpdateTexNumberBooster","BoosterManager#OnEventBoosterCancel","BoosterManager#EffectOneBlockDestroy","BoosterManager#VisibleButtonUndo","BoosterManager#Restart","BoosterManager#CompleteUsedBooster","BoosterManager#AnimationScale","BoosterManager#AddHint","BoosterManager#ActiveEffectBooster","BoosterManager#OnEventUseBooster","EffectManager#inherits","EffectManager#init","EffectManager#RegisterEffectDestroyBlock","EffectManager#RegisterScoreTextEffect","EffectManager#RegisterEffectDestroyBlockHexa","EffectManager#RegisterEffectTime","EffectManager#RegisterSwordObj","EffectManager#RegisterArrowObj","EffectManager#RegisterBombItem","GameManager#inherits","GameManager#init","GameManager#GetDataInGame#get","GameManager#GetRateURL#get","GameManager#GetGameSetting#get","GameManager#GetCurrentDataMode#get","GameManager#GetGameMode#get","GameManager#GetBoardType#get","GameManager#init","GameManager#SetGameMode","GameManager#SetBoardType","GameManager#Awake$1","GameManager#Start","GameManager#ClearData","GameManager#PlayGame","GameManager#GoHome","GameManager#UpdateScore","GameManager#ReplayGame","GameManager#GameOverProccess","GameManager#GameOver","GameManager#VisibleButton","GameManager#SaveDataMode","GameManager#SaveSetting","GameManager#LoadSetting","GameManager#LoadData","GameManager#SecondChance","PopUpFrameWork.Popup#CanAndroidBackClosePopup#get","PopUpFrameWork.Popup#Initialize","PopUpFrameWork.Popup#Show","PopUpFrameWork.Popup#Show$1","PopUpFrameWork.Popup#Hide","PopUpFrameWork.Popup#Hide$1","PopUpFrameWork.Popup#HideWithAction","PopUpFrameWork.Popup#OnShowing","PopUpFrameWork.Popup#OnShowing$1","PopUpFrameWork.Popup#OnHiding","PopUpFrameWork.Popup#DoFadeAnim","PopUpFrameWork.Popup#DoZoomAnim","ScreenFrameWork.Screen#Id#get","ScreenFrameWork.Screen#init","ScreenFrameWork.Screen#Initialize","ScreenFrameWork.Screen#Show","ScreenFrameWork.Screen#Hide","ScreenFrameWork.Screen#Transition","ScreenFrameWork.Screen#StartFadeAnimation","ScreenFrameWork.Screen#StartSwipeAnimation","ScreenFrameWork.Screen#SetVisibility","PieceManager#inherits","PieceManager#GetPiecesInGame#get","PieceManager#init","PieceManager#Start","PieceManager#SetupPlayGame","PieceManager#ReturnHome","PieceManager#VisiblePiecesInGame","PieceManager#PlacePieceSuccess","PieceManager#CheckBoardFull","PieceManager#Undo","PieceManager#CheckGameOver","PieceManager#RegisterPiece","PieceManager#GetRandomPieceId","PieceManager#CreateNewPieces","PieceManager#GetNextPiecesID","PieceManager#CheckPieceCanPlaceBoard","PlayingManager#inherits","PlayingManager#GetCurrentBoard#get","PlayingManager#TotalLineDestroy#get","PlayingManager#init","PlayingManager#Awake$1","PlayingManager#Update","PlayingManager#Start","PlayingManager#ReturnHome","PlayingManager#SetupPlayGame","PlayingManager#SetNewPieces","PlayingManager#ResumeGame","PlayingManager#SelectedAndDragPiece","PlayingManager#AddGameMode","PlayingManager#DestroyOneBlock","PlayingManager#SaveNewStepWhenUseBooster","PlayingManager#DestroyBlock","PlayingManager#DestroyBlocksFall","PlayingManager#DestroyBlockSecondChance","PlayingManager#ClearData","PlayingManager#CanUndo","PlayingManager#Undo","PrefabsManager#inherits","ScreenFrameWork.ScreenManager#inherits","ScreenFrameWork.ScreenManager#MainScreen#get","ScreenFrameWork.ScreenManager#HomeScreenId#get","ScreenFrameWork.ScreenManager#CurrentScreenId#get","ScreenFrameWork.ScreenManager#init","ScreenFrameWork.ScreenManager#Awake","ScreenFrameWork.ScreenManager#Update","ScreenFrameWork.ScreenManager#Show","ScreenFrameWork.ScreenManager#Show$1","ScreenFrameWork.ScreenManager#Back","ScreenFrameWork.ScreenManager#Home","ScreenFrameWork.ScreenManager#ClearBackStack","ScreenFrameWork.ScreenManager#GetScreenById","SoundManager#inherits","SoundManager#init","SoundManager#Start","SoundManager#MuteSource","SoundManager#ButtonClickedSound","SoundManager#SoundPlayOneShot","SpriteManager#inherits","SpriteManager#GetBlockShow2D#get","SpriteManager#GetBlocksShow3D#get","SpriteManager#init","SpriteManager#ShowTextEffect","SpriteManager#SetupImage","SpriteManager#GetSpriteByColor","SpriteManager#GetGemSpriteByColor","TutorialManager#inherits","TutorialManager#CurrentTutorialBoardData#get","TutorialManager#init","TutorialManager#Start","TutorialManager#Setup","TutorialManager#ActiveTutorialClassic","TutorialManager#ReturnHome","TutorialManager#ActiveTutorialHexa","TutorialManager#MoveHand","TutorialManager#EndStep","TutorialManager#Clicked","TutorialManager#Update","GameOverPopup#OnShowing","GameOverPopup#OnEventHome","GameOverPopup#OnEventReplay","GameOverPopup#OnEventRate","GameScreen#Hide","MenuScreen#init","MenuScreen#Start","MenuScreen#ReturnHome","MenuScreen#HideAllBoard","MenuScreen#SetGameMode","MenuScreen#Show","MenuScreen#OnEventPlay","MenuScreen#OnEventSelectMode","MenuScreen#OnEventSelectBoard","SecondChancePopup#init","SecondChancePopup#OnShowing","SecondChancePopup#OnEventYes","SecondChancePopup#OnEventNoTks","SecondChancePopup#StartCountTime","SecondChancePopup#FixedUpdate","SettingPopup#init","SettingPopup#Start","SettingPopup#OnEventMusic","SettingPopup#OnEventSound"]' ) ); }
/**
 * @version 1.0.9062.10286
 * @copyright anton
 * @compiler Bridge.NET 17.9.42-luna
 */
Bridge.assembly("UnityScriptsCompiler", function ($asm, globals) {
    "use strict";

    /*MonoHandler start.*/
    Bridge.define("MonoHandler", {
        inherits: [UnityEngine.MonoBehaviour],
        methods: {
            /*MonoHandler.GUIEditor start.*/
            GUIEditor: function () {
if ( TRACE ) { TRACE( "MonoHandler#GUIEditor", this ); }
 },
            /*MonoHandler.GUIEditor end.*/


        }
    });
    /*MonoHandler end.*/

    /*BlockColor start.*/
    Bridge.define("BlockColor", {
        $kind: 6,
        statics: {
            fields: {
                Purple: 0,
                Blue: 1,
                Cyan: 2,
                Green: 3,
                Yellow: 4,
                Orange: 5,
                Red: 6,
                White: 7,
                Brown: 8,
                Empty: 9
            }
        }
    });
    /*BlockColor end.*/

    /*BlockColorApplier start.*/
    Bridge.define("BlockColorApplier", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            rayLength: 0,
            rayDirection: null,
            targetTag: null,
            currentColor: 0,
            currentGemColor: 0,
            previewBlocks: null,
            previewGemBlocks: null,
            deleteMode: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BlockColorApplier#init", this ); }

                this.rayDirection = new UnityEngine.Vector2();
                this.rayLength = 5.0;
                this.rayDirection = pc.Vec2.RIGHT.clone();
                this.targetTag = "Block";
            }
        },
        methods: {
            /*BlockColorApplier.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "BlockColorApplier#Start", this ); }

                var $t;
                $t = Bridge.getEnumerator(this.previewBlocks);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        b.SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetSpriteByColor(b.color));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*BlockColorApplier.Start end.*/

            /*BlockColorApplier.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "BlockColorApplier#Update", this ); }

                var $t, $t1, $t2, $t3;
                $t = Bridge.getEnumerator(this.previewBlocks);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        b.ShowPlaceBlock(this.currentColor === b.color);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                $t1 = Bridge.getEnumerator(this.previewGemBlocks);
                try {
                    while ($t1.moveNext()) {
                        var b1 = $t1.Current;
                        b1.ShowPlaceBlock(this.currentGemColor === b1.gemColor);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                var col = this.currentColor;
                var gemCol = this.currentGemColor;
                if (UnityEngine.Input.GetMouseButton(1)) {
                    col = BlockColor.Empty;
                    gemCol = BlockGemColor.Empty;
                }


                if (UnityEngine.Input.GetMouseButton(0) || UnityEngine.Input.GetMouseButton(1)) {
                    // Get the mouse position in world space
                    var mousePosition = UnityEngine.Vector2.FromVector3(UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Input.mousePosition));

                    // Perform the Raycast
                    var hit = UnityEngine.Physics2D.Raycast$2(mousePosition, pc.Vec2.ZERO.clone(), this.rayLength);

                    // If the raycast hits something
                    if (UnityEngine.Component.op_Inequality(hit.collider, null)) {
                        // Check if the object has the specified tag
                        if (hit.collider.CompareTag(this.targetTag)) {
                            // Check if the object has a BoxCollider2D
                            var block = hit.collider.GetComponent(BlockBoard);

                            var previewBlock = false;
                            $t2 = Bridge.getEnumerator(this.previewBlocks);
                            try {
                                while ($t2.moveNext()) {
                                    var b2 = $t2.Current;
                                    if (UnityEngine.MonoBehaviour.op_Equality(block, b2)) {
                                        this.currentColor = block.color;
                                        previewBlock = true;
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t2, System.IDisposable)) {
                                    $t2.System$IDisposable$Dispose();
                                }
                            }

                            if (!previewBlock) {
                                $t3 = Bridge.getEnumerator(this.previewGemBlocks);
                                try {
                                    while ($t3.moveNext()) {
                                        var b3 = $t3.Current;
                                        if (UnityEngine.MonoBehaviour.op_Equality(block, b3)) {
                                            this.currentGemColor = block.gemColor;
                                            previewBlock = true;
                                            break;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t3, System.IDisposable)) {
                                        $t3.System$IDisposable$Dispose();
                                    }
                                }
                            }


                            if (previewBlock) {
                                return;
                            }

                            if (UnityEngine.MonoBehaviour.op_Inequality(block, null)) {
                                if (col === BlockColor.Empty) {
                                    block.VisibleBlock(false);
                                } else {
                                    block.VisibleBlock(true);
                                    block.color = col;
                                    block.SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetSpriteByColor(block.color));
                                }

                                block.SetBlockGem(gemCol);
                            }
                        }
                    }
                }

                if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha1)) {
                    this.currentColor = BlockColor.Purple;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha2)) {
                    this.currentColor = BlockColor.Blue;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha3)) {
                    this.currentColor = BlockColor.Cyan;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha4)) {
                    this.currentColor = BlockColor.Green;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha5)) {
                    this.currentColor = BlockColor.Yellow;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha6)) {
                    this.currentColor = BlockColor.Orange;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha7)) {
                    this.currentColor = BlockColor.Red;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha8)) {
                    this.currentColor = BlockColor.White;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha9)) {
                    this.currentColor = BlockColor.Brown;
                } else if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Alpha0)) {
                    this.currentColor = BlockColor.Empty;
                }
            },
            /*BlockColorApplier.Update end.*/


        }
    });
    /*BlockColorApplier end.*/

    /*BlockGemColor start.*/
    Bridge.define("BlockGemColor", {
        $kind: 6,
        statics: {
            fields: {
                Empty: 0,
                Cyan: 1,
                Red: 2,
                Purple: 3
            }
        }
    });
    /*BlockGemColor end.*/

    /*BlockObj start.*/
    Bridge.define("BlockObj", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            block: null,
            blockDestroyLine: null,
            canMoveBlock: false,
            sortingOrder: 0
        },
        methods: {
            /*BlockObj.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "BlockObj#Setup", this ); }

                this.sortingOrder = this.block.sortingOrder;
            },
            /*BlockObj.Setup end.*/

            /*BlockObj.SetBlockImage start.*/
            SetBlockImage: function (image) {
if ( TRACE ) { TRACE( "BlockObj#SetBlockImage", this ); }

                this.block.sprite = image;
            },
            /*BlockObj.SetBlockImage end.*/

            /*BlockObj.SetBlockColor start.*/
            SetBlockColor: function (newCol) {
if ( TRACE ) { TRACE( "BlockObj#SetBlockColor", this ); }

                this.block.color = newCol.$clone();
            },
            /*BlockObj.SetBlockColor end.*/

            /*BlockObj.BlockCanMove start.*/
            BlockCanMove: function () {
if ( TRACE ) { TRACE( "BlockObj#BlockCanMove", this ); }

                this.canMoveBlock = true;
            },
            /*BlockObj.BlockCanMove end.*/

            /*BlockObj.SetSelected start.*/
            SetSelected: function (selected) {
if ( TRACE ) { TRACE( "BlockObj#SetSelected", this ); }


                this.block.sortingOrder = (this.block.sortingOrder + ((selected) ? 20 : -20)) | 0;
            },
            /*BlockObj.SetSelected end.*/

            /*BlockObj.SetSortingOrder start.*/
            SetSortingOrder: function (sorting) {
if ( TRACE ) { TRACE( "BlockObj#SetSortingOrder", this ); }

                this.block.sortingOrder = sorting;
                this.blockDestroyLine.sortingOrder = (sorting + 1) | 0;
            },
            /*BlockObj.SetSortingOrder end.*/

            /*BlockObj.VisibleBlockDestroyLine start.*/
            VisibleBlockDestroyLine: function (visible) {
if ( TRACE ) { TRACE( "BlockObj#VisibleBlockDestroyLine", this ); }

                this.blockDestroyLine.gameObject.SetActive(visible);
                this.block.gameObject.SetActive(!visible);
            },
            /*BlockObj.VisibleBlockDestroyLine end.*/


        }
    });
    /*BlockObj end.*/

    /*BoardType start.*/
    Bridge.define("BoardType", {
        $kind: 6,
        statics: {
            fields: {
                Classic_8x8: 0,
                Classic_10x10: 1,
                Hexa: 2
            }
        }
    });
    /*BoardType end.*/

    /*BombDetail start.*/
    Bridge.define("BombDetail", {
        fields: {
            bombIndex: 0,
            stepBomb: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BombDetail#init", this ); }

                this.bombIndex = 0;
                this.stepBomb = 0;
            }
        }
    });
    /*BombDetail end.*/

    /*BombItem start.*/
    Bridge.define("BombItem", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            bugStandObj: null,
            eff_warning: null,
            stepText: null,
            blockBoard: null,
            step: 0,
            stepWarning: 0,
            bombDetail: null,
            destroy: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BombItem#init", this ); }

                this.destroy = false;
            }
        },
        methods: {
            /*BombItem.RemoveBomb start.*/
            RemoveBomb: function () {
if ( TRACE ) { TRACE( "BombItem#RemoveBomb", this ); }

                this.gameObject.SetActive(false);

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.bombDetails.remove(this.bombDetail);
                //GameManager.Instance.SaveDataMode();
            },
            /*BombItem.RemoveBomb end.*/

            /*BombItem.Setup start.*/
            Setup: function (blockBoard, step, bombDetail) {
if ( TRACE ) { TRACE( "BombItem#Setup", this ); }

                this.bombDetail = bombDetail;
                this.blockBoard = blockBoard;
                this.step = step;
                this.UpdateStepBomb(0);
                this.bugStandObj.gameObject.SetActive(true);
                this.destroy = false;
                this.eff_warning.gameObject.SetActive(false);
                this.stepWarning = Math.floor(3.0);

            },
            /*BombItem.Setup end.*/

            /*BombItem.UpdateStepBomb start.*/
            UpdateStepBomb: function (value) {
if ( TRACE ) { TRACE( "BombItem#UpdateStepBomb", this ); }

                this.step = (this.step - value) | 0;

                if (this.step <= this.stepWarning) {
                    //Show Warning
                    if (!this.eff_warning.gameObject.activeInHierarchy) {
                        this.eff_warning.gameObject.SetActive(true);
                        this.eff_warning.Play();
                    }
                }

                if (this.step <= 0) {
                    //Destroy Block and Game Over
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.DestroyOneBlock(this.blockBoard);
                    this.bugStandObj.SetActive(false);
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(false);
                    Timer.Schedule(this, 0.7, Bridge.fn.bind(this, function () {
                        if (this.destroy) {
                            return;
                        }
                        ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GameOverProccess();
                        this.DestroyBomb(this.destroy);
                    }));


                }
                this.stepText.text = Bridge.toString(this.step);
            },
            /*BombItem.UpdateStepBomb end.*/

            /*BombItem.DestroyBomb start.*/
            DestroyBomb: function (destroy) {
if ( TRACE ) { TRACE( "BombItem#DestroyBomb", this ); }

                if (destroy === void 0) { destroy = false; }
                this.destroy = destroy;

                if (this.step <= 0) {
                    Timer.Schedule(this, 1.5, Bridge.fn.bind(this, function () {
                        this.RemoveBomb();
                    }));
                } else {

                    Timer.StopSchedule(this);
                    this.RemoveBomb();
                }
            },
            /*BombItem.DestroyBomb end.*/


        }
    });
    /*BombItem end.*/

    /*IGameMode start.*/
    Bridge.define("IGameMode", {
        $kind: 3
    });
    /*IGameMode end.*/

    /*BoosterManager+BoosterInfor start.*/
    Bridge.define("BoosterManager.BoosterInfor", {
        $kind: 1002,
        fields: {
            nameBooster: null,
            numberBoosterStartGame: 0,
            numberTakeAds: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BoosterManager.BoosterInfor#init", this ); }

                this.numberBoosterStartGame = 1;
                this.numberTakeAds = 1;
            }
        }
    });
    /*BoosterManager+BoosterInfor end.*/

    /*BoosterManager+BoosterType start.*/
    Bridge.define("BoosterManager.BoosterType", {
        $kind: 1006,
        statics: {
            fields: {
                NONE: 0,
                ONE_BLOCK_DESTROY: 1,
                ONE_HORIZONTAL: 2,
                ONE_VERTICAL: 3,
                BACK: 4
            }
        }
    });
    /*BoosterManager+BoosterType end.*/

    /*BoosterManager+HintInfor start.*/
    Bridge.define("BoosterManager.HintInfor", {
        $kind: 1002,
        fields: {
            boosterType: 0,
            start: 0,
            current: 0,
            adsCanGet: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BoosterManager.HintInfor#init", this ); }

                this.start = 1;
                this.current = 0;
                this.adsCanGet = 0;
            }
        },
        methods: {
            /*BoosterManager+HintInfor.SaveHintInfor start.*/
            SaveHintInfor: function () {
if ( TRACE ) { TRACE( "BoosterManager.HintInfor#SaveHintInfor", this ); }

                UnityEngine.PlayerPrefs.SetInt(System.Enum.toString(BoosterManager.BoosterType, this.boosterType), this.current);
            },
            /*BoosterManager+HintInfor.SaveHintInfor end.*/

            /*BoosterManager+HintInfor.LoadHintInfor start.*/
            LoadHintInfor: function () {
if ( TRACE ) { TRACE( "BoosterManager.HintInfor#LoadHintInfor", this ); }

                this.current = UnityEngine.PlayerPrefs.GetInt(System.Enum.toString(BoosterManager.BoosterType, this.boosterType), this.start);
            },
            /*BoosterManager+HintInfor.LoadHintInfor end.*/


        }
    });
    /*BoosterManager+HintInfor end.*/

    /*BottomObj start.*/
    Bridge.define("BottomObj", {
        fields: {
            objs: null,
            positionY: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BottomObj#init", this ); }

                this.objs = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
                this.positionY = 0;
            }
        }
    });
    /*BottomObj end.*/

    /*CameraController start.*/
    Bridge.define("CameraController", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            doCameraZoom: false,
            csr: null,
            cameraZoomLevels: null,
            landscapeOffset: null,
            zoomOutDuration: 0,
            currentZoomIndex: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "CameraController#init", this ); }

                this.zoomOutDuration = 0.25;
            }
        },
        methods: {
            /*CameraController.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "CameraController#Start", this ); }

                this.InitializeCam();
            },
            /*CameraController.Start end.*/

            /*CameraController.InitializeCam start.*/
            InitializeCam: function () {
if ( TRACE ) { TRACE( "CameraController#InitializeCam", this ); }

                if (!this.doCameraZoom) {
                    return;
                }

                this.csr.UpdateTargetSizes(this.cameraZoomLevels[0], this.cameraZoomLevels[0] + this.landscapeOffset[0]);
                this.currentZoomIndex = (this.currentZoomIndex + 1) | 0;
            },
            /*CameraController.InitializeCam end.*/

            /*CameraController.UpdateCameraZoom start.*/
            UpdateCameraZoom: function () {
if ( TRACE ) { TRACE( "CameraController#UpdateCameraZoom", this ); }

                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    portraitZoomSize, 
                    lsOffset, 
                    currentZoom, 
                    zoomTween, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.doCameraZoom) {
                                            $step = 1;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 1: {
                                        portraitZoomSize = this.cameraZoomLevels[this.currentZoomIndex];
                                        lsOffset = this.landscapeOffset[this.currentZoomIndex];

                                        currentZoom = this.csr.GetCurrentSize();
                                        zoomTween = DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), DG.Tweening.DOTween.To$4(function () {
                                            return currentZoom;
                                        }, function (x) {
                                            currentZoom = x;
                                        }, portraitZoomSize, this.zoomOutDuration), Bridge.fn.bind(this, function () {
                                            this.csr.UpdateTargetSizes(currentZoom, currentZoom + lsOffset);
                                        }));

                                        this.currentZoomIndex = (this.currentZoomIndex + 1) | 0;
                                        $task1 = DOTweenExtensions.AsyncWait(zoomTween);
                                        $step = 2;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 3: {
                                        $task2 = System.Threading.Tasks.Task.delay(1);
                                        $step = 4;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 4: {
                                        $task2.getAwaitedResult();
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            /*CameraController.UpdateCameraZoom end.*/


        }
    });
    /*CameraController end.*/

    /*CameraSize start.*/
    Bridge.define("CameraSize", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            cameraObj: null,
            sizeCamera: 0,
            aspect: 0,
            originPosition: null,
            sizeCameraInBoard10x10: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "CameraSize#init", this ); }

                this.originPosition = new UnityEngine.Vector3();
                this.sizeCamera = 1;
                this.aspect = 1;
                this.sizeCameraInBoard10x10 = 0;
            }
        },
        methods: {
            /*CameraSize.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "CameraSize#Start", this ); }

                this.originPosition = this.transform.position.$clone();

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addSetupPlayGame(Bridge.fn.cacheBind(this, this.SetupPlayGame));
            },
            /*CameraSize.Start end.*/

            /*CameraSize.SetupPlayGame start.*/
            SetupPlayGame: function () {
if ( TRACE ) { TRACE( "CameraSize#SetupPlayGame", this ); }

                var position = this.originPosition.$clone();

                this.sizeCameraInBoard10x10 = 0;
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Classic_10x10) {



                    this.sizeCameraInBoard10x10 = 2.0;
                }
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {



                    this.sizeCameraInBoard10x10 = 2.0;
                }
                this.transform.position = position.$clone();

                this.Initialize();

            },
            /*CameraSize.SetupPlayGame end.*/

            /*CameraSize.Initialize start.*/
            Initialize: function () {
if ( TRACE ) { TRACE( "CameraSize#Initialize", this ); }

                this.aspect = UnityEngine.Screen.height / UnityEngine.Screen.width;
                this.aspect = Bridge.Math.round(this.aspect, 2, 6);
                var size = this.sizeCamera;
                if (this.aspect > 1.1 && this.aspect <= 1.5) {
                    size = (this.sizeCamera + this.aspect + 0.5) - 0.8;
                } else if (this.aspect <= 1.1) {
                    size = this.sizeCamera + this.aspect + 0.5;
                    size += 2;
                }
                this.cameraObj.orthographicSize = this.aspect * size + this.sizeCameraInBoard10x10;
            },
            /*CameraSize.Initialize end.*/


        }
    });
    /*CameraSize end.*/

    /*CameraSizeByResolution start.*/
    Bridge.define("CameraSizeByResolution", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            DebugUpdateCam: false,
            referencePortraitResolution: null,
            portraitTargetSize: 0,
            landscapeTargetSize: 0,
            cam: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "CameraSizeByResolution#init", this ); }

                this.referencePortraitResolution = new UnityEngine.Vector2();
            }
        },
        methods: {
            /*CameraSizeByResolution.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "CameraSizeByResolution#Start", this ); }

                this.cam = UnityEngine.Camera.main;
                OrientationManager.addOrientationChangeEvent(Bridge.fn.cacheBind(this, this.UpdateCameraSize));
                this.UpdateCameraSize(OrientationManager.Instance.IsCurrentlyPortrait);
            },
            /*CameraSizeByResolution.Start end.*/

            /*CameraSizeByResolution.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "CameraSizeByResolution#Update", this ); }

                if (this.DebugUpdateCam) {
                    this.UpdateCameraSize(OrientationManager.Instance.IsCurrentlyPortrait);
                }
            },
            /*CameraSizeByResolution.Update end.*/

            /*CameraSizeByResolution.UpdateCameraSize start.*/
            UpdateCameraSize: function (isPortrait) {
if ( TRACE ) { TRACE( "CameraSizeByResolution#UpdateCameraSize", this ); }

                var targetSize = isPortrait ? this.portraitTargetSize : this.landscapeTargetSize;
                var fixedRatio = this.referencePortraitResolution.x / this.referencePortraitResolution.y;
                var screenRatio = UnityEngine.Screen.height / UnityEngine.Screen.width;
                var modifiedSize = isPortrait ? (targetSize / fixedRatio) : (targetSize * fixedRatio);
                UnityEngine.Camera.main.orthographicSize = (modifiedSize * screenRatio);
            },
            /*CameraSizeByResolution.UpdateCameraSize end.*/

            /*CameraSizeByResolution.UpdateTargetSizes start.*/
            UpdateTargetSizes: function (portraitTarget, landscapeTarget) {
if ( TRACE ) { TRACE( "CameraSizeByResolution#UpdateTargetSizes", this ); }

                this.portraitTargetSize = portraitTarget;
                this.landscapeTargetSize = landscapeTarget;
            },
            /*CameraSizeByResolution.UpdateTargetSizes end.*/

            /*CameraSizeByResolution.GetCurrentSize start.*/
            GetCurrentSize: function () {
if ( TRACE ) { TRACE( "CameraSizeByResolution#GetCurrentSize", this ); }

                return this.portraitTargetSize;
            },
            /*CameraSizeByResolution.GetCurrentSize end.*/


        }
    });
    /*CameraSizeByResolution end.*/

    /*ConstValue start.*/
    Bridge.define("ConstValue", {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            fields: {
                ScoresIDGameModeAndroid: null,
                ScoresIDGameModeIOS: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ConstValue#init", this ); }

                    this.ScoresIDGameModeAndroid = function (_o1) {
                            _o1.add("SCOREIDCLASSIC_8X8_ANDROID");
                            _o1.add("CgkIrvbhwf0dEAIQAQ");
                            _o1.add("SCOREIDTIME_8X8_ANDROID");
                            _o1.add("SCOREIDTIME_10x10_ANDROID");
                            _o1.add("SCOREIDBOMB_8x8_ANDROID");
                            _o1.add("SCOREIDBOMB_10X10_ANDROID");
                            _o1.add("SCOREIDHEXA_ANDROID");
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                    this.ScoresIDGameModeIOS = function (_o2) {
                            _o2.add("SCOREIDCLASSIC_8X8_IOS");
                            _o2.add("SCOREIDCLASSIC_10X10_IOS");
                            _o2.add("SCOREIDTIME_8X8_IOS");
                            _o2.add("SCOREIDTIME_10x10_IOS");
                            _o2.add("SCOREIDBOMB_8x8_IOS");
                            _o2.add("SCOREIDBOMB_10X10_IOS");
                            _o2.add("SCOREIDHEXA_IOS");
                            return _o2;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                }
            }
        }
    });
    /*ConstValue end.*/

    /*CurveMove start.*/
    Bridge.define("CurveMove", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            speed: 0,
            elapsedTime: 0,
            isUpdate: false,
            p0: null,
            p1: null,
            p2: null,
            target: null,
            triggerFinish: null
        },
        props: {
            GetTarget: {
                get: function () {
if ( TRACE ) { TRACE( "CurveMove#GetTarget#get", this ); }

                    return this.target;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "CurveMove#init", this ); }

                this.p0 = new UnityEngine.Vector3();
                this.p1 = new UnityEngine.Vector3();
                this.p2 = new UnityEngine.Vector3();
                this.speed = 1;
                this.elapsedTime = 0;
                this.isUpdate = false;
            }
        },
        methods: {
            /*CurveMove.Move start.*/
            Move: function (target, position, action) {
if ( TRACE ) { TRACE( "CurveMove#Move", this ); }

                this.isUpdate = true;
                this.p0 = this.transform.position.$clone();

                this.p2 = target.position.$clone();

                this.p1 = new pc.Vec3( this.p2.x + UnityEngine.Random.Range$1(1.0, 3.0), this.p0.y * 1.2, 0 );


                this.triggerFinish = action;
                this.target = target;
                this.transform.position = position.$clone();
                this.elapsedTime = 0;
            },
            /*CurveMove.Move end.*/

            /*CurveMove.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "CurveMove#Update", this ); }

                if (!this.isUpdate) {
                    return;
                }

                this.elapsedTime += UnityEngine.Time.deltaTime * this.speed;
                var position = this.p0.clone().scale( (1.0 - this.elapsedTime) * (1.0 - this.elapsedTime) ).add( this.p1.clone().scale( 2.0 * (1.0 - this.elapsedTime) * this.elapsedTime ) ).add( this.p2.clone().scale( this.elapsedTime * this.elapsedTime ) );

                this.transform.position = position.$clone();
                if (this.elapsedTime >= 1) {
                    this.transform.position = this.p2.$clone();

                    if (!Bridge.staticEquals(this.triggerFinish, null)) {
                        this.triggerFinish();
                    }

                    this.isUpdate = false;
                }
            },
            /*CurveMove.Update end.*/


        }
    });
    /*CurveMove end.*/

    /*DataGameMode start.*/
    Bridge.define("DataGameMode", {
        $kind: 6,
        statics: {
            fields: {
                CLASSIC_8X8: 0,
                CLASSIC_10X10: 1,
                TIME_8X8: 2,
                TIME_10X10: 3,
                BOMB_8X8: 4,
                BOMB_10X10: 5,
                HEXA: 6
            }
        }
    });
    /*DataGameMode end.*/

    /*DataInGame start.*/
    Bridge.define("DataInGame", {
        fields: {
            dataGameModes: null,
            jsonGameMode: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "DataInGame#init", this ); }

                this.dataGameModes = new (System.Collections.Generic.List$1(DataMode)).ctor();
            }
        },
        methods: {
            /*DataInGame.Save start.*/
            Save: function () {
if ( TRACE ) { TRACE( "DataInGame#Save", this ); }

                for (var i = 0; i < this.dataGameModes.Count; i = (i + 1) | 0) {
                    this.dataGameModes.getItem(i).Save();
                }
                this.jsonGameMode = JsonArray.ToJson(DataMode, this.dataGameModes.ToArray());

            },
            /*DataInGame.Save end.*/

            /*DataInGame.SaveDataMode start.*/
            SaveDataMode: function (dataMode) {
if ( TRACE ) { TRACE( "DataInGame#SaveDataMode", this ); }


                dataMode.Save();

                this.jsonGameMode = JsonArray.ToJson(DataMode, this.dataGameModes.ToArray());

            },
            /*DataInGame.SaveDataMode end.*/

            /*DataInGame.Load start.*/
            Load: function () {
if ( TRACE ) { TRACE( "DataInGame#Load", this ); }

                var $t;
                this.dataGameModes.clear();

                if (!System.String.isNullOrEmpty(this.jsonGameMode)) {
                    var datas = JsonArray.FromJson(DataMode, this.jsonGameMode);
                    for (var i = 0; i < datas.length; i = (i + 1) | 0) {
                        this.dataGameModes.add(datas[i]);
                    }
                } else {
                    $t = Bridge.getEnumerator(System.Enum.getValues(DataGameMode));
                    try {
                        while ($t.moveNext()) {
                            var enumValue = $t.Current;
                            var mode = new DataMode();
                            mode.dataGameMode = System.Nullable.getValue(Bridge.cast(Bridge.unbox(enumValue, DataGameMode), System.Int32));
                            mode.bestScore = 0;
                            this.dataGameModes.add(mode);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    this.Save();
                }
            },
            /*DataInGame.Load end.*/

            /*DataInGame.FindDataMode start.*/
            FindDataMode: function (dataGameMode) {
if ( TRACE ) { TRACE( "DataInGame#FindDataMode", this ); }

                return this.dataGameModes.Find(function (x) {
                    return x.dataGameMode === dataGameMode;
                });
            },
            /*DataInGame.FindDataMode end.*/


        }
    });
    /*DataInGame end.*/

    /*DataMode start.*/
    Bridge.define("DataMode", {
        fields: {
            dataGameMode: 0,
            currentScore: 0,
            bestScore: 0,
            dataPlacePieces: null,
            blocksModeIndex: null,
            piecesId: null,
            bombDetails: null,
            stepBomb: 0,
            jsonPlacePieces: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "DataMode#init", this ); }

                this.dataPlacePieces = new (System.Collections.Generic.List$1(DataPlacePiece)).ctor();
                this.blocksModeIndex = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.piecesId = System.Array.init(3, 0, System.Int32);
                this.bombDetails = new (System.Collections.Generic.List$1(BombDetail)).ctor();
                this.stepBomb = 0;
            }
        },
        methods: {
            /*DataMode.AddDataPlacePiece start.*/
            AddDataPlacePiece: function (data) {
if ( TRACE ) { TRACE( "DataMode#AddDataPlacePiece", this ); }

                if (this.dataPlacePieces.Count >= 4) {
                    this.dataPlacePieces.removeAt(0);
                }
                this.dataPlacePieces.add(data);
            },
            /*DataMode.AddDataPlacePiece end.*/

            /*DataMode.ClearData start.*/
            ClearData: function () {
if ( TRACE ) { TRACE( "DataMode#ClearData", this ); }

                this.currentScore = 0;
                this.dataPlacePieces.clear();
                this.blocksModeIndex.clear();
                for (var i = 0; i < this.piecesId.length; i = (i + 1) | 0) {
                    this.piecesId[i] = ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetRandomPieceId();
                }
            },
            /*DataMode.ClearData end.*/

            /*DataMode.Save start.*/
            Save: function () {
if ( TRACE ) { TRACE( "DataMode#Save", this ); }

                for (var i = 0; i < this.dataPlacePieces.Count; i = (i + 1) | 0) {
                    this.dataPlacePieces.getItem(i).Save();
                }
                this.jsonPlacePieces = JsonArray.ToJson(DataPlacePiece, this.dataPlacePieces.ToArray());

            },
            /*DataMode.Save end.*/

            /*DataMode.Load start.*/
            Load: function () {
if ( TRACE ) { TRACE( "DataMode#Load", this ); }

                this.dataPlacePieces.clear();

                if (!System.String.isNullOrEmpty(this.jsonPlacePieces)) {
                    var datas = JsonArray.FromJson(DataPlacePiece, this.jsonPlacePieces);
                    for (var i = 0; i < datas.length; i = (i + 1) | 0) {
                        this.dataPlacePieces.add(datas[i]);
                    }
                }
            },
            /*DataMode.Load end.*/


        }
    });
    /*DataMode end.*/

    /*DataPlacePiece start.*/
    Bridge.define("DataPlacePiece", {
        fields: {
            blocksShowIndex: null,
            blocksHideIndex: null,
            pieces: null,
            DestroyLine: false,
            dataPosition: null,
            dataPieces: null,
            dataPiecesShape: null,
            datablocksHideIndex: null,
            datablocksShowIndex: null,
            dataBombsIndex: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "DataPlacePiece#init", this ); }

                this.blocksShowIndex = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.blocksHideIndex = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                this.pieces = System.Array.init(3, 0, System.Int32);
                this.DestroyLine = false;
            }
        },
        methods: {
            /*DataPlacePiece.Save start.*/
            Save: function () {
if ( TRACE ) { TRACE( "DataPlacePiece#Save", this ); }


                this.dataPieces = JsonArray.ToJson(System.Int32, this.pieces);

                this.datablocksHideIndex = JsonArray.ToJson(System.Int32, this.blocksHideIndex.ToArray());
                this.datablocksShowIndex = JsonArray.ToJson(System.Int32, this.blocksShowIndex.ToArray());
            },
            /*DataPlacePiece.Save end.*/

            /*DataPlacePiece.Load start.*/
            Load: function () {
if ( TRACE ) { TRACE( "DataPlacePiece#Load", this ); }

                if (!System.String.isNullOrEmpty(this.dataPieces)) {
                    this.pieces = JsonArray.FromJson(System.Int32, this.dataPieces);
                }
            },
            /*DataPlacePiece.Load end.*/


        }
    });
    /*DataPlacePiece end.*/

    /*DentedPixel.LeanDummy start.*/
    Bridge.define("DentedPixel.LeanDummy");
    /*DentedPixel.LeanDummy end.*/

    /*DentedPixel.LTExamples.PathBezier start.*/
    Bridge.define("DentedPixel.LTExamples.PathBezier", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            trans: null,
            cr: null,
            avatar1: null,
            iter: 0
        },
        methods: {
            /*DentedPixel.LTExamples.PathBezier.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.PathBezier#OnEnable", this ); }

                // create the path
                this.cr = new LTBezierPath.$ctor1(System.Array.init([this.trans[0].position.$clone(), this.trans[2].position.$clone(), this.trans[1].position.$clone(), this.trans[3].position.$clone(), this.trans[3].position.$clone(), this.trans[5].position.$clone(), this.trans[4].position.$clone(), this.trans[6].position.$clone()], UnityEngine.Vector3));
            },
            /*DentedPixel.LTExamples.PathBezier.OnEnable end.*/

            /*DentedPixel.LTExamples.PathBezier.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.PathBezier#Start", this ); }

                this.avatar1 = UnityEngine.GameObject.Find("Avatar1");

                // Tween automatically
                var descr = LeanTween.move$6(this.avatar1, this.cr.pts, 6.5).setOrientToPath(true).setRepeat(-1);
                UnityEngine.Debug.Log$1("length of path 1:" + System.Single.format(this.cr.length));
                UnityEngine.Debug.Log$1("length of path 2:" + System.Single.format(descr.optional.path.length));
            },
            /*DentedPixel.LTExamples.PathBezier.Start end.*/

            /*DentedPixel.LTExamples.PathBezier.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.PathBezier#Update", this ); }

                // Or Update Manually
                //cr.place2d( sprite1.transform, iter );

                this.iter += UnityEngine.Time.deltaTime * 0.07;
                if (this.iter > 1.0) {
                    this.iter = 0.0;
                }
            },
            /*DentedPixel.LTExamples.PathBezier.Update end.*/

            /*DentedPixel.LTExamples.PathBezier.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.PathBezier#OnDrawGizmos", this ); }

                // Debug.Log("drwaing");
                if (this.cr != null) {
                    this.OnEnable();
                }
                pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = new pc.Color( 1, 0, 0, 1 );
                if (this.cr != null) {
                    this.cr.gizmoDraw();
                } // To Visualize the path, use this method
            },
            /*DentedPixel.LTExamples.PathBezier.OnDrawGizmos end.*/


        }
    });
    /*DentedPixel.LTExamples.PathBezier end.*/

    /*DentedPixel.LTExamples.TestingUnitTests start.*/
    Bridge.define("DentedPixel.LTExamples.TestingUnitTests", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            cube1: null,
            cube2: null,
            cube3: null,
            cube4: null,
            cubeAlpha1: null,
            cubeAlpha2: null,
            eventGameObjectWasCalled: false,
            eventGeneralWasCalled: false,
            lt1Id: 0,
            lt2: null,
            lt3: null,
            lt4: null,
            groupTweens: null,
            groupGOs: null,
            groupTweensCnt: 0,
            rotateRepeat: 0,
            rotateRepeatAngle: 0,
            boxNoCollider: null,
            timeElapsedNormalTimeScale: 0,
            timeElapsedIgnoreTimeScale: 0,
            pauseTweenDidFinish: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#init", this ); }

                this.eventGameObjectWasCalled = false;
                this.eventGeneralWasCalled = false;
                this.pauseTweenDidFinish = false;
            }
        },
        methods: {
            /*DentedPixel.LTExamples.TestingUnitTests.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#Awake", this ); }

                this.boxNoCollider = UnityEngine.GameObject.CreatePrimitive(UnityEngine.PrimitiveType.Cube);
                UnityEngine.Object.Destroy(this.boxNoCollider.GetComponent$1(UnityEngine.BoxCollider));
            },
            /*DentedPixel.LTExamples.TestingUnitTests.Awake end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#Start", this ); }

                //          Time.timeScale = 0.25f;

                LeanTest.timeout = 46.0;
                LeanTest.expected = 63;

                LeanTween.init$1(1300);

                // add a listener
                LeanTween.addListener$1(this.cube1, 0, Bridge.fn.cacheBind(this, this.eventGameObjectCalled));

                LeanTest.expect(LeanTween.isTweening$2() === false, "NOTHING TWEEENING AT BEGINNING");

                LeanTest.expect(LeanTween.isTweening$2(this.cube1) === false, "OBJECT NOT TWEEENING AT BEGINNING");

                LeanTween.scaleX(this.cube4, 2.0, 0.0).setOnComplete(Bridge.fn.bind(this, function () {
                    LeanTest.expect(this.cube4.transform.localScale.x === 2.0, "TWEENED WITH ZERO TIME");
                }));

                // dispatch event that is received
                LeanTween.dispatchEvent(0);
                LeanTest.expect(this.eventGameObjectWasCalled, "EVENT GAMEOBJECT RECEIVED");

                // do not remove listener
                LeanTest.expect(LeanTween.removeListener$2(this.cube2, 0, Bridge.fn.cacheBind(this, this.eventGameObjectCalled)) === false, "EVENT GAMEOBJECT NOT REMOVED");
                // remove listener
                LeanTest.expect(LeanTween.removeListener$2(this.cube1, 0, Bridge.fn.cacheBind(this, this.eventGameObjectCalled)), "EVENT GAMEOBJECT REMOVED");

                // add a listener
                LeanTween.addListener(1, Bridge.fn.cacheBind(this, this.eventGeneralCalled));

                // dispatch event that is received
                LeanTween.dispatchEvent(1);
                LeanTest.expect(this.eventGeneralWasCalled, "EVENT ALL RECEIVED");

                // remove listener
                LeanTest.expect(LeanTween.removeListener$1(1, Bridge.fn.cacheBind(this, this.eventGeneralCalled)), "EVENT ALL REMOVED");

                this.lt1Id = LeanTween.move$5(this.cube1, new pc.Vec3( 3.0, 2.0, 0.5 ), 1.1).id;
                LeanTween.move$5(this.cube2, new pc.Vec3( -3.0, -2.0, -0.5 ), 1.1);

                LeanTween.reset();

                // Queue up a bunch of tweens, cancel some of them but expect the remainder to finish
                var cubes = System.Array.init(99, null, UnityEngine.GameObject);
                var tweenIds = System.Array.init(cubes.length, 0, System.Int32);
                for (var i = 0; i < cubes.length; i = (i + 1) | 0) {
                    var c = this.cubeNamed("cancel" + i);
                    tweenIds[i] = LeanTween.moveX(c, 100.0, 1.0).id;
                    cubes[i] = c;
                }
                var onCompleteCount = 0;
                LeanTween.delayedCall$2(cubes[0], 0.2, function () {
                    for (var i1 = 0; i1 < cubes.length; i1 = (i1 + 1) | 0) {
                        if (i1 % 3 === 0) {
                            LeanTween.cancel$3(cubes[i1]);
                        } else if (i1 % 3 === 1) {
                            LeanTween.cancel$1(tweenIds[i1]);
                        } else if (i1 % 3 === 2) {
                            var descr = LeanTween.descr(tweenIds[i1]);
                            //                      Debug.Log("descr:"+descr);
                            descr.setOnComplete(function () {
                                onCompleteCount = (onCompleteCount + 1) | 0;
                                //                          Debug.Log("onCompleteCount:"+onCompleteCount);
                                if (onCompleteCount >= 33) {
                                    LeanTest.expect(true, "CANCELS DO NOT EFFECT FINISHING");
                                }
                            });
                        }
                    }
                });

                var splineArr = System.Array.init([new pc.Vec3( -1.0, 0.0, 0.0 ), new pc.Vec3( 0.0, 0.0, 0.0 ), new pc.Vec3( 4.0, 0.0, 0.0 ), new pc.Vec3( 20.0, 0.0, 0.0 ), new pc.Vec3( 30.0, 0.0, 0.0 )], UnityEngine.Vector3);
                var cr = new LTSpline.ctor(splineArr);
                cr.place(this.cube4.transform, 0.5);
                LeanTest.expect((pc.Vec3.distance( this.cube4.transform.position, new pc.Vec3( 10.0, 0.0, 0.0 ) ) <= 0.7), "SPLINE POSITIONING AT HALFWAY", "position is:" + this.cube4.transform.position + " but should be:(10f,0f,0f)");
                LeanTween.color(this.cube4, new pc.Color( 0, 1, 0, 1 ), 0.01);

                //          Debug.Log("Point 2:"+cr.ratioAtPoint(splineArr[2]));

                // OnStart Speed Test for ignoreTimeScale vs normal timeScale

                var cubeDest = this.cubeNamed("cubeDest");
                var cubeDestEnd = new pc.Vec3( 100.0, 20.0, 0.0 );
                LeanTween.move$5(cubeDest, cubeDestEnd, 0.7);

                var cubeToTrans = this.cubeNamed("cubeToTrans");
                LeanTween.move$3(cubeToTrans, cubeDest.transform, 1.2).setEase(LeanTweenType.easeOutQuad).setOnComplete(function () {
                    LeanTest.expect(pc.Vec3.equals( cubeToTrans.transform.position, cubeDestEnd ), "MOVE TO TRANSFORM WORKS");
                });

                var cubeDestroy = this.cubeNamed("cubeDestroy");
                LeanTween.moveX(cubeDestroy, 200.0, 0.05).setDelay(0.02).setDestroyOnComplete(true);
                LeanTween.moveX(cubeDestroy, 200.0, 0.1).setDestroyOnComplete(true).setOnComplete(function () {
                    LeanTest.expect(true, "TWO DESTROY ON COMPLETE'S SUCCEED");
                });

                var cubeSpline = this.cubeNamed("cubeSpline");
                LeanTween.moveSpline$1(cubeSpline, System.Array.init([new pc.Vec3( 0.5, 0.0, 0.5 ), new pc.Vec3( 0.75, 0.0, 0.75 ), new pc.Vec3( 1.0, 0.0, 1.0 ), new pc.Vec3( 1.0, 0.0, 1.0 )], UnityEngine.Vector3), 0.1).setOnComplete(function () {
                    LeanTest.expect(pc.Vec3.distance( new pc.Vec3( 1.0, 0.0, 1.0 ), cubeSpline.transform.position ) < 0.01, "SPLINE WITH TWO POINTS SUCCEEDS");
                });

                // This test works when it is positioned last in the test queue (probably worth fixing when you have time)
                var jumpCube = this.cubeNamed("jumpTime");
                jumpCube.transform.position = new pc.Vec3( 100.0, 0.0, 0.0 );
                jumpCube.transform.localScale = jumpCube.transform.localScale.$clone().clone().scale( 100.0 );
                var jumpTimeId = LeanTween.moveX(jumpCube, 200.0, 1.0).id;

                LeanTween.delayedCall$2(this.gameObject, 0.2, function () {
                    var d = LeanTween.descr(jumpTimeId);
                    var beforeX = jumpCube.transform.position.x;
                    d.setTime(0.5);
                    LeanTween.delayedCall(0.0, function () { }).setOnStart(function () {
                        var diffAmt = 1.0; // This variable is dependent on a good frame-rate because it evalutes at the next Update
                        beforeX += UnityEngine.Time.deltaTime * 100.0 * 2.0;
                        LeanTest.expect(Math.abs(jumpCube.transform.position.x - beforeX) < diffAmt, "CHANGING TIME DOESN'T JUMP AHEAD", "Difference:" + System.Single.format(Math.abs(jumpCube.transform.position.x - beforeX)) + " beforeX:" + System.Single.format(beforeX) + " now:" + System.Single.format(jumpCube.transform.position.x) + " dt:" + System.Single.format(UnityEngine.Time.deltaTime));
                    });
                });

                // Tween with time of zero is needs to be set to it's final value
                var zeroCube = this.cubeNamed("zeroCube");
                LeanTween.moveX(zeroCube, 10.0, 0.0).setOnComplete(function () {
                    LeanTest.expect(zeroCube.transform.position.x === 10.0, "ZERO TIME FINSHES CORRECTLY", "final x:" + System.Single.format(zeroCube.transform.position.x));
                });

                // Scale, and OnStart
                var cubeScale = this.cubeNamed("cubeScale");
                LeanTween.scale$1(cubeScale, new pc.Vec3( 5.0, 5.0, 5.0 ), 0.01).setOnStart(function () {
                    LeanTest.expect(true, "ON START WAS CALLED");
                }).setOnComplete(function () {
                    LeanTest.expect(cubeScale.transform.localScale.z === 5.0, "SCALE", "expected scale z:" + System.Single.format(5.0) + " returned:" + System.Single.format(cubeScale.transform.localScale.z));
                });

                // Rotate
                var cubeRotate = this.cubeNamed("cubeRotate");
                LeanTween.rotate$1(cubeRotate, new pc.Vec3( 0.0, 180.0, 0.0 ), 0.02).setOnComplete(function () {
                    LeanTest.expect(cubeRotate.transform.eulerAngles.y === 180.0, "ROTATE", "expected rotate y:" + System.Single.format(180.0) + " returned:" + System.Single.format(cubeRotate.transform.eulerAngles.y));
                });

                // RotateAround
                var cubeRotateA = this.cubeNamed("cubeRotateA");
                LeanTween.rotateAround(cubeRotateA, new pc.Vec3( 0, 0, 1 ), 90.0, 0.3).setOnComplete(function () {
                    LeanTest.expect(cubeRotateA.transform.eulerAngles.z === 90.0, "ROTATE AROUND", "expected rotate z:" + System.Single.format(90.0) + " returned:" + System.Single.format(cubeRotateA.transform.eulerAngles.z));
                });

                // RotateAround 360
                var cubeRotateB = this.cubeNamed("cubeRotateB");
                cubeRotateB.transform.position = new pc.Vec3( 200.0, 10.0, 8.0 );
                LeanTween.rotateAround(cubeRotateB, new pc.Vec3( 0, 0, 1 ), 360.0, 0.3).setPoint(new pc.Vec3( 5.0, 3.0, 2.0 )).setOnComplete(function () {
                    LeanTest.expect(Bridge.referenceEquals(Bridge.toString(cubeRotateB.transform.position), Bridge.toString((new pc.Vec3( 200.0, 10.0, 8.0 )))), "ROTATE AROUND 360", "expected rotate pos:" + (new pc.Vec3( 200.0, 10.0, 8.0 )) + " returned:" + cubeRotateB.transform.position);
                });

                // Alpha, onUpdate with passing value, onComplete value
                LeanTween.alpha$1(this.cubeAlpha1, 0.5, 0.1).setOnUpdate(function (val) {
                    LeanTest.expect(val !== 0.0, "ON UPDATE VAL");
                }).setOnCompleteParam("Hi!").setOnComplete$1(Bridge.fn.bind(this, function (completeObj) {
                    LeanTest.expect(Bridge.referenceEquals(Bridge.cast(completeObj, System.String), "Hi!"), "ONCOMPLETE OBJECT");
                    LeanTest.expect(this.cubeAlpha1.GetComponent(UnityEngine.Renderer).material.color.a === 0.5, "ALPHA");
                }));
                // Color
                var onStartTime = -1.0;
                LeanTween.color(this.cubeAlpha2, new pc.Color( 0, 1, 1, 1 ), 0.3).setOnComplete(Bridge.fn.bind(this, function () {
                    LeanTest.expect(pc.Color.equals( this.cubeAlpha2.GetComponent(UnityEngine.Renderer).material.color, new pc.Color( 0, 1, 1, 1 ) ), "COLOR");
                    LeanTest.expect(onStartTime >= 0.0 && onStartTime < UnityEngine.Time.time, "ON START", "onStartTime:" + System.Single.format(onStartTime) + " time:" + System.Single.format(UnityEngine.Time.time));
                })).setOnStart(function () {
                    onStartTime = UnityEngine.Time.time;
                });
                // moveLocalY (make sure uses y values)
                var beforePos = this.cubeAlpha1.transform.position.$clone();
                LeanTween.moveY(this.cubeAlpha1, 3.0, 0.2).setOnComplete(Bridge.fn.bind(this, function () {
                    LeanTest.expect(this.cubeAlpha1.transform.position.x === beforePos.x && this.cubeAlpha1.transform.position.z === beforePos.z, "MOVE Y");
                }));

                var beforePos2 = this.cubeAlpha2.transform.localPosition.$clone();
                LeanTween.moveLocalZ(this.cubeAlpha2, 12.0, 0.2).setOnComplete(Bridge.fn.bind(this, function () {
                    LeanTest.expect(this.cubeAlpha2.transform.localPosition.x === beforePos2.x && this.cubeAlpha2.transform.localPosition.y === beforePos2.y, "MOVE LOCAL Z", "ax:" + System.Single.format(this.cubeAlpha2.transform.localPosition.x) + " bx:" + System.Single.format(beforePos.x) + " ay:" + System.Single.format(this.cubeAlpha2.transform.localPosition.y) + " by:" + System.Single.format(beforePos2.y));
                }));

                //AudioClip audioClip = LeanAudio.createAudio(new AnimationCurve(new Keyframe(0f, 1f, 0f, -1f), new Keyframe(1f, 0f, -1f, 0f)), new AnimationCurve(new Keyframe(0f, 0.001f, 0f, 0f), new Keyframe(1f, 0.001f, 0f, 0f)), LeanAudio.options());
                //LeanTween.delayedSound(gameObject, audioClip, new Vector3(0f, 0f, 0f), 0.1f).setDelay(0.2f).setOnComplete(() => {
                //    LeanTest.expect(Time.time > 0, "DELAYED SOUND");
                //});

                // Easing Methods
                var totalEasingCheck = 0;
                var totalEasingCheckSuccess = 0;
                for (var j = 0; j < 2; j = (j + 1) | 0) {
                    var isCheckingFrom = j === 1;
                    var totalTweenTypeLength = { v : LeanTweenType.easeShake };
                    for (var i1 = LeanTweenType.notUsed; i1 < totalTweenTypeLength.v; i1 = (i1 + 1) | 0) {
                        var easeType = i1;
                        var cube = this.cubeNamed("cube" + System.Enum.toString(LeanTweenType, easeType));
                        var descr = LeanTween.moveLocalX(cube, 5, 0.1).setOnComplete$1((function ($me, totalTweenTypeLength) {
                            return function (obj) {
                                var cubeIn = Bridge.as(obj, UnityEngine.GameObject);
                                totalEasingCheck = (totalEasingCheck + 1) | 0;
                                if (cubeIn.transform.position.x === 5.0) {
                                    totalEasingCheckSuccess = (totalEasingCheckSuccess + 1) | 0;
                                }
                                if (totalEasingCheck === (Bridge.Int.mul(2, totalTweenTypeLength.v))) {
                                    LeanTest.expect(totalEasingCheck === totalEasingCheckSuccess, "EASING TYPES");
                                }
                            };
                        })(this, totalTweenTypeLength)).setOnCompleteParam(cube);

                        if (isCheckingFrom) {
                            descr.setFrom(-5.0);
                        }
                    }
                }

                // value2
                var value2UpdateCalled = false;
                LeanTween.value$10(this.gameObject, new pc.Vec2( 0, 0 ), new pc.Vec2( 256, 96 ), 0.1).setOnUpdate$2(function (value) {
                    value2UpdateCalled = true;
                });
                LeanTween.delayedCall(0.2, function () {
                    LeanTest.expect(value2UpdateCalled, "VALUE2 UPDATE");
                });

                // Testing specific cancellation
                var cubeCancelA = this.cubeNamed("cubeCancelA");
                LeanTweenExt.LeanMoveX(cubeCancelA, 10.0, 1.0);
                LeanTweenExt.LeanMoveY(cubeCancelA, 10.0, 1.0);
                LeanTween.cancel$4(cubeCancelA, false, TweenAction.MOVE_X);
                var descrs = LeanTween.descriptions(cubeCancelA);
                LeanTest.expect(descrs.length === 1, "SPECIFIC TWEEN DID CANCEL");


                // check descr
                //          LTDescr descr2 = LeanTween.descr( descrId );
                //          LeanTest.expect(descr2 == null,"DESCRIPTION STARTS AS NULL");

                this.StartCoroutine$1(this.timeBasedTesting());
            },
            /*DentedPixel.LTExamples.TestingUnitTests.Start end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.cubeNamed start.*/
            cubeNamed: function (name) {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#cubeNamed", this ); }

                var cube = UnityEngine.Object.Instantiate(UnityEngine.GameObject, this.boxNoCollider);
                cube.name = name;
                return cube;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.cubeNamed end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.timeBasedTesting start.*/
            timeBasedTesting: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#timeBasedTesting", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    cubeNormal,
                    descr,
                    cubeIgnore,
                    pauseCount,
                    roundCirc,
                    cubeRound,
                    onStartPos,
                    roundCircPath,
                    ratioPoint,
                    roundSpline,
                    cubeSpline,
                    onStartPosSpline,
                    cubeSeq,
                    seq,
                    cubeBounds,
                    didPassBounds,
                    failPoint,
                    descriptionMatchCount,
                    cube,
                    hasGroupTweensCheckStarted,
                    setOnStartNum,
                    setPosNum,
                    setPosOnUpdate,
                    finalPos,
                    finalDict,
                    expectedSearch,
                    previousXlt4,
                    countBeforeCancel,
                    tweenCount,
                    tweenTime,
                    expectedTime,
                    start,
                    onUpdateWasCalled,
                    didGetCorrectOnUpdate,
                    ltCount,
                    allGos,
                    $t,
                    go,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    cubeNormal = this.cubeNamed("normalTimeScale");
                                        // float timeElapsedNormal = Time.time;
                                        LeanTween.moveX(cubeNormal, 12.0, 1.5).setIgnoreTimeScale(false).setOnComplete(Bridge.fn.bind(this, function () {
                                            this.timeElapsedNormalTimeScale = UnityEngine.Time.time;
                                        }));

                                        descr = LeanTween.descriptions(cubeNormal);
                                        LeanTest.expect(descr.length >= 0 && descr[0].to.x === 12.0, "WE CAN RETRIEVE A DESCRIPTION");

                                        cubeIgnore = this.cubeNamed("ignoreTimeScale");
                                        LeanTween.moveX(cubeIgnore, 5.0, 1.5).setIgnoreTimeScale(true).setOnComplete(Bridge.fn.bind(this, function () {
                                            this.timeElapsedIgnoreTimeScale = UnityEngine.Time.time;
                                        }));

                                        $enumerator.current = new UnityEngine.WaitForSeconds(1.5);
                                        $step = 2;
                                        return true;
                                }
                                case 2: {
                                    LeanTest.expect(Math.abs(this.timeElapsedNormalTimeScale - this.timeElapsedIgnoreTimeScale) < 0.7, "START IGNORE TIMING", "timeElapsedIgnoreTimeScale:" + System.Single.format(this.timeElapsedIgnoreTimeScale) + " timeElapsedNormalTimeScale:" + System.Single.format(this.timeElapsedNormalTimeScale));

                                        //          yield return new WaitForSeconds(100f);
                                        UnityEngine.Time.timeScale = 4.0;

                                        pauseCount = 0;
                                        LeanTween.value$8(this.gameObject, 0.0, 1.0, 1.0).setOnUpdate(function (val) {
                                            pauseCount = (pauseCount + 1) | 0;
                                        }).pause();

                                        // Bezier should end at exact end position not just 99% close to it
                                        roundCirc = System.Array.init([new pc.Vec3( 0.0, 0.0, 0.0 ), new pc.Vec3( -9.1, 25.1, 0.0 ), new pc.Vec3( -1.2, 15.9, 0.0 ), new pc.Vec3( -25.0, 25.0, 0.0 ), new pc.Vec3( -25.0, 25.0, 0.0 ), new pc.Vec3( -50.1, 15.9, 0.0 ), new pc.Vec3( -40.9, 25.1, 0.0 ), new pc.Vec3( -50.0, 0.0, 0.0 ), new pc.Vec3( -50.0, 0.0, 0.0 ), new pc.Vec3( -40.9, -25.1, 0.0 ), new pc.Vec3( -50.1, -15.9, 0.0 ), new pc.Vec3( -25.0, -25.0, 0.0 ), new pc.Vec3( -25.0, -25.0, 0.0 ), new pc.Vec3( 0.0, -15.9, 0.0 ), new pc.Vec3( -9.1, -25.1, 0.0 ), new pc.Vec3( 0.0, 0.0, 0.0 )], UnityEngine.Vector3);
                                        cubeRound = this.cubeNamed("bRound");
                                        onStartPos = cubeRound.transform.position.$clone();
                                        LeanTween.moveLocal$3(cubeRound, roundCirc, 0.5).setOnComplete(function () {
                                            LeanTest.expect(pc.Vec3.equals( cubeRound.transform.position, onStartPos ), "BEZIER CLOSED LOOP SHOULD END AT START", "onStartPos:" + onStartPos + " onEnd:" + cubeRound.transform.position);
                                        });

                                        // should be able to retrieve a point
                                        roundCircPath = new LTBezierPath.$ctor1(roundCirc);
                                        ratioPoint = roundCircPath.ratioAtPoint(new pc.Vec3( -25.0, 25.0, 0.0 ));
                                        LeanTest.expect(Bridge.equals(Bridge.box(ratioPoint, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(0.25, System.Single, System.Single.format, System.Single.getHashCode)), "BEZIER RATIO POINT");

                                        // Spline should end at exact end position not just 99% close to it
                                        roundSpline = System.Array.init([new pc.Vec3( 0.0, 0.0, 0.0 ), new pc.Vec3( 0.0, 0.0, 0.0 ), new pc.Vec3( 2.0, 0.0, 0.0 ), new pc.Vec3( 0.9, 2.0, 0.0 ), new pc.Vec3( 0.0, 0.0, 0.0 ), new pc.Vec3( 0.0, 0.0, 0.0 )], UnityEngine.Vector3);
                                        cubeSpline = this.cubeNamed("bSpline");
                                        onStartPosSpline = cubeSpline.transform.position.$clone();
                                        LeanTween.moveSplineLocal(cubeSpline, roundSpline, 0.5).setOnComplete(function () {
                                            LeanTest.expect(pc.Vec3.distance( onStartPosSpline, cubeSpline.transform.position ) <= 0.01, "SPLINE CLOSED LOOP SHOULD END AT START", "onStartPos:" + onStartPosSpline + " onEnd:" + cubeSpline.transform.position + " dist:" + System.Single.format(pc.Vec3.distance( onStartPosSpline, cubeSpline.transform.position )));
                                        });

                                        // Sequence test, do three tweens and make sure they end at the right points
                                        cubeSeq = this.cubeNamed("cSeq");
                                        seq = LeanTween.sequence().append(LeanTween.moveX(cubeSeq, 100.0, 0.2));
                                        seq.append$3(0.1).append(LeanTween.scaleX(cubeSeq, 2.0, 0.1));
                                        seq.append$1(function () {
                                            LeanTest.expect(cubeSeq.transform.position.x === 100.0, "SEQ MOVE X FINISHED", "move x:" + System.Single.format(cubeSeq.transform.position.x));
                                            LeanTest.expect(cubeSeq.transform.localScale.x === 2.0, "SEQ SCALE X FINISHED", "scale x:" + System.Single.format(cubeSeq.transform.localScale.x));
                                        }).setScale(0.2);

                                        // Bounds check
                                        cubeBounds = this.cubeNamed("cBounds");
                                        didPassBounds = true;
                                        failPoint = pc.Vec3.ZERO.clone();
                                        LeanTween.move$5(cubeBounds, new pc.Vec3( 10, 10, 10 ), 0.1).setOnUpdate(function (val) {
                                            //Debug.LogWarning("cubeBounds x:"+cubeBounds.transform.position.x + " y:"+ cubeBounds.transform.position.y+" z:"+cubeBounds.transform.position.z);
                                            if (cubeBounds.transform.position.x < 0.0 || cubeBounds.transform.position.x > 10.0 || cubeBounds.transform.position.y < 0.0 || cubeBounds.transform.position.y > 10.0 || cubeBounds.transform.position.z < 0.0 || cubeBounds.transform.position.z > 10.0) {
                                                didPassBounds = false;
                                                failPoint = cubeBounds.transform.position.$clone();
                                                //                  Debug.LogError("OUT OF BOUNDS");
                                            }
                                        }).setLoopPingPong().setRepeat(8).setOnComplete(function () {
                                            LeanTest.expect(didPassBounds, "OUT OF BOUNDS", "pos x:" + System.Single.format(failPoint.x) + " y:" + System.Single.format(failPoint.y) + " z:" + System.Single.format(failPoint.z));
                                        });

                                        // Local scale check
                                        //GameObject cubeLocal = cubeNamed("cLocal");
                                        //LeanTween.scale(cubeLocal, new Vector3(0.5f, 0.5f, 0.5f), 0.2f).setOnComplete(() =>
                                        //{
                                        //    LeanTest.expect((cubeLocal.transform.localScale.x == 0.5f && cubeLocal.transform.localScale.y == 0.5f && cubeLocal.transform.localScale.z == 0.5f), "SCALE WORKS", "scale x:" + cubeLocal.transform.localScale.x + " y:" + cubeLocal.transform.localScale.y + " z:" + cubeLocal.transform.localScale.z);
                                        //});

                                        // Groups of tweens testing
                                        this.groupTweens = System.Array.init(1200, null, LTDescr);
                                        this.groupGOs = System.Array.init(this.groupTweens.length, null, UnityEngine.GameObject);
                                        this.groupTweensCnt = 0;
                                        descriptionMatchCount = 0;
                                        for (var i = 0; i < this.groupTweens.length; i = (i + 1) | 0) {
                                            cube = this.cubeNamed("c" + i);
                                            cube.transform.position = new pc.Vec3( 0, 0, Bridge.Int.mul(i, 3) );

                                            this.groupGOs[i] = cube;
                                        }

                                        $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    hasGroupTweensCheckStarted = false;
                                        setOnStartNum = 0;
                                        setPosNum = 0;
                                        setPosOnUpdate = true;
                                        for (var i1 = 0; i1 < this.groupTweens.length; i1 = (i1 + 1) | 0) {
                                            finalPos = { v : this.transform.position.$clone().add( new pc.Vec3( 1, 1, 1 ).clone().scale( 3.0 ) ) };
                                            finalDict = (function ($me, finalPos) {
                                                    return Bridge.fn.bind($me, function (_o1) {
                                                        _o1.add("final", finalPos.v.$clone());
                                                        _o1.add("go", this.groupGOs[i1]);
                                                        return _o1;
                                                    });
                                                })(this, finalPos)(new (System.Collections.Generic.Dictionary$2(System.String,System.Object)).ctor());
                                            this.groupTweens[i1] = LeanTween.move$5(this.groupGOs[i1], finalPos.v, 3.0).setOnStart(function () {
                                                setOnStartNum = (setOnStartNum + 1) | 0;
                                            }).setOnUpdate$3(Bridge.fn.bind(this, function (newPosition) {
                                                if (this.transform.position.z > newPosition.z) {
                                                    setPosOnUpdate = false;
                                                }
                                                //                  Debug.LogWarning("New Position: " + newPosition.ToString());
                                            })).setOnCompleteParam(finalDict).setOnComplete$1(Bridge.fn.bind(this, function (param) {
                                                var finalDictRetr = Bridge.as(param, System.Collections.Generic.Dictionary$2(System.String,System.Object));
                                                var neededPos = System.Nullable.getValue(Bridge.cast(Bridge.unbox(finalDictRetr.getItem("final"), UnityEngine.Vector3), UnityEngine.Vector3));
                                                var tweenedGo = Bridge.as(finalDictRetr.getItem("go"), UnityEngine.GameObject);
                                                if (Bridge.referenceEquals(Bridge.toString(neededPos), Bridge.toString(tweenedGo.transform.position))) {
                                                    setPosNum = (setPosNum + 1) | 0;
                                                } else {
                                                    //                      Debug.Log("neededPos:"+neededPos+" tweenedGo.transform.position:"+tweenedGo.transform.position);
                                                }
                                                if (hasGroupTweensCheckStarted === false) {
                                                    hasGroupTweensCheckStarted = true;
                                                    LeanTween.delayedCall$2(this.gameObject, 0.1, Bridge.fn.bind(this, function () {
                                                        LeanTest.expect(setOnStartNum === this.groupTweens.length, "SETONSTART CALLS", "expected:" + this.groupTweens.length + " was:" + setOnStartNum);
                                                        LeanTest.expect(this.groupTweensCnt === this.groupTweens.length, "GROUP FINISH", "expected " + this.groupTweens.length + " tweens but got " + this.groupTweensCnt);
                                                        LeanTest.expect(setPosNum === this.groupTweens.length, "GROUP POSITION FINISH", "expected " + this.groupTweens.length + " tweens but got " + setPosNum);
                                                        LeanTest.expect(setPosOnUpdate, "GROUP POSITION ON UPDATE");
                                                    }));
                                                }
                                                this.groupTweensCnt = (this.groupTweensCnt + 1) | 0;
                                            }));

                                            if (UnityEngine.Component.op_Equality(LeanTween.description(this.groupTweens[i1].id).trans, this.groupTweens[i1].trans)) {
                                                descriptionMatchCount = (descriptionMatchCount + 1) | 0;
                                            }
                                        }
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    if ( LeanTween.tweensRunning < this.groupTweens.length ) {
                                            $step = 5;
                                            continue;
                                        } 
                                        $step = 7;
                                        continue;
                                }
                                case 5: {
                                    $enumerator.current = null;
                                        $step = 6;
                                        return true;
                                }
                                case 6: {
                                    
                                        $step = 4;
                                        continue;
                                }
                                case 7: {
                                    LeanTest.expect(descriptionMatchCount === this.groupTweens.length, "GROUP IDS MATCH");
                                        expectedSearch = (this.groupTweens.length + 7) | 0;
                                        LeanTest.expect(LeanTween.maxSearch <= expectedSearch, "MAX SEARCH OPTIMIZED", "maxSearch:" + LeanTween.maxSearch + " should be:" + expectedSearch);
                                        LeanTest.expect(LeanTween.isTweening$2() === true, "SOMETHING IS TWEENING");

                                        // resume item before calling pause should continue item along it's way
                                        previousXlt4 = this.cube4.transform.position.x;
                                        this.lt4 = LeanTween.moveX(this.cube4, 5.0, 1.1).setOnComplete(Bridge.fn.bind(this, function () {
                                            LeanTest.expect(UnityEngine.GameObject.op_Inequality(this.cube4, null) && previousXlt4 !== this.cube4.transform.position.x, "RESUME OUT OF ORDER", System.String.concat("cube4:", this.cube4) + " previousXlt4:" + System.Single.format(previousXlt4) + " cube4.transform.position.x:" + System.Single.format((UnityEngine.GameObject.op_Inequality(this.cube4, null) ? this.cube4.transform.position.x : 0)));
                                        })).setDestroyOnComplete(true);
                                        this.lt4.resume();

                                        this.rotateRepeat = (this.rotateRepeatAngle = 0);
                                        LeanTween.rotateAround(this.cube3, new pc.Vec3( 0, 0, 1 ), 360.0, 0.1).setRepeat(3).setOnComplete(Bridge.fn.cacheBind(this, this.rotateRepeatFinished)).setOnCompleteOnRepeat(true).setDestroyOnComplete(true);
                                        $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 8;
                                        return true;
                                }
                                case 8: {
                                    LeanTween.delayedCall(1.8, Bridge.fn.cacheBind(this, this.rotateRepeatAllFinished));

                                        countBeforeCancel = LeanTween.tweensRunning;
                                        LeanTween.cancel$1(this.lt1Id);
                                        LeanTest.expect(countBeforeCancel === LeanTween.tweensRunning, "CANCEL AFTER RESET SHOULD FAIL", "expected " + countBeforeCancel + " but got " + LeanTween.tweensRunning);
                                        LeanTween.cancel$3(this.cube2);

                                        tweenCount = 0;
                                        for (var i2 = 0; i2 < this.groupTweens.length; i2 = (i2 + 1) | 0) {
                                            if (LeanTween.isTweening$2(this.groupGOs[i2])) {
                                                tweenCount = (tweenCount + 1) | 0;
                                            }
                                            if (i2 % 3 === 0) {
                                                LeanTween.pause$1(this.groupGOs[i2]);
                                            } else {
                                                if (i2 % 3 === 1) {
                                                    this.groupTweens[i2].pause();
                                                } else {
                                                    LeanTween.pause(this.groupTweens[i2].id);
                                                }
                                            }
                                        }
                                        LeanTest.expect(tweenCount === this.groupTweens.length, "GROUP ISTWEENING", "expected " + this.groupTweens.length + " tweens but got " + tweenCount);

                                        $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 9;
                                        return true;
                                }
                                case 9: {
                                    tweenCount = 0;
                                        for (var i3 = 0; i3 < this.groupTweens.length; i3 = (i3 + 1) | 0) {
                                            if (i3 % 3 === 0) {
                                                LeanTween.resume$1(this.groupGOs[i3]);
                                            } else {
                                                if (i3 % 3 === 1) {
                                                    this.groupTweens[i3].resume();
                                                } else {
                                                    LeanTween.resume(this.groupTweens[i3].id);
                                                }
                                            }

                                            if (i3 % 2 === 0 ? LeanTween.isTweening$1(this.groupTweens[i3].id) : LeanTween.isTweening$2(this.groupGOs[i3])) {
                                                tweenCount = (tweenCount + 1) | 0;
                                            }
                                        }
                                        LeanTest.expect(tweenCount === this.groupTweens.length, "GROUP RESUME");

                                        LeanTest.expect(LeanTween.isTweening$2(this.cube1) === false, "CANCEL TWEEN LTDESCR");
                                        LeanTest.expect(LeanTween.isTweening$2(this.cube2) === false, "CANCEL TWEEN LEANTWEEN");

                                        LeanTest.expect(pauseCount === 0, "ON UPDATE NOT CALLED DURING PAUSE", "expect pause count of 0, but got " + pauseCount);


                                        $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 10;
                                        return true;
                                }
                                case 10: {
                                    UnityEngine.Time.timeScale = 0.25;
                                        tweenTime = 0.2;
                                        expectedTime = tweenTime * (1.0 / UnityEngine.Time.timeScale);
                                        start = UnityEngine.Time.realtimeSinceStartup;
                                        onUpdateWasCalled = false;
                                        LeanTween.moveX(this.cube1, -5.0, tweenTime).setOnUpdate(function (val) {
                                            onUpdateWasCalled = true;
                                        }).setOnComplete(Bridge.fn.bind(this, function () {
                                            var end = UnityEngine.Time.realtimeSinceStartup;
                                            var diff = end - start;

                                            LeanTest.expect(Math.abs(expectedTime - diff) < 0.06, "SCALED TIMING DIFFERENCE", "expected to complete in roughly " + System.Single.format(expectedTime) + " but completed in " + System.Single.format(diff));
                                            LeanTest.expect(UnityEngine.Mathf.Approximately(this.cube1.transform.position.x, -5.0), "SCALED ENDING POSITION", "expected to end at -5f, but it ended at " + System.Single.format(this.cube1.transform.position.x));
                                            LeanTest.expect(onUpdateWasCalled, "ON UPDATE FIRED");
                                        }));

                                        didGetCorrectOnUpdate = false;
                                        LeanTween.value$11(this.gameObject, new pc.Vec3( 1.0, 1.0, 1.0 ), new pc.Vec3( 10.0, 10.0, 10.0 ), 1.0).setOnUpdate$3(function (val) {
                                            didGetCorrectOnUpdate = val.x >= 1.0 && val.y >= 1.0 && val.z >= 1.0;
                                        }).setOnComplete(function () {
                                            LeanTest.expect(didGetCorrectOnUpdate, "VECTOR3 CALLBACK CALLED");
                                        });

                                        $enumerator.current = new UnityEngine.WaitForSeconds(expectedTime);
                                        $step = 11;
                                        return true;
                                }
                                case 11: {
                                    UnityEngine.Time.timeScale = 1.0;

                                        ltCount = 0;
                                        allGos = Bridge.as(UnityEngine.Object.FindObjectsOfType$1(UnityEngine.GameObject), System.Array.type(UnityEngine.GameObject));
                                        $t = Bridge.getEnumerator(allGos);
                                        try {
                                            while ($t.moveNext()) {
                                                go = $t.Current;
                                                if (Bridge.referenceEquals(go.name, "~LeanTween")) {
                                                    ltCount = (ltCount + 1) | 0;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        LeanTest.expect(ltCount === 1, "RESET CORRECTLY CLEANS UP");

                                        this.StartCoroutine$1(this.lotsOfCancels());

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.timeBasedTesting end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.lotsOfCancels start.*/
            lotsOfCancels: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#lotsOfCancels", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    cubeCount,
                    tweensA,
                    aGOs,
                    cube,
                    tweensB,
                    bGOs,
                    cube1,
                    cube2,
                    cube3,
                    cube4,
                    inFinalPlace,
                    cubePaused,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    UnityEngine.Time.timeScale = 4.0;
                                        cubeCount = 10;

                                        tweensA = System.Array.init(cubeCount, 0, System.Int32);
                                        aGOs = System.Array.init(cubeCount, null, UnityEngine.GameObject);
                                        for (var i = 0; i < aGOs.length; i = (i + 1) | 0) {
                                            cube = UnityEngine.Object.Instantiate(UnityEngine.GameObject, this.boxNoCollider);
                                            cube.transform.position = new pc.Vec3( 0, 0, i * 2.0 );
                                            cube.name = "a" + i;
                                            aGOs[i] = cube;
                                            tweensA[i] = LeanTween.move$5(cube, cube.transform.position.$clone().add( new pc.Vec3( 10.0, 0, 0 ) ), 0.5 + 1.0 * (1.0 / aGOs.length)).id;
                                            LeanTween.color(cube, new pc.Color( 1, 0, 0, 1 ), 0.01);
                                        }

                                        $enumerator.current = new UnityEngine.WaitForSeconds(1.0);
                                        $step = 2;
                                        return true;
                                }
                                case 2: {
                                    tweensB = System.Array.init(cubeCount, 0, System.Int32);
                                        bGOs = System.Array.init(cubeCount, null, UnityEngine.GameObject);
                                        for (var i1 = 0; i1 < bGOs.length; i1 = (i1 + 1) | 0) {
                                            cube1 = UnityEngine.Object.Instantiate(UnityEngine.GameObject, this.boxNoCollider);
                                            cube1.transform.position = new pc.Vec3( 0, 0, i1 * 2.0 );
                                            cube1.name = "b" + i1;
                                            bGOs[i1] = cube1;
                                            tweensB[i1] = LeanTween.move$5(cube1, cube1.transform.position.$clone().add( new pc.Vec3( 10.0, 0, 0 ) ), 2.0).id;
                                        }

                                        for (var i2 = 0; i2 < aGOs.length; i2 = (i2 + 1) | 0) {
                                            LeanTween.cancel$3(aGOs[i2]);
                                            cube2 = aGOs[i2];
                                            tweensA[i2] = LeanTween.move$5(cube2, new pc.Vec3( 0, 0, i2 * 2.0 ), 2.0).id;
                                        }

                                        $enumerator.current = new UnityEngine.WaitForSeconds(0.5);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    for (var i3 = 0; i3 < aGOs.length; i3 = (i3 + 1) | 0) {
                                            LeanTween.cancel$3(aGOs[i3]);
                                            cube3 = aGOs[i3];
                                            tweensA[i3] = LeanTween.move$5(cube3, new pc.Vec3( 0, 0, i3 * 2.0 ).add( new pc.Vec3( 10.0, 0, 0 ) ), 2.0).id;
                                        }

                                        for (var i4 = 0; i4 < bGOs.length; i4 = (i4 + 1) | 0) {
                                            LeanTween.cancel$3(bGOs[i4]);
                                            cube4 = bGOs[i4];
                                            tweensB[i4] = LeanTween.move$5(cube4, new pc.Vec3( 0, 0, i4 * 2.0 ), 2.0).id;
                                        }

                                        $enumerator.current = new UnityEngine.WaitForSeconds(2.1);
                                        $step = 4;
                                        return true;
                                }
                                case 4: {
                                    inFinalPlace = true;
                                        for (var i5 = 0; i5 < aGOs.length; i5 = (i5 + 1) | 0) {
                                            if (pc.Vec3.distance( aGOs[i5].transform.position, new pc.Vec3( 0, 0, i5 * 2.0 ).add( new pc.Vec3( 10.0, 0, 0 ) ) ) > 0.1) {
                                                inFinalPlace = false;
                                            }
                                        }

                                        for (var i6 = 0; i6 < bGOs.length; i6 = (i6 + 1) | 0) {
                                            if (pc.Vec3.distance( bGOs[i6].transform.position, new pc.Vec3( 0, 0, i6 * 2.0 ) ) > 0.1) {
                                                inFinalPlace = false;
                                            }
                                        }

                                        LeanTest.expect(inFinalPlace, "AFTER LOTS OF CANCELS");

                                        cubePaused = this.cubeNamed("cPaused");
                                        LeanTweenExt.LeanMoveX(cubePaused, 10.0, 1.0).setOnComplete(Bridge.fn.bind(this, function () {
                                            this.pauseTweenDidFinish = true;
                                        }));
                                        this.StartCoroutine$1(this.pauseTimeNow());

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.lotsOfCancels end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.pauseTimeNow start.*/
            pauseTimeNow: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#pauseTimeNow", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(0.5);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    UnityEngine.Time.timeScale = 0;

                                        LeanTween.delayedCall(0.5, function () {
                                            UnityEngine.Time.timeScale = 1.0;
                                        }).setUseEstimatedTime(true);

                                        LeanTween.delayedCall(1.5, Bridge.fn.bind(this, function () {
                                            LeanTest.expect(this.pauseTweenDidFinish, "PAUSE BY TIMESCALE FINISHES");
                                        })).setUseEstimatedTime(true);

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.pauseTimeNow end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.rotateRepeatFinished start.*/
            rotateRepeatFinished: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#rotateRepeatFinished", this ); }

                if (Math.abs(this.cube3.transform.eulerAngles.z) < 0.0001) {
                    this.rotateRepeatAngle = (this.rotateRepeatAngle + 1) | 0;
                }
                this.rotateRepeat = (this.rotateRepeat + 1) | 0;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.rotateRepeatFinished end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.rotateRepeatAllFinished start.*/
            rotateRepeatAllFinished: function () {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#rotateRepeatAllFinished", this ); }

                LeanTest.expect(this.rotateRepeatAngle === 3, "ROTATE AROUND MULTIPLE", "expected 3 times received " + this.rotateRepeatAngle + " times");
                LeanTest.expect(this.rotateRepeat === 3, "ROTATE REPEAT", "expected 3 times received " + this.rotateRepeat + " times");
                LeanTest.expect(UnityEngine.GameObject.op_Equality(this.cube3, null), "DESTROY ON COMPLETE", System.String.concat("cube3:", this.cube3));
            },
            /*DentedPixel.LTExamples.TestingUnitTests.rotateRepeatAllFinished end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.eventGameObjectCalled start.*/
            eventGameObjectCalled: function (e) {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#eventGameObjectCalled", this ); }

                this.eventGameObjectWasCalled = true;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.eventGameObjectCalled end.*/

            /*DentedPixel.LTExamples.TestingUnitTests.eventGeneralCalled start.*/
            eventGeneralCalled: function (e) {
if ( TRACE ) { TRACE( "DentedPixel.LTExamples.TestingUnitTests#eventGeneralCalled", this ); }

                this.eventGeneralWasCalled = true;
            },
            /*DentedPixel.LTExamples.TestingUnitTests.eventGeneralCalled end.*/


        }
    });
    /*DentedPixel.LTExamples.TestingUnitTests end.*/

    /*DestroyByTime start.*/
    Bridge.define("DestroyByTime", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            hideObject: false,
            destroyTime: 0,
            elapsedTime: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "DestroyByTime#init", this ); }

                this.hideObject = false;
                this.destroyTime = 3;
                this.elapsedTime = 0;
            }
        },
        methods: {
            /*DestroyByTime.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "DestroyByTime#Start", this ); }

                if (!this.hideObject) {
                    this.Destroy(this.gameObject, this.destroyTime);
                }
            },
            /*DestroyByTime.Start end.*/

            /*DestroyByTime.SetTime start.*/
            SetTime: function (destroyTime) {
if ( TRACE ) { TRACE( "DestroyByTime#SetTime", this ); }

                this.destroyTime = destroyTime;
            },
            /*DestroyByTime.SetTime end.*/

            /*DestroyByTime.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "DestroyByTime#FixedUpdate", this ); }

                if (this.hideObject) {
                    this.elapsedTime += UnityEngine.Time.deltaTime;
                    if (this.elapsedTime >= this.destroyTime) {
                        this.gameObject.SetActive(false);
                        this.elapsedTime = 0;
                    }
                }
            },
            /*DestroyByTime.FixedUpdate end.*/


        }
    });
    /*DestroyByTime end.*/

    /*DG.Tweening.DOTweenCYInstruction start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction");
    /*DG.Tweening.DOTweenCYInstruction end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForCompletion", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForCompletion#keepWaiting#get", this ); }

                    return this.t.active && !DG.Tweening.TweenExtensions.IsComplete(this.t);
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForCompletion#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null,
            elapsedLoops: 0
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#keepWaiting#get", this ); }

                    return this.t.active && DG.Tweening.TweenExtensions.CompletedLoops(this.t) < this.elapsedLoops;
                }
            }
        },
        ctors: {
            ctor: function (tween, elapsedLoops) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
                this.elapsedLoops = elapsedLoops;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForKill start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForKill", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForKill#keepWaiting#get", this ); }

                    return this.t.active;
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForKill#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForKill end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForPosition", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null,
            position: 0
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForPosition#keepWaiting#get", this ); }

                    return this.t.active && this.t.position * (((DG.Tweening.TweenExtensions.CompletedLoops(this.t) + 1) | 0)) < this.position;
                }
            }
        },
        ctors: {
            ctor: function (tween, position) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForPosition#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
                this.position = position;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForRewind", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForRewind#keepWaiting#get", this ); }

                    return this.t.active && (!this.t.playedOnce || this.t.position * (((DG.Tweening.TweenExtensions.CompletedLoops(this.t) + 1) | 0)) > 0);
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForRewind#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForStart start.*/
    Bridge.define("DG.Tweening.DOTweenCYInstruction.WaitForStart", {
        inherits: [UnityEngine.CustomYieldInstruction],
        $kind: 1002,
        fields: {
            t: null
        },
        props: {
            keepWaiting: {
                get: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForStart#keepWaiting#get", this ); }

                    return this.t.active && !this.t.playedOnce;
                }
            }
        },
        ctors: {
            ctor: function (tween) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenCYInstruction.WaitForStart#ctor", this ); }

                this.$initialize();
                UnityEngine.CustomYieldInstruction.ctor.call(this);
                this.t = tween;
            }
        }
    });
    /*DG.Tweening.DOTweenCYInstruction+WaitForStart end.*/

    /*DG.Tweening.DOTweenModuleAudio start.*/
    Bridge.define("DG.Tweening.DOTweenModuleAudio", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleAudio.DOFade:static start.*/
                /**
                 * Tweens an AudioSource's volume to the given value.
                 Also stores the AudioSource as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.AudioSource}           target      
                 * @param   {number}                            endValue    The end value to reach (0 to 1)
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOFade", this ); }

                    if (endValue < 0) {
                        endValue = 0;
                    } else {
                        if (endValue > 1) {
                            endValue = 1;
                        }
                    }
                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.volume;
                    }, function (x) {
                        target.volume = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleAudio.DOFade:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPitch:static start.*/
                /**
                 * Tweens an AudioSource's pitch to the given value.
                 Also stores the AudioSource as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.AudioSource}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPitch: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPitch", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.pitch;
                    }, function (x) {
                        target.pitch = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPitch:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOSetFloat:static start.*/
                /**
                 * Tweens an AudioMixer's exposed float to the given value.
                 Also stores the AudioMixer as the tween's target so it can be used for filtered operations.
                 Note that you need to manually expose a float in an AudioMixerGroup in order to be able to tween it from an AudioMixer.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}      target       
                 * @param   {string}                            floatName    Name given to the exposed float to set
                 * @param   {number}                            endValue     The end value to reach
                 * @param   {number}                            duration     The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOSetFloat: function (target, floatName, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOSetFloat", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        var currVal = { };
                        target.GetFloat(floatName, currVal);
                        return currVal.v;
                    }, function (x) {
                        target.SetFloat(floatName, x);
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleAudio.DOSetFloat:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOComplete:static start.*/
                /**
                 * Completes all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens completed
                 (meaning the tweens that don't have infinite loops and were not already complete)
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target           
                 * @param   {boolean}                         withCallbacks    For Sequences only: if TRUE also internal Sequence callbacks will be fired,
                 otherwise they will be ignored
                 * @return  {number}
                 */
                DOComplete: function (target, withCallbacks) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOComplete", this ); }

                    if (withCallbacks === void 0) { withCallbacks = false; }
                    return DG.Tweening.DOTween.Complete(target, withCallbacks);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOComplete:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOKill:static start.*/
                /**
                 * Kills all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens killed.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target      
                 * @param   {boolean}                         complete    If TRUE completes the tween before killing it
                 * @return  {number}
                 */
                DOKill: function (target, complete) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOKill", this ); }

                    if (complete === void 0) { complete = false; }
                    return DG.Tweening.DOTween.Kill(target, complete);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOKill:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOFlip:static start.*/
                /**
                 * Flips the direction (backwards if it was going forward or viceversa) of all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens flipped.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOFlip: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOFlip", this ); }

                    return DG.Tweening.DOTween.Flip(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOFlip:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOGoto:static start.*/
                /**
                 * Sends to the given position all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens involved.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target     
                 * @param   {number}                          to         Time position to reach
                 (if higher than the whole tween duration the tween will simply reach its end)
                 * @param   {boolean}                         andPlay    If TRUE will play the tween after reaching the given position, otherwise it will pause it
                 * @return  {number}
                 */
                DOGoto: function (target, to, andPlay) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOGoto", this ); }

                    if (andPlay === void 0) { andPlay = false; }
                    return DG.Tweening.DOTween.Goto(target, to, andPlay);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOGoto:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPause:static start.*/
                /**
                 * Pauses all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens paused.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPause: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPause", this ); }

                    return DG.Tweening.DOTween.Pause(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPause:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPlay:static start.*/
                /**
                 * Plays all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens played.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPlay: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPlay", this ); }

                    return DG.Tweening.DOTween.Play(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPlay:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPlayBackwards:static start.*/
                /**
                 * Plays backwards all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens played.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPlayBackwards: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPlayBackwards", this ); }

                    return DG.Tweening.DOTween.PlayBackwards(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPlayBackwards:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOPlayForward:static start.*/
                /**
                 * Plays forward all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens played.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOPlayForward: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOPlayForward", this ); }

                    return DG.Tweening.DOTween.PlayForward(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOPlayForward:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DORestart:static start.*/
                /**
                 * Restarts all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens restarted.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DORestart: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DORestart", this ); }

                    return DG.Tweening.DOTween.Restart(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DORestart:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DORewind:static start.*/
                /**
                 * Rewinds all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens rewinded.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DORewind: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DORewind", this ); }

                    return DG.Tweening.DOTween.Rewind(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DORewind:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOSmoothRewind:static start.*/
                /**
                 * Smoothly rewinds all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens rewinded.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOSmoothRewind: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOSmoothRewind", this ); }

                    return DG.Tweening.DOTween.SmoothRewind(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOSmoothRewind:static end.*/

                /*DG.Tweening.DOTweenModuleAudio.DOTogglePause:static start.*/
                /**
                 * Toggles the paused state (plays if it was paused, pauses if it was playing) of all tweens that have this target as a reference
                 (meaning tweens that were started from this target, or that had this target added as an Id)
                 and returns the total number of tweens involved.
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleAudio
                 * @memberof DG.Tweening.DOTweenModuleAudio
                 * @param   {UnityEngine.Audio.AudioMixer}    target
                 * @return  {number}
                 */
                DOTogglePause: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleAudio#DOTogglePause", this ); }

                    return DG.Tweening.DOTween.TogglePause(target);
                },
                /*DG.Tweening.DOTweenModuleAudio.DOTogglePause:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleAudio end.*/

    /*DG.Tweening.DOTweenModulePhysics start.*/
    Bridge.define("DG.Tweening.DOTweenModulePhysics", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModulePhysics.DOMove:static start.*/
                /**
                 * Tweens a Rigidbody's position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {UnityEngine.Vector3}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMove: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMove", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$13(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMove:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOMoveX:static start.*/
                /**
                 * Tweens a Rigidbody's X position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMoveX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( endValue, 0, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMoveX:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOMoveY:static start.*/
                /**
                 * Tweens a Rigidbody's Y position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMoveY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMoveY:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOMoveZ:static start.*/
                /**
                 * Tweens a Rigidbody's Z position to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveZ: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOMoveZ", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Z, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOMoveZ:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DORotate:static start.*/
                /**
                 * Tweens a Rigidbody's rotation to the given value.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target      
                 * @param   {UnityEngine.Vector3}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {DG.Tweening.RotateMode}            mode        Rotation mode
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DORotate: function (target, endValue, duration, mode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DORotate", this ); }

                    if (mode === void 0) { mode = 0; }
                    var t = DG.Tweening.DOTween.To$9(function () {
                        return target.rotation;
                    }, Bridge.fn.cacheBind(target, target.MoveRotation), endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions), t, target);
                    t.plugOptions.rotateMode = mode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DORotate:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOLookAt:static start.*/
                /**
                 * Tweens a Rigidbody's rotation so that it will look towards the given position.
                 Also stores the rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target            
                 * @param   {UnityEngine.Vector3}               towards           The position to look at
                 * @param   {number}                            duration          The duration of the tween
                 * @param   {DG.Tweening.AxisConstraint}        axisConstraint    Eventual axis constraint for the rotation
                 * @param   {?UnityEngine.Vector3}              up                The vector that defines in which direction up is (default: Vector3.up)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOLookAt: function (target, towards, duration, axisConstraint, up) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOLookAt", this ); }

                    if (axisConstraint === void 0) { axisConstraint = 0; }
                    if (up === void 0) { up = null; }
                    var t = DG.Tweening.Core.Extensions.SetSpecialStartupMode(DG.Tweening.Core.TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions), DG.Tweening.DOTween.To$9(function () {
                        return target.rotation;
                    }, Bridge.fn.cacheBind(target, target.MoveRotation), towards.$clone(), duration), target), DG.Tweening.Core.Enums.SpecialStartupMode.SetLookAt);
                    t.plugOptions.axisConstraint = axisConstraint;
                    t.plugOptions.up = (pc.Vec3.equals( up, null )) ? pc.Vec3.UP.clone() : System.Nullable.getValue(up);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOLookAt:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOJump:static start.*/
                /**
                 * Tweens a Rigidbody's position to the given value, while also applying a jump effect along the Y axis.
                 Returns a Sequence instead of a Tweener.
                 Also stores the Rigidbody as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}    target       
                 * @param   {UnityEngine.Vector3}      endValue     The end value to reach
                 * @param   {number}                   jumpPower    Power of the jump (the max height of the jump is represented by this plus the final Y offset)
                 * @param   {number}                   numJumps     Total number of jumps
                 * @param   {number}                   duration     The duration of the tween
                 * @param   {boolean}                  snapping     If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Sequence}
                 */
                DOJump: function (target, endValue, jumpPower, numJumps, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOJump", this ); }

                    if (snapping === void 0) { snapping = false; }
                    if (numJumps < 1) {
                        numJumps = 1;
                    }
                    var startPosY = 0;
                    var offsetY = -1;
                    var offsetYSet = false;
                    var s = DG.Tweening.DOTween.Sequence();
                    var yTween = DG.Tweening.TweenSettingsExtensions.OnStart(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetRelative(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, jumpPower, 0 ), duration / (Bridge.Int.mul(numJumps, 2))), DG.Tweening.AxisConstraint.Y, snapping), DG.Tweening.Ease.OutQuad)), Bridge.Int.mul(numJumps, 2), DG.Tweening.LoopType.Yoyo), function () {
                        startPosY = target.position.y;
                    });
                    DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( endValue.x, 0, 0 ), duration), DG.Tweening.AxisConstraint.X, snapping), DG.Tweening.Ease.Linear)), DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(DG.Tweening.DOTween.To$12(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec3( 0, 0, endValue.z ), duration), DG.Tweening.AxisConstraint.Z, snapping), DG.Tweening.Ease.Linear)), yTween), target), DG.Tweening.DOTween.defaultEaseType);
                    DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Tween, yTween, function () {
                        if (!offsetYSet) {
                            offsetYSet = true;
                            offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;
                        }
                        var pos = target.position.$clone();
                        pos.y += DG.Tweening.DOVirtual.EasedValue(0, offsetY, DG.Tweening.TweenExtensions.ElapsedPercentage(yTween), DG.Tweening.Ease.OutQuad);
                        target.MovePosition(pos);
                    });
                    return s;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOJump:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOPath:static start.*/
                /**
                 * Tweens a Rigidbody's position through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody as the tween's target so it can be used for filtered operations.
                 <p>NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target        
                 * @param   {Array.<UnityEngine.Vector3>}       path          The waypoints to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOPath$1:static start.*/
                DOPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), path, duration), target);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOPath$1:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath:static start.*/
                /**
                 * Tweens a Rigidbody's localPosition through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody as the tween's target so it can be used for filtered operations
                 <p>NOTE: to tween a rigidbody correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOLocalPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics
                 * @memberof DG.Tweening.DOTweenModulePhysics
                 * @param   {UnityEngine.Rigidbody}             target        
                 * @param   {Array.<UnityEngine.Vector3>}       path          The waypoint to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOLocalPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOLocalPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath$1:static start.*/
                DOLocalPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics#DOLocalPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, path, duration), target);

                    t.plugOptions.isRigidbody = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics.DOLocalPath$1:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModulePhysics end.*/

    /*DG.Tweening.DOTweenModulePhysics2D start.*/
    Bridge.define("DG.Tweening.DOTweenModulePhysics2D", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModulePhysics2D.DOMove:static start.*/
                /**
                 * Tweens a Rigidbody2D's position to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMove: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOMove", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOMove:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveX:static start.*/
                /**
                 * Tweens a Rigidbody2D's X position to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOMoveX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec2( endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveX:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveY:static start.*/
                /**
                 * Tweens a Rigidbody2D's Y position to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMoveY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOMoveY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, Bridge.fn.cacheBind(target, target.MovePosition), new pc.Vec2( 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOMoveY:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DORotate:static start.*/
                /**
                 * Tweens a Rigidbody2D's rotation to the given value.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DORotate: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DORotate", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.rotation;
                    }, Bridge.fn.cacheBind(target, target.MoveRotation), endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DORotate:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOJump:static start.*/
                /**
                 * Tweens a Rigidbody2D's position to the given value, while also applying a jump effect along the Y axis.
                 Returns a Sequence instead of a Tweener.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations.
                 <p>IMPORTANT: a rigidbody2D can't be animated in a jump arc using MovePosition, so the tween will directly set the position</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}    target       
                 * @param   {UnityEngine.Vector2}        endValue     The end value to reach
                 * @param   {number}                     jumpPower    Power of the jump (the max height of the jump is represented by this plus the final Y offset)
                 * @param   {number}                     numJumps     Total number of jumps
                 * @param   {number}                     duration     The duration of the tween
                 * @param   {boolean}                    snapping     If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Sequence}
                 */
                DOJump: function (target, endValue, jumpPower, numJumps, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOJump", this ); }

                    if (snapping === void 0) { snapping = false; }
                    if (numJumps < 1) {
                        numJumps = 1;
                    }
                    var startPosY = 0;
                    var offsetY = -1;
                    var offsetYSet = false;
                    var s = DG.Tweening.DOTween.Sequence();
                    var yTween = DG.Tweening.TweenSettingsExtensions.OnStart(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetRelative(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, function (x) {
                        target.position = x.$clone();
                    }, new pc.Vec2( 0, jumpPower ), duration / (Bridge.Int.mul(numJumps, 2))), DG.Tweening.AxisConstraint.Y, snapping), DG.Tweening.Ease.OutQuad)), Bridge.Int.mul(numJumps, 2), DG.Tweening.LoopType.Yoyo), function () {
                        startPosY = target.position.y;
                    });
                    DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.position;
                    }, function (x) {
                        target.position = x.$clone();
                    }, new pc.Vec2( endValue.x, 0 ), duration), DG.Tweening.AxisConstraint.X, snapping), DG.Tweening.Ease.Linear)), yTween), target), DG.Tweening.DOTween.defaultEaseType);
                    DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Tween, yTween, function () {
                        if (!offsetYSet) {
                            offsetYSet = true;
                            offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;
                        }
                        var pos = UnityEngine.Vector3.FromVector2(target.position.$clone());
                        pos.y += DG.Tweening.DOVirtual.EasedValue(0, offsetY, DG.Tweening.TweenExtensions.ElapsedPercentage(yTween), DG.Tweening.Ease.OutQuad);
                        target.MovePosition$1(pos);
                    });
                    return s;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOJump:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOPath:static start.*/
                /**
                 * Tweens a Rigidbody2D's position through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations.
                 <p>NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target        
                 * @param   {Array.<UnityEngine.Vector2>}       path          The waypoints to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path (useless in case of Linear paths): higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var len = path.length;
                    var path3D = System.Array.init(len, function (){
                        return new UnityEngine.Vector3();
                    }, UnityEngine.Vector3);
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        path3D[i] = UnityEngine.Vector3.FromVector2(path[i].$clone());
                    }
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return UnityEngine.Vector3.FromVector2(target.position);
                    }, function (x) {
                        target.MovePosition$1(x);
                    }, new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path3D, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOPath$1:static start.*/
                DOPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return UnityEngine.Vector3.FromVector2(target.position);
                    }, function (x) {
                        target.MovePosition$1(x);
                    }, path, duration), target);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOPath$1:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath:static start.*/
                /**
                 * Tweens a Rigidbody2D's localPosition through the given path waypoints, using the chosen path algorithm.
                 Also stores the Rigidbody2D as the tween's target so it can be used for filtered operations
                 <p>NOTE: to tween a Rigidbody2D correctly it should be set to kinematic at least while being tweened.</p><p>BEWARE: doesn't work on Windows Phone store (waiting for Unity to fix their own bug).
                 If you plan to publish there you should use a regular transform.DOLocalPath.</p>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModulePhysics2D
                 * @memberof DG.Tweening.DOTweenModulePhysics2D
                 * @param   {UnityEngine.Rigidbody2D}           target        
                 * @param   {Array.<UnityEngine.Vector2>}       path          The waypoint to go through
                 * @param   {number}                            duration      The duration of the tween
                 * @param   {DG.Tweening.PathType}              pathType      The type of path: Linear (straight path), CatmullRom (curved CatmullRom path) or CubicBezier (curved with control points)
                 * @param   {DG.Tweening.PathMode}              pathMode      The path mode: 3D, side-scroller 2D, top-down 2D
                 * @param   {number}                            resolution    The resolution of the path: higher resolutions make for more detailed curved paths but are more expensive.
                 Defaults to 10, but a value of 5 is usually enough if you don't have dramatic long curves between waypoints
                 * @param   {?UnityEngine.Color}                gizmoColor    The color of the path (shown when gizmos are active in the Play panel and the tween is running)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOLocalPath: function (target, path, duration, pathType, pathMode, resolution, gizmoColor) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOLocalPath", this ); }

                    if (pathType === void 0) { pathType = 0; }
                    if (pathMode === void 0) { pathMode = 1; }
                    if (resolution === void 0) { resolution = 10; }
                    if (gizmoColor === void 0) { gizmoColor = null; }
                    if (resolution < 1) {
                        resolution = 1;
                    }
                    var len = path.length;
                    var path3D = System.Array.init(len, function (){
                        return new UnityEngine.Vector3();
                    }, UnityEngine.Vector3);
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        path3D[i] = UnityEngine.Vector3.FromVector2(path[i].$clone());
                    }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetUpdate$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition$1(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, new DG.Tweening.Plugins.Core.PathCore.Path.$ctor1(pathType, path3D, resolution, System.Nullable.lift1("$clone", gizmoColor)), duration), target), DG.Tweening.UpdateType.Fixed);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath:static end.*/

                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath$1:static start.*/
                DOLocalPath$1: function (target, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModulePhysics2D#DOLocalPath$1", this ); }

                    if (pathMode === void 0) { pathMode = 1; }
                    var trans = target.transform;
                    var t = DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions), DG.Tweening.DOTween.To(UnityEngine.Vector3, DG.Tweening.Plugins.Core.PathCore.Path, DG.Tweening.Plugins.Options.PathOptions, DG.Tweening.Plugins.PathPlugin.Get(), function () {
                        return trans.localPosition;
                    }, function (x) {
                        target.MovePosition$1(UnityEngine.Component.op_Equality(trans.parent, null) ? x.$clone() : trans.parent.TransformPoint$1(x));
                    }, path, duration), target);

                    t.plugOptions.isRigidbody2D = true;
                    t.plugOptions.mode = pathMode;
                    t.plugOptions.useLocalPosition = true;
                    return t;
                },
                /*DG.Tweening.DOTweenModulePhysics2D.DOLocalPath$1:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModulePhysics2D end.*/

    /*DG.Tweening.DOTweenModuleSprite start.*/
    Bridge.define("DG.Tweening.DOTweenModuleSprite", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleSprite.DOColor:static start.*/
                /**
                 * Tweens a SpriteRenderer's color to the given value.
                 Also stores the spriteRenderer as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}        target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOColor", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleSprite.DOColor:static end.*/

                /*DG.Tweening.DOTweenModuleSprite.DOFade:static start.*/
                /**
                 * Tweens a Material's alpha color to the given value.
                 Also stores the spriteRenderer as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}        target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOFade", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleSprite.DOFade:static end.*/

                /*DG.Tweening.DOTweenModuleSprite.DOGradientColor:static start.*/
                /**
                 * Tweens a SpriteRenderer's color using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}    target      
                 * @param   {pc.ColorGradient}              gradient    The gradient to use
                 * @param   {number}                        duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor: function (target, gradient, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOGradientColor", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.color = c.color.$clone();
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.DOTweenModuleSprite.DOColor(target, c.color.$clone(), colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleSprite.DOGradientColor:static end.*/

                /*DG.Tweening.DOTweenModuleSprite.DOBlendableColor:static start.*/
                /**
                 * Tweens a SpriteRenderer's color to the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the SpriteRenderer as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleSprite
                 * @memberof DG.Tweening.DOTweenModuleSprite
                 * @param   {UnityEngine.SpriteRenderer}    target      
                 * @param   {UnityEngine.Color}             endValue    The value to tween to
                 * @param   {number}                        duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleSprite#DOBlendableColor", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleSprite.DOBlendableColor:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleSprite end.*/

    /*DG.Tweening.DOTweenModuleUI start.*/
    Bridge.define("DG.Tweening.DOTweenModuleUI", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUI.DOFade:static start.*/
                /**
                 * Tweens a CanvasGroup's alpha color to the given value.
                 Also stores the canvasGroup as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.CanvasGroup}           target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade", this ); }

                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.alpha;
                    }, function (x) {
                        target.alpha = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$1:static start.*/
                /**
                 * Tweens an Graphic's alpha color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Graphic}            target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$1", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$2:static start.*/
                /**
                 * Tweens an Image's alpha color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}              target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$2", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$2:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$3:static start.*/
                /**
                 * Tweens a Outline's effectColor alpha to the given value.
                 Also stores the Outline as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Outline}            target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$3: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$3", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.effectColor;
                    }, function (x) {
                        target.effectColor = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$3:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFade$4:static start.*/
                /**
                 * Tweens a Text's alpha color to the given value.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}               target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFade$4: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFade$4", this ); }

                    var t = DG.Tweening.DOTween.ToAlpha(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFade$4:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor:static start.*/
                /**
                 * Tweens an Graphic's color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Graphic}            target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor$1:static start.*/
                /**
                 * Tweens an Image's color to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}              target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor$1", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor$2:static start.*/
                /**
                 * Tweens a Outline's effectColor to the given value.
                 Also stores the Outline as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Outline}            target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor$2", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.effectColor;
                    }, function (x) {
                        target.effectColor = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor$2:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOColor$3:static start.*/
                /**
                 * Tweens a Text's color to the given value.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}               target      
                 * @param   {UnityEngine.Color}                 endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOColor$3: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOColor$3", this ); }

                    var t = DG.Tweening.DOTween.To$8(function () {
                        return target.color;
                    }, function (x) {
                        target.color = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOColor$3:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFillAmount:static start.*/
                /**
                 * Tweens an Image's fillAmount to the given value.
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}              target      
                 * @param   {number}                            endValue    The end value to reach (0 to 1)
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFillAmount: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFillAmount", this ); }

                    if (endValue > 1) {
                        endValue = 1;
                    } else {
                        if (endValue < 0) {
                            endValue = 0;
                        }
                    }
                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.fillAmount;
                    }, function (x) {
                        target.fillAmount = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFillAmount:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOGradientColor:static start.*/
                /**
                 * Tweens an Image's colors using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}    target      
                 * @param   {pc.ColorGradient}        gradient    The gradient to use
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor: function (target, gradient, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOGradientColor", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.color = c.color.$clone();
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.DOTweenModuleUI.DOColor$1(target, c.color.$clone(), colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUI.DOGradientColor:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOFlexibleSize:static start.*/
                /**
                 * Tweens an LayoutElement's flexibleWidth/Height to the given value.
                 Also stores the LayoutElement as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.LayoutElement}      target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOFlexibleSize: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOFlexibleSize", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.flexibleWidth, target.flexibleHeight );
                    }, function (x) {
                        target.flexibleWidth = x.x;
                        target.flexibleHeight = x.y;
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOFlexibleSize:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOMinSize:static start.*/
                /**
                 * Tweens an LayoutElement's minWidth/Height to the given value.
                 Also stores the LayoutElement as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.LayoutElement}      target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOMinSize: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOMinSize", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.minWidth, target.minHeight );
                    }, function (x) {
                        target.minWidth = x.x;
                        target.minHeight = x.y;
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOMinSize:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPreferredSize:static start.*/
                /**
                 * Tweens an LayoutElement's preferredWidth/Height to the given value.
                 Also stores the LayoutElement as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.LayoutElement}      target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPreferredSize: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPreferredSize", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.preferredWidth, target.preferredHeight );
                    }, function (x) {
                        target.preferredWidth = x.x;
                        target.preferredHeight = x.y;
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPreferredSize:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOScale:static start.*/
                /**
                 * Tweens a Outline's effectDistance to the given value.
                 Also stores the Outline as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Outline}            target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOScale: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOScale", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.effectDistance;
                    }, function (x) {
                        target.effectDistance = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOScale:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosX:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition X to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPosX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPosX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosX:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosY:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition Y to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPosY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPosY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPosY:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3D:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector3}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3D: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3D", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$13(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3D:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DX:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D X to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3DX: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3DX", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, new pc.Vec3( endValue, 0, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.X, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DX:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DY:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D Y to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3DY: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3DY", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, new pc.Vec3( 0, endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Y, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DY:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DZ:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition3D Z to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorPos3DZ: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorPos3DZ", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$12(function () {
                        return target.anchoredPosition3D;
                    }, function (x) {
                        target.anchoredPosition3D = x.$clone();
                    }, new pc.Vec3( 0, 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$12(t, DG.Tweening.AxisConstraint.Z, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorPos3DZ:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorMax:static start.*/
                /**
                 * Tweens a RectTransform's anchorMax to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorMax: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorMax", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchorMax;
                    }, function (x) {
                        target.anchorMax = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorMax:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOAnchorMin:static start.*/
                /**
                 * Tweens a RectTransform's anchorMin to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOAnchorMin: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOAnchorMin", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.anchorMin;
                    }, function (x) {
                        target.anchorMin = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOAnchorMin:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPivot:static start.*/
                /**
                 * Tweens a RectTransform's pivot to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPivot: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPivot", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.pivot;
                    }, function (x) {
                        target.pivot = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPivot:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPivotX:static start.*/
                /**
                 * Tweens a RectTransform's pivot X to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPivotX: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPivotX", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.pivot;
                    }, function (x) {
                        target.pivot = x.$clone();
                    }, new pc.Vec2( endValue, 0 ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.X), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPivotX:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPivotY:static start.*/
                /**
                 * Tweens a RectTransform's pivot Y to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOPivotY: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPivotY", this ); }

                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.pivot;
                    }, function (x) {
                        target.pivot = x.$clone();
                    }, new pc.Vec2( 0, endValue ), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(t, DG.Tweening.AxisConstraint.Y), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOPivotY:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOSizeDelta:static start.*/
                /**
                 * Tweens a RectTransform's sizeDelta to the given value.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target      
                 * @param   {UnityEngine.Vector2}               endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOSizeDelta: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOSizeDelta", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.sizeDelta;
                    }, function (x) {
                        target.sizeDelta = x.$clone();
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOSizeDelta:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOPunchAnchorPos:static start.*/
                /**
                 * Punches a RectTransform's anchoredPosition towards the given direction and then back to the starting one
                 as if it was connected to the starting position via an elastic.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}    target        
                 * @param   {UnityEngine.Vector2}          punch         The direction and strength of the punch (added to the RectTransform's current position)
                 * @param   {number}                       duration      The duration of the tween
                 * @param   {number}                       vibrato       Indicates how much will the punch vibrate
                 * @param   {number}                       elasticity    Represents how much (0 to 1) the vector will go beyond the starting position when bouncing backwards.
                 1 creates a full oscillation between the punch direction and the opposite direction,
                 while 0 oscillates only between the punch and the start position
                 * @param   {boolean}                      snapping      If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DOPunchAnchorPos: function (target, punch, duration, vibrato, elasticity, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOPunchAnchorPos", this ); }

                    if (vibrato === void 0) { vibrato = 10; }
                    if (elasticity === void 0) { elasticity = 1.0; }
                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetOptions$11(DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.DOTween.Punch(function () {
                        return UnityEngine.Vector3.FromVector2(target.anchoredPosition);
                    }, function (x) {
                        target.anchoredPosition = UnityEngine.Vector2.FromVector3(x.$clone());
                    }, UnityEngine.Vector3.FromVector2(punch.$clone()), duration, vibrato, elasticity), target), snapping);
                },
                /*DG.Tweening.DOTweenModuleUI.DOPunchAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos:static start.*/
                /**
                 * Shakes a RectTransform's anchoredPosition with the given values.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}          target            
                 * @param   {number}                             duration          The duration of the tween
                 * @param   {number}                             strength          The shake strength
                 * @param   {number}                             vibrato           Indicates how much will the shake vibrate
                 * @param   {number}                             randomness        Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). 
                 Setting it to 0 will shake along a single direction.
                 * @param   {boolean}                            snapping          If TRUE the tween will smoothly snap all values to integers
                 * @param   {boolean}                            fadeOut           If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not
                 * @param   {DG.Tweening.ShakeRandomnessMode}    randomnessMode    Randomness mode
                 * @return  {DG.Tweening.Tweener}
                 */
                DOShakeAnchorPos: function (target, duration, strength, vibrato, randomness, snapping, fadeOut, randomnessMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos", this ); }

                    if (strength === void 0) { strength = 100.0; }
                    if (vibrato === void 0) { vibrato = 10; }
                    if (randomness === void 0) { randomness = 90.0; }
                    if (snapping === void 0) { snapping = false; }
                    if (fadeOut === void 0) { fadeOut = true; }
                    if (randomnessMode === void 0) { randomnessMode = 0; }
                    return DG.Tweening.TweenSettingsExtensions.SetOptions$11(DG.Tweening.Core.Extensions.SetSpecialStartupMode(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.DOTween.Shake(function () {
                        return UnityEngine.Vector3.FromVector2(target.anchoredPosition);
                    }, function (x) {
                        target.anchoredPosition = UnityEngine.Vector2.FromVector3(x.$clone());
                    }, duration, strength, vibrato, randomness, true, fadeOut, randomnessMode), target), DG.Tweening.Core.Enums.SpecialStartupMode.SetShake), snapping);
                },
                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos$1:static start.*/
                /**
                 * Shakes a RectTransform's anchoredPosition with the given values.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}          target            
                 * @param   {number}                             duration          The duration of the tween
                 * @param   {UnityEngine.Vector2}                strength          The shake strength on each axis
                 * @param   {number}                             vibrato           Indicates how much will the shake vibrate
                 * @param   {number}                             randomness        Indicates how much the shake will be random (0 to 180 - values higher than 90 kind of suck, so beware). 
                 Setting it to 0 will shake along a single direction.
                 * @param   {boolean}                            snapping          If TRUE the tween will smoothly snap all values to integers
                 * @param   {boolean}                            fadeOut           If TRUE the shake will automatically fadeOut smoothly within the tween's duration, otherwise it will not
                 * @param   {DG.Tweening.ShakeRandomnessMode}    randomnessMode    Randomness mode
                 * @return  {DG.Tweening.Tweener}
                 */
                DOShakeAnchorPos$1: function (target, duration, strength, vibrato, randomness, snapping, fadeOut, randomnessMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOShakeAnchorPos$1", this ); }

                    if (vibrato === void 0) { vibrato = 10; }
                    if (randomness === void 0) { randomness = 90.0; }
                    if (snapping === void 0) { snapping = false; }
                    if (fadeOut === void 0) { fadeOut = true; }
                    if (randomnessMode === void 0) { randomnessMode = 0; }
                    return DG.Tweening.TweenSettingsExtensions.SetOptions$11(DG.Tweening.Core.Extensions.SetSpecialStartupMode(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,System.Array.type(UnityEngine.Vector3),DG.Tweening.Plugins.Options.Vector3ArrayOptions), DG.Tweening.DOTween.Shake$1(function () {
                        return UnityEngine.Vector3.FromVector2(target.anchoredPosition);
                    }, function (x) {
                        target.anchoredPosition = UnityEngine.Vector2.FromVector3(x.$clone());
                    }, duration, UnityEngine.Vector3.FromVector2(strength.$clone()), vibrato, randomness, fadeOut, randomnessMode), target), DG.Tweening.Core.Enums.SpecialStartupMode.SetShake), snapping);
                },
                /*DG.Tweening.DOTweenModuleUI.DOShakeAnchorPos$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOJumpAnchorPos:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition to the given value, while also applying a jump effect along the Y axis.
                 Returns a Sequence instead of a Tweener.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}    target       
                 * @param   {UnityEngine.Vector2}          endValue     The end value to reach
                 * @param   {number}                       jumpPower    Power of the jump (the max height of the jump is represented by this plus the final Y offset)
                 * @param   {number}                       numJumps     Total number of jumps
                 * @param   {number}                       duration     The duration of the tween
                 * @param   {boolean}                      snapping     If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Sequence}
                 */
                DOJumpAnchorPos: function (target, endValue, jumpPower, numJumps, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOJumpAnchorPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    if (numJumps < 1) {
                        numJumps = 1;
                    }
                    var startPosY = 0;
                    var offsetY = -1;
                    var offsetYSet = false;

                    // Separate Y Tween so we can elaborate elapsedPercentage on that insted of on the Sequence
                    // (in case users add a delay or other elements to the Sequence)
                    var s = DG.Tweening.DOTween.Sequence();
                    var yTween = DG.Tweening.TweenSettingsExtensions.OnStart(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetRelative(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( 0, jumpPower ), duration / (Bridge.Int.mul(numJumps, 2))), DG.Tweening.AxisConstraint.Y, snapping), DG.Tweening.Ease.OutQuad)), Bridge.Int.mul(numJumps, 2), DG.Tweening.LoopType.Yoyo), function () {
                        startPosY = target.anchoredPosition.y;
                    });
                    DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$8(DG.Tweening.DOTween.To$11(function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, new pc.Vec2( endValue.x, 0 ), duration), DG.Tweening.AxisConstraint.X, snapping), DG.Tweening.Ease.Linear)), yTween), target), DG.Tweening.DOTween.defaultEaseType);
                    DG.Tweening.TweenSettingsExtensions.OnUpdate(DG.Tweening.Sequence, s, function () {
                        if (!offsetYSet) {
                            offsetYSet = true;
                            offsetY = s.isRelative ? endValue.y : endValue.y - startPosY;
                        }
                        var pos = target.anchoredPosition.$clone();
                        pos.y += DG.Tweening.DOVirtual.EasedValue(0, offsetY, DG.Tweening.TweenExtensions.ElapsedDirectionalPercentage(s), DG.Tweening.Ease.OutQuad);
                        target.anchoredPosition = pos.$clone();
                    });
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUI.DOJumpAnchorPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DONormalizedPos:static start.*/
                /**
                 * Tweens a ScrollRect's horizontal/verticalNormalizedPosition to the given value.
                 Also stores the ScrollRect as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.ScrollRect}    target      
                 * @param   {UnityEngine.Vector2}          endValue    The end value to reach
                 * @param   {number}                       duration    The duration of the tween
                 * @param   {boolean}                      snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DONormalizedPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DONormalizedPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$9(DG.Tweening.DOTween.To$11(function () {
                        return new pc.Vec2( target.horizontalNormalizedPosition, target.verticalNormalizedPosition );
                    }, function (x) {
                        target.horizontalNormalizedPosition = x.x;
                        target.verticalNormalizedPosition = x.y;
                    }, endValue.$clone(), duration), snapping), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DONormalizedPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOHorizontalNormalizedPos:static start.*/
                /**
                 * Tweens a ScrollRect's horizontalNormalizedPosition to the given value.
                 Also stores the ScrollRect as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.ScrollRect}    target      
                 * @param   {number}                       endValue    The end value to reach
                 * @param   {number}                       duration    The duration of the tween
                 * @param   {boolean}                      snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DOHorizontalNormalizedPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOHorizontalNormalizedPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$2(DG.Tweening.DOTween.To$4(function () {
                        return target.horizontalNormalizedPosition;
                    }, function (x) {
                        target.horizontalNormalizedPosition = x;
                    }, endValue, duration), snapping), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOHorizontalNormalizedPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOVerticalNormalizedPos:static start.*/
                /**
                 * Tweens a ScrollRect's verticalNormalizedPosition to the given value.
                 Also stores the ScrollRect as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.ScrollRect}    target      
                 * @param   {number}                       endValue    The end value to reach
                 * @param   {number}                       duration    The duration of the tween
                 * @param   {boolean}                      snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Tweener}
                 */
                DOVerticalNormalizedPos: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOVerticalNormalizedPos", this ); }

                    if (snapping === void 0) { snapping = false; }
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$2(DG.Tweening.DOTween.To$4(function () {
                        return target.verticalNormalizedPosition;
                    }, function (x) {
                        target.verticalNormalizedPosition = x;
                    }, endValue, duration), snapping), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOVerticalNormalizedPos:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOValue:static start.*/
                /**
                 * Tweens a Slider's value to the given value.
                 Also stores the Slider as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Slider}             target      
                 * @param   {number}                            endValue    The end value to reach
                 * @param   {number}                            duration    The duration of the tween
                 * @param   {boolean}                           snapping    If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOValue: function (target, endValue, duration, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOValue", this ); }

                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To$4(function () {
                        return target.value;
                    }, function (x) {
                        target.value = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$2(t, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOValue:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOCounter:static start.*/
                /**
                 * Tweens a Text's text from one integer to another, with options for thousands separators
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}                 target                   
                 * @param   {number}                              fromValue                The value to start from
                 * @param   {number}                              endValue                 The end value to reach
                 * @param   {number}                              duration                 The duration of the tween
                 * @param   {boolean}                             addThousandsSeparator    If TRUE (default) also adds thousands separators
                 * @param   {System.Globalization.CultureInfo}    culture                  The {@link } to use (InvariantCulture if NULL)
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOCounter: function (target, fromValue, endValue, duration, addThousandsSeparator, culture) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOCounter", this ); }

                    if (addThousandsSeparator === void 0) { addThousandsSeparator = true; }
                    if (culture === void 0) { culture = null; }
                    var v = fromValue;
                    var cInfo = !addThousandsSeparator ? null : culture || System.Globalization.CultureInfo.invariantCulture;
                    var t = DG.Tweening.DOTween.To$2(function () {
                        return v;
                    }, function (x) {
                        v = x;
                        target.text = addThousandsSeparator ? System.Int32.format(v, "N0", cInfo) : Bridge.toString(v);
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(System.Int32,System.Int32,DG.Tweening.Plugins.Options.NoOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOCounter:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOText:static start.*/
                /**
                 * Tweens a Text's text to the given value.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}               target             
                 * @param   {string}                            endValue           The end string to tween to
                 * @param   {number}                            duration           The duration of the tween
                 * @param   {boolean}                           richTextEnabled    If TRUE (default), rich text will be interpreted correctly while animated,
                 otherwise all tags will be considered as normal text
                 * @param   {DG.Tweening.ScrambleMode}          scrambleMode       The type of scramble mode to use, if any
                 * @param   {string}                            scrambleChars      A string containing the characters to use for scrambling.
                 Use as many characters as possible (minimum 10) because DOTween uses a fast scramble mode which gives better results with more characters.
                 Leave it to NULL (default) to use default ones
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOText: function (target, endValue, duration, richTextEnabled, scrambleMode, scrambleChars) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOText", this ); }

                    if (richTextEnabled === void 0) { richTextEnabled = true; }
                    if (scrambleMode === void 0) { scrambleMode = 0; }
                    if (scrambleChars === void 0) { scrambleChars = null; }
                    if (endValue == null) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogWarning("You can't pass a NULL string to DOText: an empty string will be used instead to avoid errors");
                        }
                        endValue = "";
                    }
                    var t = DG.Tweening.DOTween.To$5(function () {
                        return target.text;
                    }, function (x) {
                        target.text = x;
                    }, endValue, duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$3(t, richTextEnabled, scrambleMode, scrambleChars), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOText:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor:static start.*/
                /**
                 * Tweens a Graphic's color to the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the Graphic as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Graphic}    target      
                 * @param   {UnityEngine.Color}         endValue    The value to tween to
                 * @param   {number}                    duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOBlendableColor", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$1:static start.*/
                /**
                 * Tweens a Image's color to the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the Image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Image}    target      
                 * @param   {UnityEngine.Color}       endValue    The value to tween to
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor$1: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOBlendableColor$1", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$1:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$2:static start.*/
                /**
                 * Tweens a Text's color BY the given value,
                 in a way that allows other DOBlendableColor tweens to work together on the same target,
                 instead than fight each other as multiple DOColor would do.
                 Also stores the Text as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.UI.Text}    target      
                 * @param   {UnityEngine.Color}      endValue    The value to tween to
                 * @param   {number}                 duration    The duration of the tween
                 * @return  {DG.Tweening.Tweener}
                 */
                DOBlendableColor$2: function (target, endValue, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOBlendableColor$2", this ); }

                    var $t;
                    endValue = ($t = target.color, new pc.Color( endValue.r - $t.r, endValue.g - $t.g, endValue.b - $t.b, endValue.a - $t.a ));
                    var to = new pc.Color( 0, 0, 0, 0 );
                    return DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.Core.Extensions.Blendable(UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions, DG.Tweening.DOTween.To$8(function () {
                        return to;
                    }, function (x) {
                        var $t1;
                        var diff = new pc.Color( x.r - to.r, x.g - to.g, x.b - to.b, x.a - to.a );
                        to = x.$clone();
                        target.color = ($t1 = target.color.$clone(), new pc.Color( $t1.r + diff.$clone().r, $t1.g + diff.$clone().g, $t1.b + diff.$clone().b, $t1.a + diff.$clone().a ));
                    }, endValue.$clone(), duration)), target);
                },
                /*DG.Tweening.DOTweenModuleUI.DOBlendableColor$2:static end.*/

                /*DG.Tweening.DOTweenModuleUI.DOShapeCircle:static start.*/
                /**
                 * Tweens a RectTransform's anchoredPosition so that it draws a circle around the given center.
                 Also stores the RectTransform as the tween's target so it can be used for filtered operations.<p />
                 IMPORTANT: SetFrom(value) requires a {@link } instead of a float, where the X property represents the "from degrees value"
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI
                 * @memberof DG.Tweening.DOTweenModuleUI
                 * @param   {UnityEngine.RectTransform}         target             
                 * @param   {UnityEngine.Vector2}               center             Circle-center/pivot around which to rotate (in UI anchoredPosition coordinates)
                 * @param   {number}                            endValueDegrees    The end value degrees to reach (to rotate counter-clockwise pass a negative value)
                 * @param   {number}                            duration           The duration of the tween
                 * @param   {boolean}                           relativeCenter     If TRUE the {@link } coordinates will be considered as relative to the target's current anchoredPosition
                 * @param   {boolean}                           snapping           If TRUE the tween will smoothly snap all values to integers
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOShapeCircle: function (target, center, endValueDegrees, duration, relativeCenter, snapping) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI#DOShapeCircle", this ); }

                    if (relativeCenter === void 0) { relativeCenter = false; }
                    if (snapping === void 0) { snapping = false; }
                    var t = DG.Tweening.DOTween.To(UnityEngine.Vector2, UnityEngine.Vector2, DG.Tweening.Plugins.CircleOptions, DG.Tweening.Plugins.CirclePlugin.Get(), function () {
                        return target.anchoredPosition;
                    }, function (x) {
                        target.anchoredPosition = x.$clone();
                    }, center.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Tweener, DG.Tweening.TweenSettingsExtensions.SetOptions$7(t, endValueDegrees, relativeCenter, snapping), target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUI.DOShapeCircle:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUI end.*/

    /*DG.Tweening.DOTweenModuleUI+Utils start.*/
    Bridge.define("DG.Tweening.DOTweenModuleUI.Utils", {
        $kind: 1002,
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUI+Utils.SwitchToRectTransform:static start.*/
                /**
                 * Converts the anchoredPosition of the first RectTransform to the second RectTransform,
                 taking into consideration offset, anchors and pivot, and returns the new anchoredPosition
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUI.Utils
                 * @memberof DG.Tweening.DOTweenModuleUI.Utils
                 * @param   {UnityEngine.RectTransform}    from    
                 * @param   {UnityEngine.RectTransform}    to
                 * @return  {UnityEngine.Vector2}
                 */
                SwitchToRectTransform: function (from, to) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUI.Utils#SwitchToRectTransform", this ); }

                    var localPoint = { v : new UnityEngine.Vector2() };
                    var fromPivotDerivedOffset = new pc.Vec2( from.rect.width * 0.5 + from.rect.xMin, from.rect.height * 0.5 + from.rect.yMin );
                    var screenP = UnityEngine.RectTransformUtility.WorldToScreenPoint(null, from.position);
                    screenP = screenP.$clone().add( fromPivotDerivedOffset.$clone() );
                    UnityEngine.RectTransformUtility.ScreenPointToLocalPointInRectangle(to, screenP, null, localPoint);
                    var pivotDerivedOffset = new pc.Vec2( to.rect.width * 0.5 + to.rect.xMin, to.rect.height * 0.5 + to.rect.yMin );
                    return to.anchoredPosition.$clone().add( localPoint.v ).sub( pivotDerivedOffset );
                },
                /*DG.Tweening.DOTweenModuleUI+Utils.SwitchToRectTransform:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUI+Utils end.*/

    /*DG.Tweening.DOTweenModuleUnityVersion start.*/
    /** @namespace DG.Tweening */

    /**
     * Shortcuts/functions that are not strictly related to specific Modules
     but are available only on some Unity versions
     *
     * @static
     * @abstract
     * @public
     * @class DG.Tweening.DOTweenModuleUnityVersion
     */
    Bridge.define("DG.Tweening.DOTweenModuleUnityVersion", {
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor:static start.*/
                /**
                 * Tweens a Material's color using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}    target      
                 * @param   {pc.ColorGradient}        gradient    The gradient to use
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor: function (target, gradient, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.color = c.color.$clone();
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.ShortcutExtensions.DOColor$3(target, c.color.$clone(), colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor$1:static start.*/
                /**
                 * Tweens a Material's named color property using the given gradient
                 (NOTE 1: only uses the colors of the gradient, not the alphas - NOTE 2: creates a Sequence, not a Tweener).
                 Also stores the image as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}    target      
                 * @param   {pc.ColorGradient}        gradient    The gradient to use
                 * @param   {string}                  property    The name of the material property to tween (like _Tint or _SpecColor)
                 * @param   {number}                  duration    The duration of the tween
                 * @return  {DG.Tweening.Sequence}
                 */
                DOGradientColor$1: function (target, gradient, property, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOGradientColor$1", this ); }

                    var s = DG.Tweening.DOTween.Sequence();
                    var colors = gradient.colorKeys;
                    var len = colors.length;
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        var c = colors[i];
                        if (i === 0 && c.time <= 0) {
                            target.SetColor$1(property, c.color);
                            continue;
                        }
                        var colorDuration = i === ((len - 1) | 0) ? duration - DG.Tweening.TweenExtensions.Duration(s, false) : duration * (i === 0 ? c.time : c.time - colors[((i - 1) | 0)].time);
                        DG.Tweening.TweenSettingsExtensions.Append(s, DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions), DG.Tweening.ShortcutExtensions.DOColor$4(target, c.color.$clone(), property, colorDuration), DG.Tweening.Ease.Linear));
                    }
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Sequence, s, target);
                    return s;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOGradientColor$1:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForCompletion:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or complete.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForCompletion(true);</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForCompletion: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForCompletion", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForCompletion(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForCompletion:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForRewind:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or rewinded.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForRewind();</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForRewind: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForRewind", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForRewind(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForRewind:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForKill:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForKill();</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForKill: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForKill", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForKill(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForKill:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForElapsedLoops:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or has gone through the given amount of loops.
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForElapsedLoops(2);</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {number}                                elapsedLoops                    Elapsed loops to wait for
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForElapsedLoops: function (t, elapsedLoops, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForElapsedLoops", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops(t, elapsedLoops);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForElapsedLoops:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForPosition:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed
                 or has reached the given time position (loops included, delays excluded).
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForPosition(2.5f);</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {number}                                position                        Position (loops included, delays excluded) to wait for
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForPosition: function (t, position, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForPosition", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForPosition(t, position);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForPosition:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForStart:static start.*/
                /**
                 * Returns a {@link } that waits until the tween is killed or started
                 (meaning when the tween is set in a playing state the first time, after any eventual delay).
                 It can be used inside a coroutine as a yield.
                 <p>Example usage:</p><pre><code>yield return myTween.WaitForStart();</code></pre>
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {DG.Tweening.Tween}                     t                               
                 * @param   {boolean}                               returnCustomYieldInstruction
                 * @return  {UnityEngine.CustomYieldInstruction}
                 */
                WaitForStart: function (t, returnCustomYieldInstruction) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#WaitForStart", this ); }

                    if (!t.active) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogInvalidTween(t);
                        }
                        return null;
                    }
                    return new DG.Tweening.DOTweenCYInstruction.WaitForStart(t);
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.WaitForStart:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.DOOffset:static start.*/
                /**
                 * Tweens a Material's named texture offset property with the given ID to the given value.
                 Also stores the material as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}              target        
                 * @param   {UnityEngine.Vector2}               endValue      The end value to reach
                 * @param   {number}                            propertyID    The ID of the material property to tween (also called nameID in Unity's manual)
                 * @param   {number}                            duration      The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOOffset: function (target, endValue, propertyID, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOOffset", this ); }

                    if (!target.HasProperty(propertyID)) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogMissingMaterialProperty(propertyID);
                        }
                        return null;
                    }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.GetTextureOffset(propertyID);
                    }, function (x) {
                        target.SetTextureOffset(propertyID, x);
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOOffset:static end.*/

                /*DG.Tweening.DOTweenModuleUnityVersion.DOTiling:static start.*/
                /**
                 * Tweens a Material's named texture scale property with the given ID to the given value.
                 Also stores the material as the tween's target so it can be used for filtered operations
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUnityVersion
                 * @memberof DG.Tweening.DOTweenModuleUnityVersion
                 * @param   {UnityEngine.Material}              target        
                 * @param   {UnityEngine.Vector2}               endValue      The end value to reach
                 * @param   {number}                            propertyID    The ID of the material property to tween (also called nameID in Unity's manual)
                 * @param   {number}                            duration      The duration of the tween
                 * @return  {DG.Tweening.Core.TweenerCore$3}
                 */
                DOTiling: function (target, endValue, propertyID, duration) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUnityVersion#DOTiling", this ); }

                    if (!target.HasProperty(propertyID)) {
                        if (DG.Tweening.Core.Debugger.logPriority > 0) {
                            DG.Tweening.Core.Debugger.LogMissingMaterialProperty(propertyID);
                        }
                        return null;
                    }
                    var t = DG.Tweening.DOTween.To$11(function () {
                        return target.GetTextureScale(propertyID);
                    }, function (x) {
                        target.SetTextureScale(propertyID, x);
                    }, endValue.$clone(), duration);
                    DG.Tweening.TweenSettingsExtensions.SetTarget(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions), t, target);
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUnityVersion.DOTiling:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUnityVersion end.*/

    /*DG.Tweening.DOTweenModuleUtils start.*/
    /**
     * Utility functions that deal with available Modules.
     Modules defines:
     - DOTAUDIO
     - DOTPHYSICS
     - DOTPHYSICS2D
     - DOTSPRITE
     - DOTUI
     Extra defines set and used for implementation of external assets:
     - DOTWEEN_TMP ► TextMesh Pro
     - DOTWEEN_TK2D ► 2D Toolkit
     *
     * @static
     * @abstract
     * @public
     * @class DG.Tweening.DOTweenModuleUtils
     */
    Bridge.define("DG.Tweening.DOTweenModuleUtils", {
        statics: {
            fields: {
                _initialized: false
            },
            methods: {
                /*DG.Tweening.DOTweenModuleUtils.Init:static start.*/
                /**
                 * Called via Reflection by DOTweenComponent on Awake
                 *
                 * @static
                 * @public
                 * @this DG.Tweening.DOTweenModuleUtils
                 * @memberof DG.Tweening.DOTweenModuleUtils
                 * @return  {void}
                 */
                Init: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils#Init", this ); }

                    if (DG.Tweening.DOTweenModuleUtils._initialized) {
                        return;
                    }

                    DG.Tweening.DOTweenModuleUtils._initialized = true;
                    DG.Tweening.Core.DOTweenExternalCommand.addSetOrientationOnPath(DG.Tweening.DOTweenModuleUtils.Physics.SetOrientationOnPath);

                },
                /*DG.Tweening.DOTweenModuleUtils.Init:static end.*/

                /*DG.Tweening.DOTweenModuleUtils.Preserver:static start.*/
                Preserver: function () {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils#Preserver", this ); }

                    var loadedAssemblies = System.AppDomain.getAssemblies();
                    var mi = Bridge.Reflection.getMembers(UnityEngine.MonoBehaviour, 8, 284, "Stub");
                },
                /*DG.Tweening.DOTweenModuleUtils.Preserver:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUtils end.*/

    /*DG.Tweening.DOTweenModuleUtils+Physics start.*/
    Bridge.define("DG.Tweening.DOTweenModuleUtils.Physics", {
        $kind: 1002,
        statics: {
            methods: {
                /*DG.Tweening.DOTweenModuleUtils+Physics.SetOrientationOnPath:static start.*/
                SetOrientationOnPath: function (options, t, newRot, trans) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#SetOrientationOnPath", this ); }

                    if (options.isRigidbody) {
                        Bridge.cast(t.target, UnityEngine.Rigidbody).rotation = newRot.$clone();
                    } else {
                        trans.rotation = newRot.$clone();
                    }
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.SetOrientationOnPath:static end.*/

                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody2D:static start.*/
                HasRigidbody2D: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody2D", this ); }

                    return UnityEngine.Component.op_Inequality(target.GetComponent(UnityEngine.Rigidbody2D), null);
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody2D:static end.*/

                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody:static start.*/
                HasRigidbody: function (target) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#HasRigidbody", this ); }

                    return UnityEngine.Component.op_Inequality(target.GetComponent(UnityEngine.Rigidbody), null);
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.HasRigidbody:static end.*/

                /*DG.Tweening.DOTweenModuleUtils+Physics.CreateDOTweenPathTween:static start.*/
                CreateDOTweenPathTween: function (target, tweenRigidbody, isLocal, path, duration, pathMode) {
if ( TRACE ) { TRACE( "DG.Tweening.DOTweenModuleUtils.Physics#CreateDOTweenPathTween", this ); }

                    var t = null;
                    var rBodyFoundAndTweened = false;
                    if (tweenRigidbody) {
                        var rBody = target.GetComponent(UnityEngine.Rigidbody);
                        if (UnityEngine.Component.op_Inequality(rBody, null)) {
                            rBodyFoundAndTweened = true;
                            t = isLocal ? DG.Tweening.DOTweenModulePhysics.DOLocalPath$1(rBody, path, duration, pathMode) : DG.Tweening.DOTweenModulePhysics.DOPath$1(rBody, path, duration, pathMode);
                        }
                    }
                    if (!rBodyFoundAndTweened && tweenRigidbody) {
                        var rBody2D = target.GetComponent(UnityEngine.Rigidbody2D);
                        if (UnityEngine.Component.op_Inequality(rBody2D, null)) {
                            rBodyFoundAndTweened = true;
                            t = isLocal ? DG.Tweening.DOTweenModulePhysics2D.DOLocalPath$1(rBody2D, path, duration, pathMode) : DG.Tweening.DOTweenModulePhysics2D.DOPath$1(rBody2D, path, duration, pathMode);
                        }
                    }
                    if (!rBodyFoundAndTweened) {
                        t = isLocal ? DG.Tweening.ShortcutExtensions.DOLocalPath(target.transform, path, duration, pathMode) : DG.Tweening.ShortcutExtensions.DOPath(target.transform, path, duration, pathMode);
                    }
                    return t;
                },
                /*DG.Tweening.DOTweenModuleUtils+Physics.CreateDOTweenPathTween:static end.*/


            }
        }
    });
    /*DG.Tweening.DOTweenModuleUtils+Physics end.*/

    /*DOTweenExtensions start.*/
    Bridge.define("DOTweenExtensions", {
        statics: {
            methods: {
                /*DOTweenExtensions.AsyncWait:static start.*/
                AsyncWait: function (tween) {
if ( TRACE ) { TRACE( "DOTweenExtensions#AsyncWait", this ); }

                    var tcs = new System.Threading.Tasks.TaskCompletionSource();
                    DG.Tweening.TweenSettingsExtensions.OnComplete(DG.Tweening.Tween, tween, function () {
                        tcs.setResult(true);
                    });
                    DG.Tweening.TweenSettingsExtensions.OnKill(DG.Tweening.Tween, tween, function () {
                        tcs.setResult(true);
                    }); // Handle cases where the tween is killed

                    return tcs.task;
                },
                /*DOTweenExtensions.AsyncWait:static end.*/


            }
        }
    });
    /*DOTweenExtensions end.*/

    /*EffectObj start.*/
    Bridge.define("EffectObj", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            particleSystems: null,
            curveMove: null
        },
        props: {
            GetCurveMove: {
                get: function () {
if ( TRACE ) { TRACE( "EffectObj#GetCurveMove#get", this ); }

                    if (UnityEngine.MonoBehaviour.op_Equality(this.curveMove, null)) {
                        this.curveMove = this.GetComponent(CurveMove);
                    }
                    return this.curveMove;
                }
            }
        },
        methods: {
            /*EffectObj.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "EffectObj#Setup", this ); }

                this.particleSystems = this.GetComponentsInChildren(UnityEngine.ParticleSystem);
            },
            /*EffectObj.Setup end.*/

            /*EffectObj.Play start.*/
            Play: function () {
if ( TRACE ) { TRACE( "EffectObj#Play", this ); }

                for (var i = 0; i < this.particleSystems.length; i = (i + 1) | 0) {
                    this.particleSystems[i].Play();
                }
            },
            /*EffectObj.Play end.*/


        }
    });
    /*EffectObj end.*/

    /*ExampleSpline start.*/
    Bridge.define("ExampleSpline", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            trans: null,
            spline: null,
            ltLogo: null,
            ltLogo2: null,
            iter: 0
        },
        methods: {
            /*ExampleSpline.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "ExampleSpline#Start", this ); }

                this.spline = new LTSpline.ctor(System.Array.init([this.trans[0].position.$clone(), this.trans[1].position.$clone(), this.trans[2].position.$clone(), this.trans[3].position.$clone(), this.trans[4].position.$clone()], UnityEngine.Vector3));
                this.ltLogo = UnityEngine.GameObject.Find("LeanTweenLogo1");
                this.ltLogo2 = UnityEngine.GameObject.Find("LeanTweenLogo2");

                LeanTween.moveSpline$1(this.ltLogo2, this.spline.pts, 1.0).setEase(LeanTweenType.easeInOutQuad).setLoopPingPong().setOrientToPath(true);

                var zoomInPath_LT = LeanTween.moveSpline$1(this.ltLogo2, System.Array.init([pc.Vec3.ZERO.clone(), pc.Vec3.ZERO.clone(), new pc.Vec3( 1, 1, 1 ), new pc.Vec3( 2, 1, 1 ), new pc.Vec3( 2, 1, 1 )], UnityEngine.Vector3), 1.5);
                zoomInPath_LT.setUseEstimatedTime(true);
            },
            /*ExampleSpline.Start end.*/

            /*ExampleSpline.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ExampleSpline#Update", this ); }

                // Iterating over path
                this.ltLogo.transform.position = this.spline.point(this.iter);

                this.iter += UnityEngine.Time.deltaTime * 0.1;
                if (this.iter > 1.0) {
                    this.iter = 0.0;
                }
            },
            /*ExampleSpline.Update end.*/

            /*ExampleSpline.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "ExampleSpline#OnDrawGizmos", this ); }

                if (this.spline != null) {
                    this.spline.gizmoDraw();
                } // debug aid to be able to see the path in the scene inspector
            },
            /*ExampleSpline.OnDrawGizmos end.*/


        }
    });
    /*ExampleSpline end.*/

    /*Following start.*/
    Bridge.define("Following", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            planet: null,
            followArrow: null,
            dude1: null,
            dude2: null,
            dude3: null,
            dude4: null,
            dude5: null,
            dude1Title: null,
            dude2Title: null,
            dude3Title: null,
            dude4Title: null,
            dude5Title: null,
            dude1ColorVelocity: null,
            velocityPos: null,
            fromY: 0,
            velocityY: 0,
            fromVec3: null,
            velocityVec3: null,
            fromColor: null,
            velocityColor: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "Following#init", this ); }

                this.dude1ColorVelocity = new UnityEngine.Color();
                this.velocityPos = new UnityEngine.Vector3();
                this.fromVec3 = new UnityEngine.Vector3();
                this.velocityVec3 = new UnityEngine.Vector3();
                this.fromColor = new UnityEngine.Color();
                this.velocityColor = new UnityEngine.Color();
            }
        },
        methods: {
            /*Following.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "Following#Start", this ); }

                LeanTweenExt.LeanDelayedCall(this.followArrow.gameObject, 3.0, Bridge.fn.cacheBind(this, this.moveArrow)).setOnStart(Bridge.fn.cacheBind(this, this.moveArrow)).setRepeat(-1);

                // Follow Local Y Position of Arrow
                LeanTween.followDamp(this.dude1, this.followArrow, LeanProp.localY, 1.1);
                LeanTween.followSpring(this.dude2, this.followArrow, LeanProp.localY, 1.1);
                LeanTween.followBounceOut(this.dude3, this.followArrow, LeanProp.localY, 1.1);
                LeanTween.followSpring(this.dude4, this.followArrow, LeanProp.localY, 1.1, -1.0, 1.5, 0.8);
                LeanTween.followLinear(this.dude5, this.followArrow, LeanProp.localY, 50.0);

                // Follow Arrow color
                LeanTween.followDamp(this.dude1, this.followArrow, LeanProp.color, 1.1);
                LeanTween.followSpring(this.dude2, this.followArrow, LeanProp.color, 1.1);
                LeanTween.followBounceOut(this.dude3, this.followArrow, LeanProp.color, 1.1);
                LeanTween.followSpring(this.dude4, this.followArrow, LeanProp.color, 1.1, -1.0, 1.5, 0.8);
                LeanTween.followLinear(this.dude5, this.followArrow, LeanProp.color, 0.5);

                // Follow Arrow scale
                LeanTween.followDamp(this.dude1, this.followArrow, LeanProp.scale, 1.1);
                LeanTween.followSpring(this.dude2, this.followArrow, LeanProp.scale, 1.1);
                LeanTween.followBounceOut(this.dude3, this.followArrow, LeanProp.scale, 1.1);
                LeanTween.followSpring(this.dude4, this.followArrow, LeanProp.scale, 1.1, -1.0, 1.5, 0.8);
                LeanTween.followLinear(this.dude5, this.followArrow, LeanProp.scale, 5.0);

                // Titles
                var titleOffset = new pc.Vec3( 0.0, -20.0, -18.0 );
                LeanTween.followDamp(this.dude1Title, this.dude1, LeanProp.localPosition, 0.6).setOffset(titleOffset);
                LeanTween.followSpring(this.dude2Title, this.dude2, LeanProp.localPosition, 0.6).setOffset(titleOffset);
                LeanTween.followBounceOut(this.dude3Title, this.dude3, LeanProp.localPosition, 0.6).setOffset(titleOffset);
                LeanTween.followSpring(this.dude4Title, this.dude4, LeanProp.localPosition, 0.6, -1.0, 1.5, 0.8).setOffset(titleOffset);
                LeanTween.followLinear(this.dude5Title, this.dude5, LeanProp.localPosition, 30.0).setOffset(titleOffset);

                // Rotate Planet
                var localPos = UnityEngine.Camera.main.transform.InverseTransformPoint(this.planet.transform.position);
                LeanTween.rotateAround(UnityEngine.Camera.main.gameObject, pc.Vec3.LEFT.clone(), 360.0, 300.0).setPoint(localPos).setRepeat(-1);
            },
            /*Following.Start end.*/

            /*Following.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "Following#Update", this ); }

                // Use the smooth methods to follow variables in which ever manner you wish!
                this.fromY = LeanSmooth.spring(this.fromY, this.followArrow.localPosition.y, Bridge.ref(this, "velocityY"), 1.1);
                this.fromVec3 = LeanSmooth.spring$2(this.fromVec3, this.dude5Title.localPosition, Bridge.ref(this, "velocityVec3"), 1.1);
                this.fromColor = LeanSmooth.spring$1(this.fromColor, this.dude1.GetComponent(UnityEngine.Renderer).material.color, Bridge.ref(this, "velocityColor"), 1.1);
                UnityEngine.Debug.Log$1("Smoothed y:" + System.Single.format(this.fromY) + " vec3:" + this.fromVec3 + " color:" + this.fromColor);
            },
            /*Following.Update end.*/

            /*Following.moveArrow start.*/
            moveArrow: function () {
if ( TRACE ) { TRACE( "Following#moveArrow", this ); }

                LeanTween.moveLocalY(this.followArrow.gameObject, UnityEngine.Random.Range$1(-100.0, 100.0), 0.0);

                var randomCol = new pc.Color( UnityEngine.Random.value, UnityEngine.Random.value, UnityEngine.Random.value, 1 );
                LeanTween.color(this.followArrow.gameObject, randomCol, 0.0);

                var randomVal = UnityEngine.Random.Range$1(5.0, 10.0);
                this.followArrow.localScale = new pc.Vec3( 1, 1, 1 ).clone().scale( randomVal );
            },
            /*Following.moveArrow end.*/


        }
    });
    /*Following end.*/

    /*FPSController start.*/
    Bridge.define("FPSController", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            fpsText: null,
            frameRates: null,
            deltaTime: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "FPSController#init", this ); }

                this.frameRates = System.Array.init([
                    10, 
                    20, 
                    30, 
                    40, 
                    50, 
                    60
                ], System.Int32);
                this.deltaTime = 0.0;
            }
        },
        methods: {
            /*FPSController.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "FPSController#Update", this ); }

                // Listen for number key presses from 1 to 6
                for (var i = 0; i < this.frameRates.length; i = (i + 1) | 0) {
                    if (UnityEngine.Input.GetKeyDown(((UnityEngine.KeyCode.Alpha1 + i) | 0))) {
                        this.SetFrameRate(this.frameRates[i]);
                    }
                }

                // Calculate and display the current FPS
                this.deltaTime += (UnityEngine.Time.unscaledDeltaTime - this.deltaTime) * 0.1;
                var fps = 1.0 / this.deltaTime;
                this.fpsText.text = System.String.format("FPS: {0:0.}", [Bridge.box(fps, System.Single, System.Single.format, System.Single.getHashCode)]);
            },
            /*FPSController.Update end.*/

            /*FPSController.SetFrameRate start.*/
            SetFrameRate: function (frameRate) {
if ( TRACE ) { TRACE( "FPSController#SetFrameRate", this ); }

                // Set the target frame rate
                UnityEngine.Application.targetFrameRate = frameRate;
                UnityEngine.Debug.Log$1("Frame rate set to: " + frameRate);
            },
            /*FPSController.SetFrameRate end.*/


        }
    });
    /*FPSController end.*/

    /*GameMode start.*/
    Bridge.define("GameMode", {
        $kind: 6,
        statics: {
            fields: {
                CLASSIC: 0,
                TIME: 1,
                BOMB: 2,
                HEXA: 3
            }
        }
    });
    /*GameMode end.*/

    /*GameSetting start.*/
    Bridge.define("GameSetting", {
        fields: {
            muteMusic: false,
            muteSound: false,
            tutorialClassic: false,
            tutorialHexa: false,
            fillTimer: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GameSetting#init", this ); }

                this.fillTimer = 0;
            }
        }
    });
    /*GameSetting end.*/

    /*GameState start.*/
    Bridge.define("GameState", {
        $kind: 6,
        statics: {
            fields: {
                NONE: 0,
                WATING: 1,
                PLAY: 2,
                OTHER_SCREEN: 3
            }
        },
        $utype: System.Byte
    });
    /*GameState end.*/

    /*GemCounter start.*/
    Bridge.define("GemCounter", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            countText: null,
            gemIcon: null,
            neededAmount: 0,
            currentAmount: 0,
            receiveAnimDuration: 0,
            iconScale: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GemCounter#init", this ); }

                this.iconScale = new UnityEngine.Vector3();
                this.receiveAnimDuration = 1.5;
            }
        },
        methods: {
            /*GemCounter.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GemCounter#Start", this ); }

                this.currentAmount = this.neededAmount;
                this.iconScale = this.gemIcon.transform.localScale.$clone();
                this.UpdateText();
            },
            /*GemCounter.Start end.*/

            /*GemCounter.UpdateText start.*/
            UpdateText: function () {
if ( TRACE ) { TRACE( "GemCounter#UpdateText", this ); }

                this.countText.text = Bridge.toString(this.currentAmount);
            },
            /*GemCounter.UpdateText end.*/

            /*GemCounter.ReduceCount start.*/
            ReduceCount: function () {
if ( TRACE ) { TRACE( "GemCounter#ReduceCount", this ); }

                this.currentAmount = (this.currentAmount - 1) | 0;
                this.UpdateText();
            },
            /*GemCounter.ReduceCount end.*/

            /*GemCounter.ReceiveGem start.*/
            ReceiveGem: function (receivedGem, delay, confirmSortOrder) {
if ( TRACE ) { TRACE( "GemCounter#ReceiveGem", this ); }

                var copiedGem = UnityEngine.Object.Instantiate$2(UnityEngine.GameObject, receivedGem, receivedGem.transform.position, pc.Quat.IDENTITY.clone());

                //Usually sortingOrder would be copied on instantiate, but not in Luna, lovely
                //So we have to assign it again for Luna
                //Also, we can't have the instantiation variable be SpriteRenderer, only GameObject,
                //or Luna gets a null error when trying to reference it, so we can't avoid this GetComponent
                copiedGem.GetComponent(UnityEngine.SpriteRenderer).sortingOrder = confirmSortOrder;

                var seq = DG.Tweening.DOTween.Sequence();

                DG.Tweening.TweenSettingsExtensions.Append(DG.Tweening.TweenSettingsExtensions.AppendCallback(DG.Tweening.TweenSettingsExtensions.AppendCallback(DG.Tweening.TweenSettingsExtensions.AppendCallback(DG.Tweening.TweenSettingsExtensions.Join(DG.Tweening.TweenSettingsExtensions.Append(DG.Tweening.TweenSettingsExtensions.AppendInterval(seq, delay), DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOMove(copiedGem.transform, this.gemIcon.transform.position.$clone(), this.receiveAnimDuration * 0.66), DG.Tweening.Ease.InQuad)), DG.Tweening.ShortcutExtensions.DOScale(copiedGem.transform, 1.5, this.receiveAnimDuration * 0.66)), Bridge.fn.bind(this, function () {
                    this.ResetIconSize();
                })), Bridge.fn.bind(this, function () {
                    this.ReduceCount();
                })), function () {
                    copiedGem.SetActive(false);
                }), DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOScale$1(this.gemIcon.transform, this.iconScale.$clone().clone().scale( 1.2 ), this.receiveAnimDuration * 0.33), 2, DG.Tweening.LoopType.Yoyo));
            },
            /*GemCounter.ReceiveGem end.*/

            /*GemCounter.ResetIconSize start.*/
            ResetIconSize: function () {
if ( TRACE ) { TRACE( "GemCounter#ResetIconSize", this ); }

                DG.Tweening.ShortcutExtensions.DOKill(this.gemIcon.transform);
                this.gemIcon.transform.localScale = this.iconScale.$clone();
            },
            /*GemCounter.ResetIconSize end.*/

            /*GemCounter.CheckMatch start.*/
            CheckMatch: function (spr) {
if ( TRACE ) { TRACE( "GemCounter#CheckMatch", this ); }

                return (Bridge.referenceEquals(this.gemIcon.sprite, spr));
            },
            /*GemCounter.CheckMatch end.*/


        }
    });
    /*GemCounter end.*/

    /*GeneralAdvancedTechniques start.*/
    Bridge.define("GeneralAdvancedTechniques", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            avatarRecursive: null,
            avatar2dRecursive: null,
            wingPersonPanel: null,
            textField: null,
            avatarMove: null,
            movePts: null,
            avatarSpeed: null,
            avatarSpeed2: null,
            circleSm: null,
            circleLrg: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GeneralAdvancedTechniques#init", this ); }

                this.circleSm = System.Array.init([new pc.Vec3( 16.0, 0.0, 0.0 ), new pc.Vec3( 14.56907, 8.009418, 0.0 ), new pc.Vec3( 15.96541, 4.638379, 0.0 ), new pc.Vec3( 11.31371, 11.31371, 0.0 ), new pc.Vec3( 11.31371, 11.31371, 0.0 ), new pc.Vec3( 4.638379, 15.96541, 0.0 ), new pc.Vec3( 8.009416, 14.56908, 0.0 ), new pc.Vec3( -6.993822E-07, 16.0, 0.0 ), new pc.Vec3( -6.993822E-07, 16.0, 0.0 ), new pc.Vec3( -8.009419, 14.56907, 0.0 ), new pc.Vec3( -4.63838, 15.9654, 0.0 ), new pc.Vec3( -11.31371, 11.31371, 0.0 ), new pc.Vec3( -11.31371, 11.31371, 0.0 ), new pc.Vec3( -15.9654, 4.63838, 0.0 ), new pc.Vec3( -14.56908, 8.009415, 0.0 ), new pc.Vec3( -16.0, -1.398764E-06, 0.0 ), new pc.Vec3( -16.0, -1.398764E-06, 0.0 ), new pc.Vec3( -14.56907, -8.009418, 0.0 ), new pc.Vec3( -15.9654, -4.638382, 0.0 ), new pc.Vec3( -11.31371, -11.31371, 0.0 ), new pc.Vec3( -11.31371, -11.31371, 0.0 ), new pc.Vec3( -4.638381, -15.9654, 0.0 ), new pc.Vec3( -8.009413, -14.56908, 0.0 ), new pc.Vec3( 1.907981E-07, -16.0, 0.0 ), new pc.Vec3( 1.907981E-07, -16.0, 0.0 ), new pc.Vec3( 8.00942, -14.56907, 0.0 ), new pc.Vec3( 4.638381, -15.9654, 0.0 ), new pc.Vec3( 11.31371, -11.3137, 0.0 ), new pc.Vec3( 11.31371, -11.3137, 0.0 ), new pc.Vec3( 15.96541, -4.638378, 0.0 ), new pc.Vec3( 14.56907, -8.009418, 0.0 ), new pc.Vec3( 16.0, 2.797529E-06, 0.0 )], UnityEngine.Vector3);
                this.circleLrg = System.Array.init([new pc.Vec3( 25.0, 0.0, 0.0 ), new pc.Vec3( 22.76418, 12.51472, 0.0 ), new pc.Vec3( 24.94595, 7.247467, 0.0 ), new pc.Vec3( 17.67767, 17.67767, 0.0 ), new pc.Vec3( 17.67767, 17.67767, 0.0 ), new pc.Vec3( 7.247467, 24.94595, 0.0 ), new pc.Vec3( 12.51471, 22.76418, 0.0 ), new pc.Vec3( -1.092785E-06, 25.0, 0.0 ), new pc.Vec3( -1.092785E-06, 25.0, 0.0 ), new pc.Vec3( -12.51472, 22.76418, 0.0 ), new pc.Vec3( -7.247468, 24.94594, 0.0 ), new pc.Vec3( -17.67767, 17.67767, 0.0 ), new pc.Vec3( -17.67767, 17.67767, 0.0 ), new pc.Vec3( -24.94594, 7.247468, 0.0 ), new pc.Vec3( -22.76418, 12.51471, 0.0 ), new pc.Vec3( -25.0, -2.185569E-06, 0.0 ), new pc.Vec3( -25.0, -2.185569E-06, 0.0 ), new pc.Vec3( -22.76418, -12.51472, 0.0 ), new pc.Vec3( -24.94594, -7.247472, 0.0 ), new pc.Vec3( -17.67767, -17.67767, 0.0 ), new pc.Vec3( -17.67767, -17.67767, 0.0 ), new pc.Vec3( -7.247469, -24.94594, 0.0 ), new pc.Vec3( -12.51471, -22.76418, 0.0 ), new pc.Vec3( 2.98122E-07, -25.0, 0.0 ), new pc.Vec3( 2.98122E-07, -25.0, 0.0 ), new pc.Vec3( 12.51472, -22.76418, 0.0 ), new pc.Vec3( 7.24747, -24.94594, 0.0 ), new pc.Vec3( 17.67768, -17.67766, 0.0 ), new pc.Vec3( 17.67768, -17.67766, 0.0 ), new pc.Vec3( 24.94595, -7.247465, 0.0 ), new pc.Vec3( 22.76418, -12.51472, 0.0 ), new pc.Vec3( 25.0, 4.371139E-06, 0.0 )], UnityEngine.Vector3);
            }
        },
        methods: {
            /*GeneralAdvancedTechniques.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralAdvancedTechniques#Start", this ); }

                // Recursion - Set a objects value and have it recursively effect it's children
                LeanTween.alpha$1(this.avatarRecursive, 0.0, 1.0).setRecursive(true).setLoopPingPong();
                LeanTween.alpha$1(this.avatar2dRecursive, 0.0, 1.0).setRecursive(true).setLoopPingPong();
                LeanTween.alpha$2(this.wingPersonPanel, 0.0, 1.0).setRecursive(true).setLoopPingPong();

                // Destroy on Complete - 

                // Chaining tweens together

                // setOnCompleteOnRepeat


                // Move to path of transforms that are moving themselves
                LeanTween.value$8(this.avatarMove, 0.0, this.movePts.length - 1, 5.0).setOnUpdate(Bridge.fn.bind(this, function (val) {
                    var first = Math.floor(val);
                    var next = first < ((this.movePts.length - 1) | 0) ? ((first + 1) | 0) : first;
                    var diff = val - first;
                    // Debug.Log("val:"+val+" first:"+first+" next:"+next);
                    var diffPos = (this.movePts[next].position.$clone().sub( this.movePts[first].position ));
                    this.avatarMove.transform.position = this.movePts[first].position.$clone().add( diffPos.$clone().clone().scale( diff ) );
                })).setEase(LeanTweenType.easeInOutExpo).setLoopPingPong();

                // move the pts
                for (var i = 0; i < this.movePts.length; i = (i + 1) | 0) {
                    LeanTween.moveY(this.movePts[i].gameObject, this.movePts[i].position.y + 1.5, 1.0).setDelay(i * 0.2).setLoopPingPong();
                }


                // move objects at a constant speed
                for (var i1 = 0; i1 < this.avatarSpeed.length; i1 = (i1 + 1) | 0) {
                    LeanTween.moveLocalZ(this.avatarSpeed[i1], (((i1 + 1) | 0)) * 5.0, 1.0).setSpeed(6.0).setEase(LeanTweenType.easeInOutExpo).setLoopPingPong();
                } // any time you set the speed it overrides the time value

                // move around a circle at a constant speed
                for (var i2 = 0; i2 < this.avatarSpeed2.length; i2 = (i2 + 1) | 0) {
                    LeanTween.moveLocal$3(this.avatarSpeed2[i2], i2 === 0 ? this.circleSm : this.circleLrg, 1.0).setSpeed(20.0).setRepeat(-1);
                }

            },
            /*GeneralAdvancedTechniques.Start end.*/


        }
    });
    /*GeneralAdvancedTechniques end.*/

    /*GeneralBasic start.*/
    Bridge.define("GeneralBasic", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            prefabAvatar: null
        },
        methods: {
            /*GeneralBasic.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralBasic#Start", this ); }

                // Setup
                var avatarRotate = UnityEngine.GameObject.Find("AvatarRotate");
                var avatarScale = UnityEngine.GameObject.Find("AvatarScale");
                var avatarMove = UnityEngine.GameObject.Find("AvatarMove");

                // Rotate Example
                LeanTween.rotateAround(avatarRotate, new pc.Vec3( 0, 0, 1 ), 360.0, 5.0);

                // Scale Example
                LeanTween.scale$1(avatarScale, new pc.Vec3( 1.7, 1.7, 1.7 ), 5.0).setEase(LeanTweenType.easeOutBounce);
                LeanTween.moveX(avatarScale, avatarScale.transform.position.x + 5.0, 5.0).setEase(LeanTweenType.easeOutBounce); // Simultaneously target many different tweens on the same object 

                // Move Example
                LeanTween.move$5(avatarMove, avatarMove.transform.position.$clone().add( new pc.Vec3( -9.0, 0.0, 1.0 ) ), 2.0).setEase(LeanTweenType.easeInQuad);

                // Delay
                LeanTween.move$5(avatarMove, avatarMove.transform.position.$clone().add( new pc.Vec3( -6.0, 0.0, 1.0 ) ), 2.0).setDelay(3.0);

                // Chain properties (delay, easing with a set repeating of type ping pong)
                LeanTween.scale$1(avatarScale, new pc.Vec3( 0.2, 0.2, 0.2 ), 1.0).setDelay(7.0).setEase(LeanTweenType.easeInOutCirc).setLoopPingPong$1(3);

                // Call methods after a certain time period
                LeanTween.delayedCall$2(this.gameObject, 0.2, Bridge.fn.cacheBind(this, this.advancedExamples));

            },
            /*GeneralBasic.Start end.*/

            /*GeneralBasic.advancedExamples start.*/
            advancedExamples: function () {
if ( TRACE ) { TRACE( "GeneralBasic#advancedExamples", this ); }

                LeanTween.delayedCall$2(this.gameObject, 14.0, Bridge.fn.bind(this, function () {
                    for (var i = 0; i < 10; i = (i + 1) | 0) {
                        // Instantiate Container
                        var rotator = { v : new UnityEngine.GameObject.$ctor2("rotator" + i) };
                        rotator.v.transform.position = new pc.Vec3( 10.2, 2.85, 0.0 );

                        // Instantiate Avatar
                        var dude = UnityEngine.Object.Instantiate$2(UnityEngine.GameObject, this.prefabAvatar, pc.Vec3.ZERO.clone(), this.prefabAvatar.transform.rotation);
                        dude.transform.parent = rotator.v.transform;
                        dude.transform.localPosition = new pc.Vec3( 0.0, 1.5, 2.5 * i );

                        // Scale, pop-in
                        dude.transform.localScale = new pc.Vec3( 0.0, 0.0, 0.0 );
                        LeanTween.scale$1(dude, new pc.Vec3( 0.65, 0.65, 0.65 ), 1.0).setDelay(i * 0.2).setEase(LeanTweenType.easeOutBack);

                        // Color like the rainbow
                        var period = LeanTween.tau / 10 * i;
                        var red = Math.sin(period + LeanTween.tau * 0.0 / 3.0) * 0.5 + 0.5;
                        var green = Math.sin(period + LeanTween.tau * 1.0 / 3.0) * 0.5 + 0.5;
                        var blue = Math.sin(period + LeanTween.tau * 2.0 / 3.0) * 0.5 + 0.5;
                        var rainbowColor = new pc.Color( red, green, blue, 1 );
                        LeanTween.color(dude, rainbowColor, 0.3).setDelay(1.2 + i * 0.4);

                        // Push into the wheel
                        LeanTween.moveZ(dude, 0.0, 0.3).setDelay(1.2 + i * 0.4).setEase(LeanTweenType.easeSpring).setOnComplete((function ($me, rotator) {
                            return function () {
                                LeanTween.rotateAround(rotator.v, new pc.Vec3( 0, 0, 1 ), -1080.0, 12.0);
                            };
                        })(this, rotator));

                        // Jump Up and back down
                        LeanTween.moveLocalY(dude, 4.0, 1.2).setDelay(5.0 + i * 0.2).setLoopPingPong$1(1).setEase(LeanTweenType.easeInOutQuad);

                        // Alpha Out, and destroy
                        LeanTween.alpha$1(dude, 0.0, 0.6).setDelay(9.2 + i * 0.4).setDestroyOnComplete(true).setOnComplete((function ($me, rotator) {
                            return function () {
                                UnityEngine.MonoBehaviour.Destroy(rotator.v); // destroying parent as well
                            };
                        })(this, rotator));
                    }

                })).setOnCompleteOnStart(true).setRepeat(-1); // Have the OnComplete play in the beginning and have the whole group repeat endlessly
            },
            /*GeneralBasic.advancedExamples end.*/


        }
    });
    /*GeneralBasic end.*/

    /*GeneralBasics2d start.*/
    Bridge.define("GeneralBasics2d", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            dudeTexture: null,
            prefabParticles: null
        },
        methods: {
            /*GeneralBasics2d.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralBasics2d#Start", this ); }

                // Setup
                var avatarRotate = this.createSpriteDude("avatarRotate", new pc.Vec3( -2.51208, 10.7119, -14.37754 ));
                var avatarScale = this.createSpriteDude("avatarScale", new pc.Vec3( 2.51208, 10.2119, -14.37754 ));
                var avatarMove = this.createSpriteDude("avatarMove", new pc.Vec3( -3.1208, 7.100643, -14.37754 ));

                // Rotate Example
                LeanTween.rotateAround(avatarRotate, new pc.Vec3( 0, 0, 1 ), -360.0, 5.0);

                // Scale Example
                LeanTween.scale$1(avatarScale, new pc.Vec3( 1.7, 1.7, 1.7 ), 5.0).setEase(LeanTweenType.easeOutBounce);
                LeanTween.moveX(avatarScale, avatarScale.transform.position.x + 1.0, 5.0).setEase(LeanTweenType.easeOutBounce); // Simultaneously target many different tweens on the same object 

                // Move Example
                LeanTween.move$5(avatarMove, avatarMove.transform.position.$clone().add( new pc.Vec3( 1.7, 0.0, 0.0 ) ), 2.0).setEase(LeanTweenType.easeInQuad);

                // Delay
                LeanTween.move$5(avatarMove, avatarMove.transform.position.$clone().add( new pc.Vec3( 2.0, -1.0, 0.0 ) ), 2.0).setDelay(3.0);

                // Chain properties (delay, easing with a set repeating of type ping pong)
                LeanTween.scale$1(avatarScale, new pc.Vec3( 0.2, 0.2, 0.2 ), 1.0).setDelay(7.0).setEase(LeanTweenType.easeInOutCirc).setLoopPingPong$1(3);

                // Call methods after a certain time period
                LeanTween.delayedCall$2(this.gameObject, 0.2, Bridge.fn.cacheBind(this, this.advancedExamples));
            },
            /*GeneralBasics2d.Start end.*/

            /*GeneralBasics2d.createSpriteDude start.*/
            createSpriteDude: function (name, pos, hasParticles) {
if ( TRACE ) { TRACE( "GeneralBasics2d#createSpriteDude", this ); }

                if (hasParticles === void 0) { hasParticles = true; }
                var go = new UnityEngine.GameObject.$ctor2(name);
                var ren = go.AddComponent(UnityEngine.SpriteRenderer);
                go.GetComponent(UnityEngine.SpriteRenderer).color = new pc.Color( 0.0, 0.709803939, 1.0, 1 );
                ren.sprite = UnityEngine.Sprite.Create$1(this.dudeTexture, new UnityEngine.Rect.$ctor1(0.0, 0.0, 256.0, 256.0), new pc.Vec2( 0.5, 0.0 ), 256.0);
                go.transform.position = pos.$clone();

                if (hasParticles) {
                    var particles = UnityEngine.Object.Instantiate$2(UnityEngine.GameObject, this.prefabParticles, pc.Vec3.ZERO.clone(), this.prefabParticles.transform.rotation);
                    particles.transform.parent = go.transform;
                    particles.transform.localPosition = this.prefabParticles.transform.position.$clone();
                }
                return go;
            },
            /*GeneralBasics2d.createSpriteDude end.*/

            /*GeneralBasics2d.advancedExamples start.*/
            advancedExamples: function () {
if ( TRACE ) { TRACE( "GeneralBasics2d#advancedExamples", this ); }

                LeanTween.delayedCall$2(this.gameObject, 14.0, Bridge.fn.bind(this, function () {
                    for (var i = 0; i < 10; i = (i + 1) | 0) {
                        // Instantiate Container
                        var rotator = { v : new UnityEngine.GameObject.$ctor2("rotator" + i) };
                        rotator.v.transform.position = new pc.Vec3( 2.71208, 7.100643, -12.37754 );

                        // Instantiate Avatar
                        var dude = this.createSpriteDude("dude" + i, new pc.Vec3( -2.51208, 7.100643, -14.37754 ), false); //(GameObject)GameObject.Instantiate(prefabAvatar, Vector3.zero, prefabAvatar.transform.rotation );
                        dude.transform.parent = rotator.v.transform;
                        dude.transform.localPosition = new pc.Vec3( 0.0, 0.5, 0.5 * i );

                        // Scale, pop-in
                        dude.transform.localScale = new pc.Vec3( 0.0, 0.0, 0.0 );
                        LeanTween.scale$1(dude, new pc.Vec3( 0.65, 0.65, 0.65 ), 1.0).setDelay(i * 0.2).setEase(LeanTweenType.easeOutBack);

                        // Color like the rainbow
                        var period = LeanTween.tau / 10 * i;
                        var red = Math.sin(period + LeanTween.tau * 0.0 / 3.0) * 0.5 + 0.5;
                        var green = Math.sin(period + LeanTween.tau * 1.0 / 3.0) * 0.5 + 0.5;
                        var blue = Math.sin(period + LeanTween.tau * 2.0 / 3.0) * 0.5 + 0.5;
                        var rainbowColor = new pc.Color( red, green, blue, 1 );
                        LeanTween.color(dude, rainbowColor, 0.3).setDelay(1.2 + i * 0.4);

                        // Push into the wheel
                        LeanTween.moveLocalZ(dude, -2.0, 0.3).setDelay(1.2 + i * 0.4).setEase(LeanTweenType.easeSpring).setOnComplete((function ($me, rotator) {
                            return function () {
                                LeanTween.rotateAround(rotator.v, new pc.Vec3( 0, 0, 1 ), -1080.0, 12.0);
                            };
                        })(this, rotator));

                        // Jump Up and back down
                        LeanTween.moveLocalY(dude, 1.17, 1.2).setDelay(5.0 + i * 0.2).setLoopPingPong$1(1).setEase(LeanTweenType.easeInOutQuad);

                        // Alpha Out, and destroy
                        LeanTween.alpha$1(dude, 0.0, 0.6).setDelay(9.2 + i * 0.4).setDestroyOnComplete(true).setOnComplete((function ($me, rotator) {
                            return function () {
                                UnityEngine.MonoBehaviour.Destroy(rotator.v); // destroying parent as well
                            };
                        })(this, rotator));
                    }

                })).setOnCompleteOnStart(true).setRepeat(-1); // Have the OnComplete play in the beginning and have the whole group repeat endlessly
            },
            /*GeneralBasics2d.advancedExamples end.*/


        }
    });
    /*GeneralBasics2d end.*/

    /*GeneralCameraShake start.*/
    Bridge.define("GeneralCameraShake", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            avatarBig: null,
            jumpIter: 0,
            boomAudioClip: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GeneralCameraShake#init", this ); }

                this.jumpIter = 9.5;
            }
        },
        methods: {
            /*GeneralCameraShake.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralCameraShake#Start", this ); }

                this.avatarBig = UnityEngine.GameObject.Find("AvatarBig");

                var volumeCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(8.130963E-06, 0.06526042, 0.0, -1.0), new pc.Keyframe(0.0007692695, 2.449077, 9.078861, 9.078861), new pc.Keyframe(0.01541314, 0.9343268, -40.0, -40.0), new pc.Keyframe(0.05169491, 0.03835937, -0.08621139, -0.08621139) ]});
                var frequencyCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.003005181, 0.0, 0.0), new pc.Keyframe(0.01507768, 0.002227979, 0.0, 0.0) ]});
                //boomAudioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.1f,0f,0f)} ));


                this.bigGuyJump();
            },
            /*GeneralCameraShake.Start end.*/

            /*GeneralCameraShake.bigGuyJump start.*/
            bigGuyJump: function () {
if ( TRACE ) { TRACE( "GeneralCameraShake#bigGuyJump", this ); }

                var height = pc.noise.perlin2(this.jumpIter, 0.0) * 10.0;
                height = height * height * 0.3;
                // Debug.Log("height:"+height+" jumpIter:"+jumpIter);

                LeanTween.moveY(this.avatarBig, height, 1.0).setEase(LeanTweenType.easeInOutQuad).setOnComplete(Bridge.fn.bind(this, function () {
                    LeanTween.moveY(this.avatarBig, 0.0, 0.27).setEase(LeanTweenType.easeInQuad).setOnComplete(Bridge.fn.bind(this, function () {
                        var $t, $t1;
                        LeanTween.cancel$3(this.gameObject);

                        /* ************
                        				* Camera Shake
                        				**************/

                        var shakeAmt = height * 0.2; // the degrees to shake the camera
                        var shakePeriodTime = 0.42; // The period of each shake
                        var dropOffTime = 1.6; // How long it takes the shaking to settle down to nothing
                        var shakeTween = LeanTween.rotateAroundLocal(this.gameObject, pc.Vec3.RIGHT.clone(), shakeAmt, shakePeriodTime).setEase(LeanTweenType.easeShake).setLoopClamp().setRepeat(-1);

                        // Slow the camera shake down to zero
                        LeanTween.value$8(this.gameObject, shakeAmt, 0.0, dropOffTime).setOnUpdate(function (val) {
                            shakeTween.setTo$1(pc.Vec3.RIGHT.clone().clone().scale( val ));
                        }).setEase(LeanTweenType.easeOutQuad);


                        /* ******************
                        				* Shake scene objects
                        				********************/

                        // Make the boxes jump from the big stomping
                        var boxes = UnityEngine.GameObject.FindGameObjectsWithTag("Respawn"); // I just arbitrarily tagged the boxes with this since it was available in the scene
                        $t = Bridge.getEnumerator(boxes);
                        try {
                            while ($t.moveNext()) {
                                var box = $t.Current;
                                box.GetComponent(UnityEngine.Rigidbody).AddForce$1(pc.Vec3.UP.clone().clone().scale( 100 ).clone().scale( height ));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }

                        // Make the lamps spin from the big stomping
                        var lamps = UnityEngine.GameObject.FindGameObjectsWithTag("GameController"); // I just arbitrarily tagged the lamps with this since it was available in the scene
                        $t1 = Bridge.getEnumerator(lamps);
                        try {
                            while ($t1.moveNext()) {
                                var lamp = $t1.Current;
                                var z = lamp.transform.eulerAngles.z;
                                z = z > 0.0 && z < 180.0 ? 1 : -1; // push the lamps in whatever direction they are currently swinging
                                lamp.GetComponent(UnityEngine.Rigidbody).AddForce$1(new pc.Vec3( z, 0.0, 0.0 ).clone().scale( 15 ).clone().scale( height ));
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        // Play BOOM!
                        //LeanAudio.play(boomAudioClip, transform.position, height*0.2f); // Like this sound? : http://leanaudioplay.dentedpixel.com/?d=a:fvb:8,0,0.003005181,0,0,0.01507768,0.002227979,0,0,8~8,8.130963E-06,0.06526042,0,-1,0.0007692695,2.449077,9.078861,9.078861,0.01541314,0.9343268,-40,-40,0.05169491,0.03835937,-0.08621139,-0.08621139,8~0.1,0,0,~44100

                        // Have the jump happen again 2 seconds from now
                        LeanTween.delayedCall(2.0, Bridge.fn.cacheBind(this, this.bigGuyJump));
                    }));
                }));
                this.jumpIter += 5.2;
            },
            /*GeneralCameraShake.bigGuyJump end.*/


        }
    });
    /*GeneralCameraShake end.*/

    /*GeneralEasingTypes start.*/
    Bridge.define("GeneralEasingTypes", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            lineDrawScale: 0,
            animationCurve: null,
            easeTypes: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GeneralEasingTypes#init", this ); }

                this.lineDrawScale = 10.0;
                this.easeTypes = System.Array.init(["EaseLinear", "EaseAnimationCurve", "EaseSpring", "EaseInQuad", "EaseOutQuad", "EaseInOutQuad", "EaseInCubic", "EaseOutCubic", "EaseInOutCubic", "EaseInQuart", "EaseOutQuart", "EaseInOutQuart", "EaseInQuint", "EaseOutQuint", "EaseInOutQuint", "EaseInSine", "EaseOutSine", "EaseInOutSine", "EaseInExpo", "EaseOutExpo", "EaseInOutExpo", "EaseInCirc", "EaseOutCirc", "EaseInOutCirc", "EaseInBounce", "EaseOutBounce", "EaseInOutBounce", "EaseInBack", "EaseOutBack", "EaseInOutBack", "EaseInElastic", "EaseOutElastic", "EaseInOutElastic", "EasePunch", "EaseShake"], System.String);
            }
        },
        methods: {
            /*GeneralEasingTypes.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralEasingTypes#Start", this ); }


                this.demoEaseTypes();
            },
            /*GeneralEasingTypes.Start end.*/

            /*GeneralEasingTypes.demoEaseTypes start.*/
            demoEaseTypes: function () {
if ( TRACE ) { TRACE( "GeneralEasingTypes#demoEaseTypes", this ); }

                for (var i = 0; i < this.easeTypes.length; i = (i + 1) | 0) {
                    var easeName = this.easeTypes[i];
                    var obj1 = { v : UnityEngine.GameObject.Find(easeName).transform.Find("Line") };
                    var obj1val = { v : 0.0 };
                    var lt = LeanTween.value$8(obj1.v.gameObject, 0.0, 1.0, 5.0).setOnUpdate((function ($me, obj1, obj1val) {
                        return Bridge.fn.bind($me, function (val) {
                            var vec = obj1.v.localPosition.$clone();
                            vec.x = obj1val.v * this.lineDrawScale;
                            vec.y = val * this.lineDrawScale;

                            obj1.v.localPosition = vec.$clone();

                            obj1val.v += UnityEngine.Time.deltaTime / 5.0;
                            if (obj1val.v > 1.0) {
                                obj1val.v = 0.0;
                            }
                        });
                    })(this, obj1, obj1val));
                    if (System.String.indexOf(easeName, "AnimationCurve") >= 0) {
                        lt.setEase$1(this.animationCurve);
                    } else {
                        var theMethod = Bridge.Reflection.getMembers(Bridge.getType(lt), 8, 284, "set" + (easeName || ""));
                        Bridge.Reflection.midel(theMethod, lt, null)(null);
                    }

                    if (System.String.indexOf(easeName, "EasePunch") >= 0) {
                        lt.setScale$1(1.0);
                    } else if (System.String.indexOf(easeName, "EaseOutBounce") >= 0) {
                        lt.setOvershoot(2.0);
                    }
                }

                LeanTween.delayedCall$2(this.gameObject, 10.0, Bridge.fn.cacheBind(this, this.resetLines));
                LeanTween.delayedCall$2(this.gameObject, 10.1, Bridge.fn.cacheBind(this, this.demoEaseTypes));
            },
            /*GeneralEasingTypes.demoEaseTypes end.*/

            /*GeneralEasingTypes.resetLines start.*/
            resetLines: function () {
if ( TRACE ) { TRACE( "GeneralEasingTypes#resetLines", this ); }

                for (var i = 0; i < this.easeTypes.length; i = (i + 1) | 0) {
                    var obj1 = UnityEngine.GameObject.Find(this.easeTypes[i]).transform.Find("Line");
                    obj1.localPosition = new pc.Vec3( 0.0, 0.0, 0.0 );
                }
            },
            /*GeneralEasingTypes.resetLines end.*/


        }
    });
    /*GeneralEasingTypes end.*/

    /*GeneralEventsListeners start.*/
    Bridge.define("GeneralEventsListeners", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            towardsRotation: null,
            turnForLength: 0,
            turnForIter: 0,
            fromColor: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GeneralEventsListeners#init", this ); }

                this.towardsRotation = new UnityEngine.Vector3();
                this.fromColor = new UnityEngine.Color();
                this.turnForLength = 0.5;
                this.turnForIter = 0.0;
            }
        },
        methods: {
            /*GeneralEventsListeners.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "GeneralEventsListeners#Awake", this ); }

                LeanTween.LISTENERS_MAX = 100; // This is the maximum of event listeners you will have added as listeners
                LeanTween.EVENTS_MAX = GeneralEventsListeners.MyEvents.LENGTH; // The maximum amount of events you will be dispatching

                this.fromColor = this.GetComponent(UnityEngine.Renderer).material.color.$clone();
            },
            /*GeneralEventsListeners.Awake end.*/

            /*GeneralEventsListeners.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralEventsListeners#Start", this ); }

                // Adding Listeners, it's best to use an enum so your listeners are more descriptive but you could use an int like 0,1,2,...
                LeanTween.addListener$1(this.gameObject, GeneralEventsListeners.MyEvents.CHANGE_COLOR, Bridge.fn.cacheBind(this, this.changeColor));
                LeanTween.addListener$1(this.gameObject, GeneralEventsListeners.MyEvents.JUMP, Bridge.fn.cacheBind(this, this.jumpUp));
            },
            /*GeneralEventsListeners.Start end.*/

            /*GeneralEventsListeners.jumpUp start.*/
            jumpUp: function (e) {
if ( TRACE ) { TRACE( "GeneralEventsListeners#jumpUp", this ); }

                this.GetComponent(UnityEngine.Rigidbody).AddRelativeForce$1(new pc.Vec3( 0, 0, 1 ).clone().scale( 300.0 ));
            },
            /*GeneralEventsListeners.jumpUp end.*/

            /*GeneralEventsListeners.changeColor start.*/
            changeColor: function (e) {
if ( TRACE ) { TRACE( "GeneralEventsListeners#changeColor", this ); }

                var tran = Bridge.cast(e.data, UnityEngine.Transform);
                var distance = pc.Vec3.distance( tran.position, this.transform.position );
                var to = new pc.Color( UnityEngine.Random.Range$1(0.0, 1.0), 0.0, UnityEngine.Random.Range$1(0.0, 1.0), 1 );
                LeanTween.value$9(this.gameObject, this.fromColor, to, 0.8).setLoopPingPong$1(1).setDelay(distance * 0.05).setOnUpdate$1(Bridge.fn.bind(this, function (col) {
                    this.GetComponent(UnityEngine.Renderer).material.color = col.$clone();
                }));
            },
            /*GeneralEventsListeners.changeColor end.*/

            /*GeneralEventsListeners.OnCollisionEnter start.*/
            OnCollisionEnter: function (collision) {
if ( TRACE ) { TRACE( "GeneralEventsListeners#OnCollisionEnter", this ); }

                if (collision.gameObject.layer !== 2) {
                    this.towardsRotation = new pc.Vec3( 0.0, UnityEngine.Random.Range(-180, 180), 0.0 );
                }
            },
            /*GeneralEventsListeners.OnCollisionEnter end.*/

            /*GeneralEventsListeners.OnCollisionStay start.*/
            OnCollisionStay: function (collision) {
if ( TRACE ) { TRACE( "GeneralEventsListeners#OnCollisionStay", this ); }

                if (collision.gameObject.layer !== 2) {
                    this.turnForIter = 0.0;
                    this.turnForLength = UnityEngine.Random.Range$1(0.5, 1.5);
                }
            },
            /*GeneralEventsListeners.OnCollisionStay end.*/

            /*GeneralEventsListeners.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "GeneralEventsListeners#FixedUpdate", this ); }

                var $t;
                if (this.turnForIter < this.turnForLength) {
                    this.GetComponent(UnityEngine.Rigidbody).MoveRotation(this.GetComponent(UnityEngine.Rigidbody).rotation.clone().mul( ($t = this.towardsRotation.$clone().clone().scale( UnityEngine.Time.deltaTime ), new pc.Quat().setFromEulerAngles_Unity( $t.x, $t.y, $t.z )) ));
                    this.turnForIter += UnityEngine.Time.deltaTime;
                }

                this.GetComponent(UnityEngine.Rigidbody).AddRelativeForce$1(new pc.Vec3( 0, 0, 1 ).clone().scale( 4.5 ));
            },
            /*GeneralEventsListeners.FixedUpdate end.*/

            /*GeneralEventsListeners.OnMouseDown start.*/
            OnMouseDown: function () {
if ( TRACE ) { TRACE( "GeneralEventsListeners#OnMouseDown", this ); }

                if (UnityEngine.Input.GetKey(UnityEngine.KeyCode.J)) { // Are you also pressing the "j" key while clicking
                    LeanTween.dispatchEvent(GeneralEventsListeners.MyEvents.JUMP);
                } else {
                    LeanTween.dispatchEvent$1(GeneralEventsListeners.MyEvents.CHANGE_COLOR, this.transform); // with every dispatched event, you can include an object (retrieve this object with the *.data var in LTEvent)
                }
            },
            /*GeneralEventsListeners.OnMouseDown end.*/


        }
    });
    /*GeneralEventsListeners end.*/

    /*GeneralEventsListeners+MyEvents start.*/
    Bridge.define("GeneralEventsListeners.MyEvents", {
        $kind: 1006,
        statics: {
            fields: {
                CHANGE_COLOR: 0,
                JUMP: 1,
                LENGTH: 2
            }
        }
    });
    /*GeneralEventsListeners+MyEvents end.*/

    /*GeneralSequencer start.*/
    Bridge.define("GeneralSequencer", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            avatar1: null,
            star: null,
            dustCloudPrefab: null,
            speedScale: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GeneralSequencer#init", this ); }

                this.speedScale = 1.0;
            }
        },
        methods: {
            /*GeneralSequencer.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralSequencer#Start", this ); }


                // Jump up
                var seq = LeanTween.sequence();


                seq.append(LeanTween.moveY(this.avatar1, this.avatar1.transform.localPosition.y + 6.0, 1.0).setEaseOutQuad());

                // Power up star, use insert when you want to branch off from the regular sequence (this does not push back the delay of other subsequent tweens)
                seq.insert(LeanTween.alpha$1(this.star, 0.0, 1.0));
                seq.insert(LeanTween.scale$1(this.star, new pc.Vec3( 1, 1, 1 ).clone().scale( 3.0 ), 1.0));

                // Rotate 360
                seq.append(LeanTween.rotateAround(this.avatar1, new pc.Vec3( 0, 0, 1 ), 360.0, 0.6).setEaseInBack());

                // Return to ground
                seq.append(LeanTween.moveY(this.avatar1, this.avatar1.transform.localPosition.y, 1.0).setEaseInQuad());

                // Kick off spiraling clouds - Example of appending a callback method
                seq.append$1(Bridge.fn.bind(this, function () {
                    for (var i = 0; i < 50.0; i = (i + 1) | 0) {
                        var cloud = UnityEngine.Object.Instantiate(UnityEngine.GameObject, this.dustCloudPrefab);
                        cloud.transform.parent = this.avatar1.transform;
                        cloud.transform.localPosition = new pc.Vec3( UnityEngine.Random.Range$1(-2.0, 2.0), 0.0, 0.0 );
                        cloud.transform.eulerAngles = new pc.Vec3( 0.0, 0.0, UnityEngine.Random.Range$1(0, 360.0) );

                        var range = new pc.Vec3( cloud.transform.localPosition.x, UnityEngine.Random.Range$1(2.0, 4.0), UnityEngine.Random.Range$1(-10.0, 10.0) );

                        // Tweens not in a sequence, because we want them all to animate at the same time
                        LeanTween.moveLocal$2(cloud, range, 3.0 * this.speedScale).setEaseOutCirc();
                        LeanTween.rotateAround(cloud, new pc.Vec3( 0, 0, 1 ), 720.0, 3.0 * this.speedScale).setEaseOutCirc();
                        LeanTween.alpha$1(cloud, 0.0, 3.0 * this.speedScale).setEaseOutCirc().setDestroyOnComplete(true);
                    }
                }));

                // You can speed up or slow down the sequence of events
                seq.setScale(this.speedScale);

                // seq.reverse(); // not working yet

                // Testing canceling sequence after a bit of time
                //LeanTween.delayedCall(3f, () =>
                //{
                //    LeanTween.cancel(seq.id);
                //});
            },
            /*GeneralSequencer.Start end.*/


        }
    });
    /*GeneralSequencer end.*/

    /*GeneralSimpleUI start.*/
    Bridge.define("GeneralSimpleUI", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            button: null
        },
        methods: {
            /*GeneralSimpleUI.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralSimpleUI#Start", this ); }

                UnityEngine.Debug.Log$1("For better examples see the 4.6_Examples folder!");
                if (UnityEngine.Component.op_Equality(this.button, null)) {
                    UnityEngine.Debug.LogError$2("Button not assigned! Create a new button via Hierarchy->Create->UI->Button. Then assign it to the button variable");
                    return;
                }

                // Tweening various values in a block callback style
                LeanTween.value$10(this.button.gameObject, this.button.anchoredPosition, new pc.Vec2( 200.0, 100.0 ), 1.0).setOnUpdate$2(Bridge.fn.bind(this, function (val) {
                    this.button.anchoredPosition = val.$clone();
                }));

                LeanTween.value$8(this.gameObject, 1.0, 0.5, 1.0).setOnUpdate(function (volume) {
                    UnityEngine.Debug.Log$1("volume:" + System.Single.format(volume));
                });

                LeanTween.value$11(this.gameObject, this.gameObject.transform.position, this.gameObject.transform.position.$clone().add( new pc.Vec3( 0, 1.0, 0 ) ), 1.0).setOnUpdate$3(Bridge.fn.bind(this, function (val) {
                    this.gameObject.transform.position = val.$clone();
                }));

                LeanTween.value$9(this.gameObject, new pc.Color( 1, 0, 0, 1 ), new pc.Color( 0, 1, 0, 1 ), 1.0).setOnUpdate$1(Bridge.fn.bind(this, function (val) {
                    var image = Bridge.cast(this.button.gameObject.GetComponent$1(UnityEngine.UI.Image), UnityEngine.UI.Image);
                    image.color = val.$clone();
                }));

                // Tweening Using Unity's new Canvas GUI System
                LeanTween.move$7(this.button, new pc.Vec3( 200.0, -100.0, 0.0 ), 1.0).setDelay(1.0);
                LeanTween.rotateAround$1(this.button, new pc.Vec3( 0, 0, 1 ), 90.0, 1.0).setDelay(2.0);
                LeanTween.scale$2(this.button, this.button.localScale.$clone().clone().scale( 2.0 ), 1.0).setDelay(3.0);
                LeanTween.rotateAround$1(this.button, new pc.Vec3( 0, 0, 1 ), -90.0, 1.0).setDelay(4.0).setEase(LeanTweenType.easeInOutElastic);
            },
            /*GeneralSimpleUI.Start end.*/


        }
    });
    /*GeneralSimpleUI end.*/

    /*GeneralUISpace start.*/
    Bridge.define("GeneralUISpace", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            mainWindow: null,
            mainParagraphText: null,
            mainTitleText: null,
            mainButton1: null,
            mainButton2: null,
            pauseRing1: null,
            pauseRing2: null,
            pauseWindow: null,
            chatWindow: null,
            chatRect: null,
            chatSprites: null,
            chatBar1: null,
            chatBar2: null,
            chatText: null,
            rawImageRect: null
        },
        methods: {
            /*GeneralUISpace.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GeneralUISpace#Start", this ); }

                // Time.timeScale = 1f/4f;

                // *********** Main Window **********
                // Scale the whole window in
                this.mainWindow.localScale = pc.Vec3.ZERO.clone();
                LeanTween.scale$2(this.mainWindow, new pc.Vec3( 1.0, 1.0, 1.0 ), 0.6).setEase(LeanTweenType.easeOutBack);
                LeanTween.alphaCanvas(this.mainWindow.GetComponent(UnityEngine.CanvasGroup), 0.0, 1.0).setDelay(2.0).setLoopPingPong().setRepeat(2);

                // Fade the main paragraph in while moving upwards
                this.mainParagraphText.anchoredPosition3D = this.mainParagraphText.anchoredPosition3D.$clone().add( new pc.Vec3( 0.0, -10.0, 0.0 ) );
                LeanTween.textAlpha(this.mainParagraphText, 0.0, 0.6).setFrom(0.0).setDelay(0.0);
                LeanTween.textAlpha(this.mainParagraphText, 1.0, 0.6).setEase(LeanTweenType.easeOutQuad).setDelay(0.6);
                LeanTween.move$7(this.mainParagraphText, this.mainParagraphText.anchoredPosition3D.$clone().add( new pc.Vec3( 0.0, 10.0, 0.0 ) ), 0.6).setEase(LeanTweenType.easeOutQuad).setDelay(0.6);

                // Flash text to purple and back
                LeanTween.textColor(this.mainTitleText, new pc.Color( 0.521568656, 0.5686275, 0.8745098, 1 ), 0.6).setEase(LeanTweenType.easeOutQuad).setDelay(0.6).setLoopPingPong().setRepeat(-1);

                // Fade button in
                LeanTween.textAlpha(this.mainButton2, 1.0, 2.0).setFrom(0.0).setDelay(0.0).setEase(LeanTweenType.easeOutQuad);
                LeanTween.alpha$2(this.mainButton2, 1.0, 2.0).setFrom(0.0).setDelay(0.0).setEase(LeanTweenType.easeOutQuad);

                // Pop size of button
                LeanTween.size(this.mainButton1, this.mainButton1.sizeDelta.$clone().scale( 1.1 ), 0.5).setDelay(3.0).setEaseInOutCirc().setRepeat(6).setLoopPingPong();


                // *********** Pause Button **********
                // Drop pause button in
                this.pauseWindow.anchoredPosition3D = this.pauseWindow.anchoredPosition3D.$clone().add( new pc.Vec3( 0.0, 200.0, 0.0 ) );
                LeanTween.moveY$1(this.pauseWindow, this.pauseWindow.anchoredPosition3D.y + -200.0, 0.6).setEase(LeanTweenType.easeOutSine).setDelay(0.6);

                // Punch Pause Symbol
                var pauseText = this.pauseWindow.Find("PauseText").GetComponent(UnityEngine.RectTransform);
                LeanTween.moveZ$1(pauseText, pauseText.anchoredPosition3D.z - 80.0, 1.5).setEase(LeanTweenType.punch).setDelay(2.0);

                // Rotate rings around in opposite directions
                LeanTween.rotateAroundLocal$1(this.pauseRing1, new pc.Vec3( 0, 0, 1 ), 360.0, 12.0).setRepeat(-1);
                LeanTween.rotateAroundLocal$1(this.pauseRing2, new pc.Vec3( 0, 0, 1 ), -360.0, 22.0).setRepeat(-1);


                // *********** Chat Window **********
                // Flip the chat window in
                this.chatWindow.RotateAround(this.chatWindow.position.$clone(), pc.Vec3.UP.clone(), -180.0);
                LeanTween.rotateAround$1(this.chatWindow, pc.Vec3.UP.clone(), 180.0, 2.0).setEase(LeanTweenType.easeOutElastic).setDelay(1.2);

                // Play a series of sprites on the window on repeat endlessly
                LeanTween.play(this.chatRect, this.chatSprites).setLoopPingPong();

                // Animate the bar up and down while changing the color to red-ish
                LeanTween.color$1(this.chatBar2, new pc.Color( 0.972549, 0.2627451, 0.423529416, 0.5 ), 1.2).setEase(LeanTweenType.easeInQuad).setLoopPingPong().setDelay(1.2);
                LeanTween.scale$2(this.chatBar2, UnityEngine.Vector3.FromVector2(new pc.Vec2( 1.0, 0.7 )), 1.2).setEase(LeanTweenType.easeInQuad).setLoopPingPong();

                // Write in paragraph text
                var origText = this.chatText.text;
                this.chatText.text = "";
                LeanTween.value$8(this.gameObject, 0, origText.length, 6.0).setEase(LeanTweenType.easeOutQuad).setOnUpdate(Bridge.fn.bind(this, function (val) {
                    this.chatText.text = origText.substr(0, Math.round(val));
                })).setLoopClamp().setDelay(2.0);

                // Raw Image
                LeanTween.alpha$2(this.rawImageRect, 0.0, 1.0).setLoopPingPong();
            },
            /*GeneralUISpace.Start end.*/


        }
    });
    /*GeneralUISpace end.*/

    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty start.*/
    Bridge.define("IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty", {
        inherits: [UnityEngine.MonoBehaviour]
    });
    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty end.*/

    /*JsonArray start.*/
    Bridge.define("JsonArray", {
        statics: {
            methods: {
                /*JsonArray.FromJson:static start.*/
                FromJson: function (T, json) {
if ( TRACE ) { TRACE( "JsonArray#FromJson", this ); }

                    var wrapper = UnityEngine.JsonUtility.FromJson(JsonArray.Wrapper$1(T), json);

                    return wrapper.private_ad;
                },
                /*JsonArray.FromJson:static end.*/

                /*JsonArray.ToJson:static start.*/
                ToJson: function (T, array) {
if ( TRACE ) { TRACE( "JsonArray#ToJson", this ); }

                    var wrapper = new (JsonArray.Wrapper$1(T))();
                    wrapper.private_ad = array;
                    return UnityEngine.JsonUtility.ToJson(wrapper);
                },
                /*JsonArray.ToJson:static end.*/


            }
        }
    });
    /*JsonArray end.*/

    /*JsonArray+Wrapper$1 start.*/
    Bridge.define("JsonArray.Wrapper$1", function (T) { return {
        $kind: 1002,
        fields: {
            private_ad: null
        }
    }; });
    /*JsonArray+Wrapper$1 end.*/

    /*LayoutSupportDisplay start.*/
    Bridge.define("LayoutSupportDisplay", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            layoutSupportType: 0,
            rectTarget: null,
            layoutNormalRatio: null,
            layoutLarge2Ratio: null,
            layoutEqual2Ratio: null,
            layoutTabletRatio: null,
            layoutGroupNormalRatio: null,
            layoutGroupLarge2Ratio: null,
            layoutGroupEqual2Ratio: null,
            layoutGroupTabletRatio: null,
            gridLayoutGroupNormalRatio: null,
            gridLayoutGroupLarge2Ratio: null,
            gridLayoutGroupEqual2Ratio: null,
            gridLayoutGroupTabletRatio: null,
            isUpdate: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#init", this ); }

                this.isUpdate = false;
            }
        },
        methods: {
            /*LayoutSupportDisplay.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#Start", this ); }




                this.SetUp();

            },
            /*LayoutSupportDisplay.Start end.*/

            /*LayoutSupportDisplay.SetUp start.*/
            SetUp: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#SetUp", this ); }

                switch (this.layoutSupportType) {
                    case LayoutSupportType.LayoutElement: 
                        var layoutElement = this.GetComponent(UnityEngine.UI.LayoutElement);
                        if (RatioResolution.GetResolution() > 2) {
                            if (this.layoutLarge2Ratio.useDefaultValue) {
                                return;
                            }

                            this.SetUpLayoutElement(layoutElement, this.layoutLarge2Ratio);

                        } else if (Math.floor(RatioResolution.GetResolution()) === 2) {
                            if (this.layoutEqual2Ratio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutElement(layoutElement, this.layoutEqual2Ratio);
                        } else if (RatioResolution.GetResolution() <= 1.5) {
                            if (this.layoutTabletRatio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutElement(layoutElement, this.layoutTabletRatio);
                        } else {
                            if (this.layoutNormalRatio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutElement(layoutElement, this.layoutNormalRatio);
                        }
                        break;
                    case LayoutSupportType.HorizontalOrVerticalLayoutGroup: 
                        var horizontalOrVerticalLayoutGroup = this.GetComponent(UnityEngine.UI.HorizontalOrVerticalLayoutGroup);
                        if (RatioResolution.GetResolution() > 2) {
                            if (this.layoutGroupLarge2Ratio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutGroup(horizontalOrVerticalLayoutGroup, this.layoutGroupLarge2Ratio);

                        } else if (Math.floor(RatioResolution.GetResolution()) === 2) {
                            if (this.layoutGroupEqual2Ratio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutGroup(horizontalOrVerticalLayoutGroup, this.layoutGroupEqual2Ratio);
                        } else if (RatioResolution.GetResolution() <= 1.5) {
                            if (this.layoutGroupTabletRatio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutGroup(horizontalOrVerticalLayoutGroup, this.layoutGroupTabletRatio);
                        } else {
                            if (this.layoutGroupNormalRatio.useDefaultValue) {
                                return;
                            }
                            this.SetUpLayoutGroup(horizontalOrVerticalLayoutGroup, this.layoutGroupNormalRatio);
                        }
                        break;
                    case LayoutSupportType.GirdLayOutGroup: 
                        var gridLayoutGroup = this.GetComponent(UnityEngine.UI.GridLayoutGroup);
                        if (RatioResolution.GetResolution() > 2) {
                            if (this.gridLayoutGroupLarge2Ratio.useDefaultValue) {
                                return;
                            }
                            this.SetUpGridLayoutGroup(gridLayoutGroup, this.gridLayoutGroupLarge2Ratio);

                        } else if (Math.floor(RatioResolution.GetResolution()) === 2) {
                            if (this.gridLayoutGroupEqual2Ratio.useDefaultValue) {
                                return;
                            }
                            this.SetUpGridLayoutGroup(gridLayoutGroup, this.gridLayoutGroupEqual2Ratio);
                        } else if (RatioResolution.GetResolution() <= 1.5) {

                            if (this.gridLayoutGroupTabletRatio.useDefaultValue) {
                                return;
                            }
                            this.SetUpGridLayoutGroup(gridLayoutGroup, this.gridLayoutGroupTabletRatio);
                        } else {
                            if (this.gridLayoutGroupNormalRatio.useDefaultValue) {
                                return;
                            }
                            this.SetUpGridLayoutGroup(gridLayoutGroup, this.gridLayoutGroupNormalRatio);
                        }
                        break;
                }
            },
            /*LayoutSupportDisplay.SetUp end.*/

            /*LayoutSupportDisplay.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#Update", this ); }

                if (!this.isUpdate) {
                    return;
                }
                this.Start();
            },
            /*LayoutSupportDisplay.Update end.*/

            /*LayoutSupportDisplay.SetUpLayoutElement start.*/
            SetUpLayoutElement: function (layoutElement, value) {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#SetUpLayoutElement", this ); }



                if (value.useRateRect) {
                    this.isUpdate = true;
                    layoutElement.minHeight = this.rectTarget.rect.height / (value.minHeight === 0 ? this.rectTarget.rect.height : value.minHeight);
                    layoutElement.minWidth = this.rectTarget.rect.width / value.minWidth;
                } else {
                    layoutElement.minHeight = value.minHeight;
                    layoutElement.minWidth = value.minWidth;
                }
            },
            /*LayoutSupportDisplay.SetUpLayoutElement end.*/

            /*LayoutSupportDisplay.SetUpLayoutGroup start.*/
            SetUpLayoutGroup: function (layoutGroup, value) {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#SetUpLayoutGroup", this ); }


                layoutGroup.padding.left = value.left;
                layoutGroup.padding.right = value.right;
                layoutGroup.padding.top = value.top;
                layoutGroup.padding.bottom = value.bottom;
                layoutGroup.spacing = value.spacing;
            },
            /*LayoutSupportDisplay.SetUpLayoutGroup end.*/

            /*LayoutSupportDisplay.SetUpGridLayoutGroup start.*/
            SetUpGridLayoutGroup: function (gridLayoutGroup, value) {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#SetUpGridLayoutGroup", this ); }


                gridLayoutGroup.padding.left = value.left;
                gridLayoutGroup.padding.right = value.right;
                gridLayoutGroup.padding.top = value.top;
                gridLayoutGroup.padding.bottom = value.bottom;
                gridLayoutGroup.spacing = value.spacing.$clone();
                gridLayoutGroup.cellSize = value.cellsize.$clone();
            },
            /*LayoutSupportDisplay.SetUpGridLayoutGroup end.*/

            /*LayoutSupportDisplay.WindowChangeStart start.*/
            WindowChangeStart: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#WindowChangeStart", this ); }

                this.SetUp();
            },
            /*LayoutSupportDisplay.WindowChangeStart end.*/

            /*LayoutSupportDisplay.WindowChangeUpdate start.*/
            WindowChangeUpdate: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay#WindowChangeUpdate", this ); }
 },
            /*LayoutSupportDisplay.WindowChangeUpdate end.*/


        }
    });
    /*LayoutSupportDisplay end.*/

    /*LayoutSupportDisplay+GridLayoutGroupValue start.*/
    Bridge.define("LayoutSupportDisplay.GridLayoutGroupValue", {
        $kind: 1002,
        fields: {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            cellsize: null,
            spacing: null,
            useDefaultValue: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay.GridLayoutGroupValue#init", this ); }

                this.cellsize = new UnityEngine.Vector2();
                this.spacing = new UnityEngine.Vector2();
                this.left = 0;
                this.right = 0;
                this.top = 0;
                this.bottom = 0;
                this.cellsize = pc.Vec2.ZERO.clone();
                this.spacing = pc.Vec2.ZERO.clone();
                this.useDefaultValue = true;
            }
        }
    });
    /*LayoutSupportDisplay+GridLayoutGroupValue end.*/

    /*LayoutSupportDisplay+HorizontalOrVerticalLayoutValue start.*/
    Bridge.define("LayoutSupportDisplay.HorizontalOrVerticalLayoutValue", {
        $kind: 1002,
        fields: {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            spacing: 0,
            useDefaultValue: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay.HorizontalOrVerticalLayoutValue#init", this ); }

                this.left = 0;
                this.right = 0;
                this.top = 0;
                this.bottom = 0;
                this.spacing = 0;
                this.useDefaultValue = true;
            }
        }
    });
    /*LayoutSupportDisplay+HorizontalOrVerticalLayoutValue end.*/

    /*LayoutSupportDisplay+LayoutValue start.*/
    Bridge.define("LayoutSupportDisplay.LayoutValue", {
        $kind: 1002,
        fields: {
            minWidth: 0,
            minHeight: 0,
            useDefaultValue: false,
            useRateRect: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LayoutSupportDisplay.LayoutValue#init", this ); }

                this.minWidth = 0;
                this.minHeight = 0;
                this.useDefaultValue = true;
                this.useRateRect = false;
            }
        }
    });
    /*LayoutSupportDisplay+LayoutValue end.*/

    /*LayoutSupportType start.*/
    Bridge.define("LayoutSupportType", {
        $kind: 6,
        statics: {
            fields: {
                LayoutElement: 0,
                HorizontalOrVerticalLayoutGroup: 1,
                GirdLayOutGroup: 2
            }
        }
    });
    /*LayoutSupportType end.*/

    /*LeanProp start.*/
    Bridge.define("LeanProp", {
        $kind: 6,
        statics: {
            fields: {
                position: 0,
                localPosition: 1,
                x: 2,
                y: 3,
                z: 4,
                localX: 5,
                localY: 6,
                localZ: 7,
                scale: 8,
                color: 9
            }
        }
    });
    /*LeanProp end.*/

    /*LeanSmooth start.*/
    Bridge.define("LeanSmooth", {
        statics: {
            methods: {
                /*LeanSmooth.damp:static start.*/
                damp: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime) {
if ( TRACE ) { TRACE( "LeanSmooth#damp", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (deltaTime < 0.0) {
                        deltaTime = UnityEngine.Time.deltaTime;
                    }

                    smoothTime = UnityEngine.Mathf.Max(0.0001, smoothTime);
                    var num = 2.0 / smoothTime;
                    var num2 = num * deltaTime;
                    var num3 = 1.0 / (1.0 + num2 + 0.48 * num2 * num2 + 0.235 * num2 * num2 * num2);
                    var num4 = current - target;
                    var num5 = target;
                    if (maxSpeed > 0.0) {
                        var num6 = maxSpeed * smoothTime;
                        num4 = Math.max(-num6, Math.min(num4, num6));
                    }
                    target = current - num4;
                    var num7 = (currentVelocity.v + num * num4) * deltaTime;
                    currentVelocity.v = (currentVelocity.v - num * num7) * num3;
                    var num8 = target + (num4 + num7) * num3;
                    if (num5 - current > 0.0 === num8 > num5) {
                        num8 = num5;
                        currentVelocity.v = (num8 - num5) / deltaTime;
                    }
                    return num8;
                },
                /*LeanSmooth.damp:static end.*/

                /*LeanSmooth.damp$2:static start.*/
                damp$2: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime) {
if ( TRACE ) { TRACE( "LeanSmooth#damp$2", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    var x = LeanSmooth.damp(current.x, target.x, Bridge.ref(currentVelocity.v, "x"), smoothTime, maxSpeed, deltaTime);
                    var y = LeanSmooth.damp(current.y, target.y, Bridge.ref(currentVelocity.v, "y"), smoothTime, maxSpeed, deltaTime);
                    var z = LeanSmooth.damp(current.z, target.z, Bridge.ref(currentVelocity.v, "z"), smoothTime, maxSpeed, deltaTime);

                    return new pc.Vec3( x, y, z );
                },
                /*LeanSmooth.damp$2:static end.*/

                /*LeanSmooth.damp$1:static start.*/
                damp$1: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime) {
if ( TRACE ) { TRACE( "LeanSmooth#damp$1", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    var r = LeanSmooth.damp(current.r, target.r, Bridge.ref(currentVelocity.v, "r"), smoothTime, maxSpeed, deltaTime);
                    var g = LeanSmooth.damp(current.g, target.g, Bridge.ref(currentVelocity.v, "g"), smoothTime, maxSpeed, deltaTime);
                    var b = LeanSmooth.damp(current.b, target.b, Bridge.ref(currentVelocity.v, "b"), smoothTime, maxSpeed, deltaTime);
                    var a = LeanSmooth.damp(current.a, target.a, Bridge.ref(currentVelocity.v, "a"), smoothTime, maxSpeed, deltaTime);

                    return new pc.Color( r, g, b, a );
                },
                /*LeanSmooth.damp$1:static end.*/

                /*LeanSmooth.spring:static start.*/
                spring: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime, friction, accelRate) {
if ( TRACE ) { TRACE( "LeanSmooth#spring", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    if (deltaTime < 0.0) {
                        deltaTime = UnityEngine.Time.deltaTime;
                    }

                    var diff = target - current;

                    currentVelocity.v += deltaTime / smoothTime * accelRate * diff;

                    currentVelocity.v *= (1.0 - deltaTime * friction);

                    if (maxSpeed > 0.0 && maxSpeed < Math.abs(currentVelocity.v)) {
                        currentVelocity.v = maxSpeed * (currentVelocity.v === 0 ? 1 : Math.sign(currentVelocity.v));
                    }

                    var returned = current + currentVelocity.v;

                    return returned;
                },
                /*LeanSmooth.spring:static end.*/

                /*LeanSmooth.spring$2:static start.*/
                spring$2: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime, friction, accelRate) {
if ( TRACE ) { TRACE( "LeanSmooth#spring$2", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    var x = LeanSmooth.spring(current.x, target.x, Bridge.ref(currentVelocity.v, "x"), smoothTime, maxSpeed, deltaTime, friction, accelRate);
                    var y = LeanSmooth.spring(current.y, target.y, Bridge.ref(currentVelocity.v, "y"), smoothTime, maxSpeed, deltaTime, friction, accelRate);
                    var z = LeanSmooth.spring(current.z, target.z, Bridge.ref(currentVelocity.v, "z"), smoothTime, maxSpeed, deltaTime, friction, accelRate);

                    return new pc.Vec3( x, y, z );
                },
                /*LeanSmooth.spring$2:static end.*/

                /*LeanSmooth.spring$1:static start.*/
                spring$1: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime, friction, accelRate) {
if ( TRACE ) { TRACE( "LeanSmooth#spring$1", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    var r = LeanSmooth.spring(current.r, target.r, Bridge.ref(currentVelocity.v, "r"), smoothTime, maxSpeed, deltaTime, friction, accelRate);
                    var g = LeanSmooth.spring(current.g, target.g, Bridge.ref(currentVelocity.v, "g"), smoothTime, maxSpeed, deltaTime, friction, accelRate);
                    var b = LeanSmooth.spring(current.b, target.b, Bridge.ref(currentVelocity.v, "b"), smoothTime, maxSpeed, deltaTime, friction, accelRate);
                    var a = LeanSmooth.spring(current.a, target.a, Bridge.ref(currentVelocity.v, "a"), smoothTime, maxSpeed, deltaTime, friction, accelRate);

                    return new pc.Color( r, g, b, a );
                },
                /*LeanSmooth.spring$1:static end.*/

                /*LeanSmooth.linear:static start.*/
                linear: function (current, target, moveSpeed, deltaTime) {
if ( TRACE ) { TRACE( "LeanSmooth#linear", this ); }

                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (deltaTime < 0.0) {
                        deltaTime = UnityEngine.Time.deltaTime;
                    }

                    var targetGreater = (target > current);

                    var currentVelocity = deltaTime * moveSpeed * (targetGreater ? 1.0 : -1.0);

                    var returned = current + currentVelocity;

                    var returnPassed = returned - target;
                    if ((targetGreater && returnPassed > 0) || !targetGreater && returnPassed < 0) { // Has passed point, return target
                        return target;
                    }

                    return returned;
                },
                /*LeanSmooth.linear:static end.*/

                /*LeanSmooth.linear$2:static start.*/
                linear$2: function (current, target, moveSpeed, deltaTime) {
if ( TRACE ) { TRACE( "LeanSmooth#linear$2", this ); }

                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    var x = LeanSmooth.linear(current.x, target.x, moveSpeed, deltaTime);
                    var y = LeanSmooth.linear(current.y, target.y, moveSpeed, deltaTime);
                    var z = LeanSmooth.linear(current.z, target.z, moveSpeed, deltaTime);

                    return new pc.Vec3( x, y, z );
                },
                /*LeanSmooth.linear$2:static end.*/

                /*LeanSmooth.linear$1:static start.*/
                linear$1: function (current, target, moveSpeed) {
if ( TRACE ) { TRACE( "LeanSmooth#linear$1", this ); }

                    var r = LeanSmooth.linear(current.r, target.r, moveSpeed);
                    var g = LeanSmooth.linear(current.g, target.g, moveSpeed);
                    var b = LeanSmooth.linear(current.b, target.b, moveSpeed);
                    var a = LeanSmooth.linear(current.a, target.a, moveSpeed);

                    return new pc.Color( r, g, b, a );
                },
                /*LeanSmooth.linear$1:static end.*/

                /*LeanSmooth.bounceOut:static start.*/
                bounceOut: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping) {
if ( TRACE ) { TRACE( "LeanSmooth#bounceOut", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    if (hitDamping === void 0) { hitDamping = 0.9; }
                    if (deltaTime < 0.0) {
                        deltaTime = UnityEngine.Time.deltaTime;
                    }

                    var diff = target - current;

                    currentVelocity.v += deltaTime / smoothTime * accelRate * diff;

                    currentVelocity.v *= (1.0 - deltaTime * friction);

                    if (maxSpeed > 0.0 && maxSpeed < Math.abs(currentVelocity.v)) {
                        currentVelocity.v = maxSpeed * (currentVelocity.v === 0 ? 1 : Math.sign(currentVelocity.v));
                    }

                    var returned = current + currentVelocity.v;

                    var targetGreater = (target > current);
                    var returnPassed = returned - target;
                    if ((targetGreater && returnPassed > 0) || !targetGreater && returnPassed < 0) { // Start a bounce
                        currentVelocity.v = -currentVelocity.v * hitDamping;
                        returned = current + currentVelocity.v;
                    }

                    return returned;
                },
                /*LeanSmooth.bounceOut:static end.*/

                /*LeanSmooth.bounceOut$2:static start.*/
                bounceOut$2: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping) {
if ( TRACE ) { TRACE( "LeanSmooth#bounceOut$2", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    if (hitDamping === void 0) { hitDamping = 0.9; }
                    var x = LeanSmooth.bounceOut(current.x, target.x, Bridge.ref(currentVelocity.v, "x"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);
                    var y = LeanSmooth.bounceOut(current.y, target.y, Bridge.ref(currentVelocity.v, "y"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);
                    var z = LeanSmooth.bounceOut(current.z, target.z, Bridge.ref(currentVelocity.v, "z"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);

                    return new pc.Vec3( x, y, z );
                },
                /*LeanSmooth.bounceOut$2:static end.*/

                /*LeanSmooth.bounceOut$1:static start.*/
                bounceOut$1: function (current, target, currentVelocity, smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping) {
if ( TRACE ) { TRACE( "LeanSmooth#bounceOut$1", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (deltaTime === void 0) { deltaTime = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    if (hitDamping === void 0) { hitDamping = 0.9; }
                    var r = LeanSmooth.bounceOut(current.r, target.r, Bridge.ref(currentVelocity.v, "r"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);
                    var g = LeanSmooth.bounceOut(current.g, target.g, Bridge.ref(currentVelocity.v, "g"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);
                    var b = LeanSmooth.bounceOut(current.b, target.b, Bridge.ref(currentVelocity.v, "b"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);
                    var a = LeanSmooth.bounceOut(current.a, target.a, Bridge.ref(currentVelocity.v, "a"), smoothTime, maxSpeed, deltaTime, friction, accelRate, hitDamping);

                    return new pc.Color( r, g, b, a );
                },
                /*LeanSmooth.bounceOut$1:static end.*/


            }
        }
    });
    /*LeanSmooth end.*/

    /*LeanTest start.*/
    Bridge.define("LeanTest", {
        statics: {
            fields: {
                expected: 0,
                tests: 0,
                passes: 0,
                timeout: 0,
                timeoutStarted: false,
                testsFinished: false
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "LeanTest#init", this ); }

                    this.expected = 0;
                    this.tests = 0;
                    this.passes = 0;
                    this.timeout = 15.0;
                    this.timeoutStarted = false;
                    this.testsFinished = false;
                }
            },
            methods: {
                /*LeanTest.debug:static start.*/
                debug: function (name, didPass, failExplaination) {
if ( TRACE ) { TRACE( "LeanTest#debug", this ); }

                    if (failExplaination === void 0) { failExplaination = null; }
                    LeanTest.expect(didPass, name, failExplaination);
                },
                /*LeanTest.debug:static end.*/

                /*LeanTest.expect:static start.*/
                expect: function (didPass, definition, failExplaination) {
if ( TRACE ) { TRACE( "LeanTest#expect", this ); }

                    if (failExplaination === void 0) { failExplaination = null; }
                    var len = LeanTest.printOutLength(definition);
                    var paddingLen = (40 - Bridge.Int.clip32((len * 1.05))) | 0;
                    var padding = System.String.alignString((""), -paddingLen, "_".charCodeAt(0));
                    var logName = (LeanTest.formatB(definition) || "") + " " + (padding || "") + " [ " + ((didPass ? LeanTest.formatC("pass", "green") : LeanTest.formatC("fail", "red")) || "") + " ]";
                    if (didPass === false && failExplaination != null) {
                        logName = (logName || "") + ((" - " + (failExplaination || "")) || "");
                    }
                    UnityEngine.Debug.Log$1(logName);
                    if (didPass) {
                        LeanTest.passes = (LeanTest.passes + 1) | 0;
                    }
                    LeanTest.tests = (LeanTest.tests + 1) | 0;

                    // Debug.Log("tests:"+tests+" expected:"+expected);
                    if (LeanTest.tests === LeanTest.expected && LeanTest.testsFinished === false) {
                        LeanTest.overview();
                    } else if (LeanTest.tests > LeanTest.expected) {
                        UnityEngine.Debug.Log$1((LeanTest.formatB("Too many tests for a final report!") || "") + " set LeanTest.expected = " + LeanTest.tests);
                    }

                    if (LeanTest.timeoutStarted === false) {
                        LeanTest.timeoutStarted = true;
                        var tester = new UnityEngine.GameObject.ctor();
                        tester.name = "~LeanTest";
                        var test = Bridge.as(tester.AddComponent$1(LeanTester), LeanTester);
                        test.timeout = LeanTest.timeout;
                        tester.hideFlags = UnityEngine.HideFlags.HideAndDontSave;
                    }
                },
                /*LeanTest.expect:static end.*/

                /*LeanTest.padRight:static start.*/
                padRight: function (len) {
if ( TRACE ) { TRACE( "LeanTest#padRight", this ); }

                    var str = "";
                    for (var i = 0; i < len; i = (i + 1) | 0) {
                        str = (str || "") + "_";
                    }
                    return str;
                },
                /*LeanTest.padRight:static end.*/

                /*LeanTest.printOutLength:static start.*/
                printOutLength: function (str) {
if ( TRACE ) { TRACE( "LeanTest#printOutLength", this ); }

                    var len = 0.0;
                    for (var i = 0; i < str.length; i = (i + 1) | 0) {
                        if (str.charCodeAt(i) === "I".charCodeAt(0)) {
                            len += 0.5;
                        } else if (str.charCodeAt(i) === "J".charCodeAt(0)) {
                            len += 0.85;
                        } else {
                            len += 1.0;
                        }
                    }
                    return len;
                },
                /*LeanTest.printOutLength:static end.*/

                /*LeanTest.formatBC:static start.*/
                formatBC: function (str, color) {
if ( TRACE ) { TRACE( "LeanTest#formatBC", this ); }

                    return LeanTest.formatC(LeanTest.formatB(str), color);
                },
                /*LeanTest.formatBC:static end.*/

                /*LeanTest.formatB:static start.*/
                formatB: function (str) {
if ( TRACE ) { TRACE( "LeanTest#formatB", this ); }

                    return "<b>" + (str || "") + "</b>";
                },
                /*LeanTest.formatB:static end.*/

                /*LeanTest.formatC:static start.*/
                formatC: function (str, color) {
if ( TRACE ) { TRACE( "LeanTest#formatC", this ); }

                    return "<color=" + (color || "") + ">" + (str || "") + "</color>";
                },
                /*LeanTest.formatC:static end.*/

                /*LeanTest.overview:static start.*/
                overview: function () {
if ( TRACE ) { TRACE( "LeanTest#overview", this ); }

                    LeanTest.testsFinished = true;
                    var failedCnt = (((LeanTest.expected - LeanTest.passes) | 0));
                    var failedStr = failedCnt > 0 ? LeanTest.formatBC("" + failedCnt, "red") : "" + failedCnt;
                    UnityEngine.Debug.Log$1((LeanTest.formatB("Final Report:") || "") + " _____________________ PASSED: " + (LeanTest.formatBC("" + LeanTest.passes, "green") || "") + " FAILED: " + (failedStr || "") + " ");
                },
                /*LeanTest.overview:static end.*/


            }
        }
    });
    /*LeanTest end.*/

    /*LeanTester start.*/
    Bridge.define("LeanTester", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            timeout: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LeanTester#init", this ); }

                this.timeout = 15.0;
            }
        },
        methods: {
            /*LeanTester.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "LeanTester#Start", this ); }

                this.StartCoroutine$1(this.timeoutCheck());
            },
            /*LeanTester.Start end.*/

            /*LeanTester.timeoutCheck start.*/
            timeoutCheck: function () {
if ( TRACE ) { TRACE( "LeanTester#timeoutCheck", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    pauseEndTime,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    pauseEndTime = UnityEngine.Time.realtimeSinceStartup + this.timeout;
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    if ( UnityEngine.Time.realtimeSinceStartup < pauseEndTime ) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                }
                                case 2: {
                                    $enumerator.current = Bridge.box(0, System.Int32);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    
                                        $step = 1;
                                        continue;
                                }
                                case 4: {
                                    if (LeanTest.testsFinished === false) {
                                            UnityEngine.Debug.Log$1(LeanTest.formatB("Tests timed out!"));
                                            LeanTest.overview();
                                        }

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*LeanTester.timeoutCheck end.*/


        }
    });
    /*LeanTester end.*/

    /*LeanTween start.*/
    Bridge.define("LeanTween", {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            fields: {
                throwErrors: false,
                tau: 0,
                PI_DIV2: 0,
                sequences: null,
                tweens: null,
                tweensFinished: null,
                tweensFinishedIds: null,
                tween: null,
                tweenMaxSearch: 0,
                maxTweens: 0,
                maxSequences: 0,
                frameRendered: 0,
                _tweenEmpty: null,
                dtEstimated: 0,
                dtManual: 0,
                dtActual: 0,
                global_counter: 0,
                i: 0,
                j: 0,
                finishedCnt: 0,
                punch: null,
                shake: null,
                maxTweenReached: 0,
                startSearch: 0,
                d: null,
                eventListeners: null,
                goListeners: null,
                eventsMaxSearch: 0,
                EVENTS_MAX: 0,
                LISTENERS_MAX: 0,
                INIT_LISTENERS_MAX: 0
            },
            props: {
                maxSearch: {
                    get: function () {
if ( TRACE ) { TRACE( "LeanTween#maxSearch#get", this ); }

                        return LeanTween.tweenMaxSearch;
                    }
                },
                maxSimulataneousTweens: {
                    get: function () {
if ( TRACE ) { TRACE( "LeanTween#maxSimulataneousTweens#get", this ); }

                        return LeanTween.maxTweens;
                    }
                },
                tweensRunning: {
                    get: function () {
if ( TRACE ) { TRACE( "LeanTween#tweensRunning#get", this ); }

                        var count = 0;
                        for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                            if (LeanTween.tweens[i].toggle) {
                                count = (count + 1) | 0;
                            }
                        }
                        return count;
                    }
                },
                tweenEmpty: {
                    get: function () {
if ( TRACE ) { TRACE( "LeanTween#tweenEmpty#get", this ); }

                        LeanTween.init$1(LeanTween.maxTweens);
                        return LeanTween._tweenEmpty;
                    }
                }
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "LeanTween#init", this ); }

                    this.throwErrors = true;
                    this.tau = 6.28318548;
                    this.PI_DIV2 = 1.57079637;
                    this.tweenMaxSearch = -1;
                    this.maxTweens = 400;
                    this.maxSequences = 400;
                    this.frameRendered = -1;
                    this.dtEstimated = -1.0;
                    this.global_counter = 0;
                    this.punch = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.0, 0, 0), new pc.Keyframe(0.112586, 0.9976035, 0, 0), new pc.Keyframe(0.3120486, -0.1720615, 0, 0), new pc.Keyframe(0.4316337, 0.07030682, 0, 0), new pc.Keyframe(0.5524869, -0.03141804, 0, 0), new pc.Keyframe(0.6549395, 0.003909959, 0, 0), new pc.Keyframe(0.770987, -0.009817753, 0, 0), new pc.Keyframe(0.8838775, 0.001939224, 0, 0), new pc.Keyframe(1.0, 0.0, 0, 0) ]});
                    this.shake = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.0, 0, 0), new pc.Keyframe(0.25, 1.0, 0, 0), new pc.Keyframe(0.75, -1.0, 0, 0), new pc.Keyframe(1.0, 0.0, 0, 0) ]});
                    this.startSearch = 0;
                    this.eventsMaxSearch = 0;
                    this.EVENTS_MAX = 10;
                    this.LISTENERS_MAX = 10;
                    this.INIT_LISTENERS_MAX = LeanTween.LISTENERS_MAX;
                }
            },
            methods: {
                /*LeanTween.init:static start.*/
                init: function () {
if ( TRACE ) { TRACE( "LeanTween#init", this ); }

                    LeanTween.init$1(LeanTween.maxTweens);
                },
                /*LeanTween.init:static end.*/

                /*LeanTween.init$1:static start.*/
                init$1: function (maxSimultaneousTweens) {
if ( TRACE ) { TRACE( "LeanTween#init$1", this ); }

                    LeanTween.init$2(maxSimultaneousTweens, LeanTween.maxSequences);
                },
                /*LeanTween.init$1:static end.*/

                /*LeanTween.init$2:static start.*/
                init$2: function (maxSimultaneousTweens, maxSimultaneousSequences) {
if ( TRACE ) { TRACE( "LeanTween#init$2", this ); }

                    if (LeanTween.tweens == null) {
                        LeanTween.maxTweens = maxSimultaneousTweens;
                        LeanTween.tweens = System.Array.init(LeanTween.maxTweens, null, LTDescr);
                        LeanTween.tweensFinished = System.Array.init(LeanTween.maxTweens, 0, System.Int32);
                        LeanTween.tweensFinishedIds = System.Array.init(LeanTween.maxTweens, 0, System.Int32);
                        LeanTween._tweenEmpty = new UnityEngine.GameObject.ctor();
                        LeanTween._tweenEmpty.name = "~LeanTween";
                        LeanTween._tweenEmpty.AddComponent$1(LeanTween);
                        LeanTween._tweenEmpty.isStatic = true;
                        LeanTween._tweenEmpty.hideFlags = UnityEngine.HideFlags.HideAndDontSave;
                        UnityEngine.Object.DontDestroyOnLoad(LeanTween._tweenEmpty);
                        for (var i = 0; i < LeanTween.maxTweens; i = (i + 1) | 0) {
                            LeanTween.tweens[i] = new LTDescr();
                            LeanTween.tweens[i].reset();
                        }

                        UnityEngine.SceneManagement.SceneManager.addsceneLoaded(LeanTween.onLevelWasLoaded54);

                        LeanTween.sequences = System.Array.init(maxSimultaneousSequences, null, LTSeq);

                        for (var i1 = 0; i1 < maxSimultaneousSequences; i1 = (i1 + 1) | 0) {
                            LeanTween.sequences[i1] = new LTSeq();
                        }
                    }
                },
                /*LeanTween.init$2:static end.*/

                /*LeanTween.reset:static start.*/
                reset: function () {
if ( TRACE ) { TRACE( "LeanTween#reset", this ); }

                    if (LeanTween.tweens != null) {
                        for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                            if (LeanTween.tweens[i] != null) {
                                LeanTween.tweens[i].reset();
                            }
                        }
                    }
                    LeanTween.tweens = null;
                    UnityEngine.MonoBehaviour.Destroy(LeanTween._tweenEmpty);
                },
                /*LeanTween.reset:static end.*/

                /*LeanTween.onLevelWasLoaded54:static start.*/
                onLevelWasLoaded54: function (scene, mode) {
if ( TRACE ) { TRACE( "LeanTween#onLevelWasLoaded54", this ); }

                    LeanTween.internalOnLevelWasLoaded(scene.index);
                },
                /*LeanTween.onLevelWasLoaded54:static end.*/

                /*LeanTween.internalOnLevelWasLoaded:static start.*/
                internalOnLevelWasLoaded: function (lvl) {
if ( TRACE ) { TRACE( "LeanTween#internalOnLevelWasLoaded", this ); }

                    // Debug.Log("reseting gui");
                    LTGUI.reset();
                },
                /*LeanTween.internalOnLevelWasLoaded:static end.*/

                /*LeanTween.update:static start.*/
                update: function () {
if ( TRACE ) { TRACE( "LeanTween#update", this ); }

                    var $t;
                    if (LeanTween.frameRendered !== UnityEngine.Time.frameCount) { // make sure update is only called once per frame
                        LeanTween.init();


                        LeanTween.dtEstimated = LeanTween.dtEstimated < 0.0 ? 0.0 : ($t = UnityEngine.Time.unscaledDeltaTime, LeanTween.dtEstimated = $t, $t);

                        //      Debug.Log("Time.unscaledDeltaTime:"+Time.unscaledDeltaTime);

                        LeanTween.dtActual = UnityEngine.Time.deltaTime;
                        LeanTween.maxTweenReached = 0;
                        LeanTween.finishedCnt = 0;
                        // if(tweenMaxSearch>1500)
                        //           Debug.Log("tweenMaxSearch:"+tweenMaxSearch +" maxTweens:"+maxTweens);
                        for (var i = 0; i <= LeanTween.tweenMaxSearch && i < LeanTween.maxTweens; i = (i + 1) | 0) {
                            LeanTween.tween = LeanTween.tweens[i];
                            //              if(i==0 && tweens[i].toggle)
                            //                  Debug.Log("tweens["+i+"]"+tweens[i]);
                            if (LeanTween.tween.toggle) {
                                LeanTween.maxTweenReached = i;

                                if (LeanTween.tween.updateInternal()) { // returns true if the tween is finished with it's loop
                                    LeanTween.tweensFinished[LeanTween.finishedCnt] = i;
                                    LeanTween.tweensFinishedIds[LeanTween.finishedCnt] = LeanTween.tweens[i].id;
                                    LeanTween.finishedCnt = (LeanTween.finishedCnt + 1) | 0;
                                }
                            }
                        }

                        // Debug.Log("maxTweenReached:"+maxTweenReached);
                        LeanTween.tweenMaxSearch = LeanTween.maxTweenReached;
                        LeanTween.frameRendered = UnityEngine.Time.frameCount;

                        for (var i1 = 0; i1 < LeanTween.finishedCnt; i1 = (i1 + 1) | 0) {
                            LeanTween.j = LeanTween.tweensFinished[i1];
                            LeanTween.tween = LeanTween.tweens[LeanTween.j];

                            if (LeanTween.tween.id === LeanTween.tweensFinishedIds[i1]) {
                                //              Debug.Log("removing tween:"+tween);

                                if (LeanTween.tween.hasExtraOnCompletes && UnityEngine.Component.op_Inequality(LeanTween.tween.trans, null)) {
                                    var onComplete = LeanTween.tween._optional.onComplete;
                                    var param = LeanTween.tween._optional.onCompleteParam;
                                    var onCompletObject = LeanTween.tween._optional.onCompleteObject;

                                    LeanTween.removeTween(LeanTween.j);
                                    if (!Bridge.staticEquals(onComplete, null)) {
                                        onComplete();
                                    } else if (!Bridge.staticEquals(onCompletObject, null)) {
                                        onCompletObject(param);
                                    }
                                } else if (LeanTween.tween.type === TweenAction.GUI_ROTATE || LeanTween.tween.type === TweenAction.GUI_ROTATE) {
                                    var ltRect = LeanTween.tween._optional.ltRect;
                                    var onCompleteParam = Bridge.cast(LeanTween.tween._optional.onCompleteParam, UnityEngine.AudioClip);
                                    var to = LeanTween.tween.to.$clone();
                                    var vol = LeanTween.tween.from.x;

                                    LeanTween.removeTween(LeanTween.j);
                                    if (LeanTween.tween.type === TweenAction.GUI_ROTATE) {
                                        ltRect.rotateFinished = true;
                                    }
                                    if (LeanTween.tween.type === TweenAction.DELAYED_SOUND) {
                                        UnityEngine.AudioSource.PlayClipAtPoint(onCompleteParam, to, vol);
                                    }
                                } else {
                                    LeanTween.removeTween(LeanTween.j);
                                }

                            }
                        }

                    }
                },
                /*LeanTween.update:static end.*/

                /*LeanTween.removeTween$1:static start.*/
                removeTween$1: function (i, uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#removeTween$1", this ); }
 // Only removes the tween if the unique id matches <summary>Move a GameObject to a certain location</summary>
                    if (LeanTween.tweens[i].uniqueId === uniqueId) {
                        LeanTween.removeTween(i);
                    }
                },
                /*LeanTween.removeTween$1:static end.*/

                /*LeanTween.removeTween:static start.*/
                removeTween: function (i, shouldReset) {
if ( TRACE ) { TRACE( "LeanTween#removeTween", this ); }

                    if (shouldReset === void 0) { shouldReset = true; }
                    if (LeanTween.tweens[i].toggle) {
                        LeanTween.tween = LeanTween.tweens[i];
                        LeanTween.tween.counter = 4294967295;
                        //logError("Removing tween["+i+"]:"+tweens[i]);
                        if (LeanTween.tween.destroyOnComplete) {
                            //              Debug.Log("destroying tween.type:"+tween.type+" ltRect"+(tweens[i]._optional.ltRect==null));
                            if (LeanTween.tween._optional.ltRect != null) {
                                //  Debug.Log("destroy i:"+i+" id:"+tweens[i].ltRect.id);
                                LTGUI.destroy(LeanTween.tween._optional.ltRect.id);
                            } else { // check if equal to tweenEmpty
                                if (UnityEngine.Component.op_Inequality(LeanTween.tween.trans, null) && UnityEngine.GameObject.op_Inequality(LeanTween.tween.trans.gameObject, LeanTween._tweenEmpty)) {
                                    UnityEngine.MonoBehaviour.Destroy(LeanTween.tween.trans.gameObject);
                                }
                            }
                        }
                        if (shouldReset) {
                            LeanTween.tween.reset();
                        }

                        //tweens[i].optional = null;
                        LeanTween.startSearch = i;
                        //Debug.Log("start search reset:"+startSearch + " i:"+i+" tweenMaxSearch:"+tweenMaxSearch);
                        if (((i + 1) | 0) >= LeanTween.tweenMaxSearch) {
                            //Debug.Log("reset to zero");
                            LeanTween.startSearch = 0;
                            //tweenMaxSearch--;
                        }
                    }
                },
                /*LeanTween.removeTween:static end.*/

                /*LeanTween.add:static start.*/
                add: function (a, b) {
if ( TRACE ) { TRACE( "LeanTween#add", this ); }

                    var c = System.Array.init(a.length, function (){
                        return new UnityEngine.Vector3();
                    }, UnityEngine.Vector3);
                    for (LeanTween.i = 0; LeanTween.i < a.length; LeanTween.i = (LeanTween.i + 1) | 0) {
                        c[LeanTween.i] = a[LeanTween.i].$clone().add( b );
                    }

                    return c;
                },
                /*LeanTween.add:static end.*/

                /*LeanTween.closestRot:static start.*/
                closestRot: function (from, to) {
if ( TRACE ) { TRACE( "LeanTween#closestRot", this ); }

                    var minusWhole = 0 - (360 - to);
                    var plusWhole = 360 + to;
                    var toDiffAbs = Math.abs(to - from);
                    var minusDiff = Math.abs(minusWhole - from);
                    var plusDiff = Math.abs(plusWhole - from);
                    if (toDiffAbs < minusDiff && toDiffAbs < plusDiff) {
                        return to;
                    } else {
                        if (minusDiff < plusDiff) {
                            return minusWhole;
                        } else {
                            return plusWhole;
                        }
                    }
                },
                /*LeanTween.closestRot:static end.*/

                /*LeanTween.cancelAll:static start.*/
                cancelAll: function () {
if ( TRACE ) { TRACE( "LeanTween#cancelAll", this ); }

                    LeanTween.cancelAll$1(false);
                },
                /*LeanTween.cancelAll:static end.*/

                /*LeanTween.cancelAll$1:static start.*/
                cancelAll$1: function (callComplete) {
if ( TRACE ) { TRACE( "LeanTween#cancelAll$1", this ); }

                    LeanTween.init();
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        if (UnityEngine.Component.op_Inequality(LeanTween.tweens[i].trans, null)) {
                            if (callComplete && !Bridge.staticEquals(LeanTween.tweens[i].optional.onComplete, null)) {
                                LeanTween.tweens[i].optional.onComplete();
                            }
                            LeanTween.removeTween(i);
                        }
                    }
                },
                /*LeanTween.cancelAll$1:static end.*/

                /*LeanTween.cancel$3:static start.*/
                cancel$3: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTween#cancel$3", this ); }

                    LeanTween.cancel$4(gameObject, false);
                },
                /*LeanTween.cancel$3:static end.*/

                /*LeanTween.cancel$4:static start.*/
                cancel$4: function (gameObject, callOnComplete, matchType) {
if ( TRACE ) { TRACE( "LeanTween#cancel$4", this ); }

                    if (matchType === void 0) { matchType = 51; }
                    LeanTween.init();
                    var trans = gameObject.transform;
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        var tween = LeanTween.tweens[i];
                        if (matchType === TweenAction.NONE || matchType === tween.type) {
                            if (tween != null && tween.toggle && UnityEngine.Component.op_Equality(tween.trans, trans)) {
                                if (callOnComplete && !Bridge.staticEquals(tween.optional.onComplete, null)) {
                                    tween.optional.onComplete();
                                }
                                LeanTween.removeTween(i);
                            }
                        }
                    }
                },
                /*LeanTween.cancel$4:static end.*/

                /*LeanTween.cancel$6:static start.*/
                cancel$6: function (rect) {
if ( TRACE ) { TRACE( "LeanTween#cancel$6", this ); }

                    LeanTween.cancel$4(rect.gameObject, false);
                },
                /*LeanTween.cancel$6:static end.*/

                /*LeanTween.cancel$5:static start.*/
                cancel$5: function (gameObject, uniqueId, callOnComplete) {
if ( TRACE ) { TRACE( "LeanTween#cancel$5", this ); }

                    if (callOnComplete === void 0) { callOnComplete = false; }
                    if (uniqueId >= 0) {
                        LeanTween.init();
                        var backId = uniqueId & 65535;
                        var backCounter = uniqueId >> 16;
                        // Debug.Log("uniqueId:"+uniqueId+ " id:"+backId +" counter:"+backCounter + " setCounter:"+ tw     eens[backId].counter + " tweens[id].type:"+tweens[backId].type);
                        if (UnityEngine.Component.op_Equality(LeanTween.tweens[backId].trans, null) || (UnityEngine.GameObject.op_Equality(LeanTween.tweens[backId].trans.gameObject, gameObject) && System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter)))) {
                            if (callOnComplete && !Bridge.staticEquals(LeanTween.tweens[backId].optional.onComplete, null)) {
                                LeanTween.tweens[backId].optional.onComplete();
                            }
                            LeanTween.removeTween(backId);
                        }
                    }
                },
                /*LeanTween.cancel$5:static end.*/

                /*LeanTween.cancel:static start.*/
                cancel: function (ltRect, uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#cancel", this ); }

                    if (uniqueId >= 0) {
                        LeanTween.init();
                        var backId = uniqueId & 65535;
                        var backCounter = uniqueId >> 16;
                        // Debug.Log("uniqueId:"+uniqueId+ " id:"+backId +" action:"+(TweenAction)backType + " tweens[id].type:"+tweens[backId].type);
                        if (Bridge.referenceEquals(LeanTween.tweens[backId]._optional.ltRect, ltRect) && System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter))) {
                            LeanTween.removeTween(backId);
                        }
                    }
                },
                /*LeanTween.cancel:static end.*/

                /*LeanTween.cancel$1:static start.*/
                cancel$1: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#cancel$1", this ); }

                    LeanTween.cancel$2(uniqueId, false);
                },
                /*LeanTween.cancel$1:static end.*/

                /*LeanTween.cancel$2:static start.*/
                cancel$2: function (uniqueId, callOnComplete) {
if ( TRACE ) { TRACE( "LeanTween#cancel$2", this ); }

                    if (uniqueId >= 0) {
                        LeanTween.init();
                        var backId = uniqueId & 65535;
                        var backCounter = uniqueId >> 16;
                        if (backId > ((LeanTween.tweens.length - 1) | 0)) { // sequence
                            var sequenceId = (backId - LeanTween.tweens.length) | 0;
                            var seq = LeanTween.sequences[sequenceId];
                            // Debug.Log("sequenceId:" + sequenceId+" maxSequences:"+maxSequences+" prev:"+seq.previous);

                            for (var i = 0; i < LeanTween.maxSequences; i = (i + 1) | 0) {
                                if (seq.current.tween != null) {
                                    var tweenId = seq.current.tween.uniqueId;
                                    var tweenIndex = tweenId & 65535;
                                    LeanTween.removeTween(tweenIndex);
                                }
                                if (seq.current.previous == null) {
                                    break;
                                }
                                seq.current = seq.current.previous;
                            }
                        } else { // tween
                            // Debug.Log("uniqueId:"+uniqueId+ " id:"+backId +" action:"+(TweenAction)backType + " tweens[id].type:"+tweens[backId].type);
                            if (System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter))) {
                                if (callOnComplete && !Bridge.staticEquals(LeanTween.tweens[backId].optional.onComplete, null)) {
                                    LeanTween.tweens[backId].optional.onComplete();
                                }
                                LeanTween.removeTween(backId);
                            }
                        }
                    }
                },
                /*LeanTween.cancel$2:static end.*/

                /*LeanTween.descr:static start.*/
                descr: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#descr", this ); }

                    LeanTween.init();

                    var backId = uniqueId & 65535;
                    var backCounter = uniqueId >> 16;

                    //      Debug.Log("backId:" + backId+" backCounter:"+backCounter);
                    if (LeanTween.tweens[backId] != null && LeanTween.tweens[backId].uniqueId === uniqueId && System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter))) {
                        // Debug.Log("tween count:" + tweens[backId].counter);
                        return LeanTween.tweens[backId];
                    }
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        if (LeanTween.tweens[i].uniqueId === uniqueId && System.Int64(LeanTween.tweens[i].counter).equals(System.Int64(backCounter))) {
                            return LeanTween.tweens[i];
                        }
                    }
                    return null;
                },
                /*LeanTween.descr:static end.*/

                /*LeanTween.description:static start.*/
                description: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#description", this ); }

                    return LeanTween.descr(uniqueId);
                },
                /*LeanTween.description:static end.*/

                /*LeanTween.descriptions:static start.*/
                descriptions: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTween#descriptions", this ); }

                    if (gameObject === void 0) { gameObject = null; }
                    if (UnityEngine.GameObject.op_Equality(gameObject, null)) {
                        return null;
                    }

                    var descrs = new (System.Collections.Generic.List$1(LTDescr)).ctor();
                    var trans = gameObject.transform;
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        if (LeanTween.tweens[i].toggle && UnityEngine.Component.op_Equality(LeanTween.tweens[i].trans, trans)) {
                            descrs.add(LeanTween.tweens[i]);
                        }
                    }
                    return descrs.ToArray();
                },
                /*LeanTween.descriptions:static end.*/

                /*LeanTween.pause$2:static start.*/
                pause$2: function (gameObject, uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#pause$2", this ); }

                    LeanTween.pause(uniqueId);
                },
                /*LeanTween.pause$2:static end.*/

                /*LeanTween.pause:static start.*/
                pause: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#pause", this ); }

                    var backId = uniqueId & 65535;
                    var backCounter = uniqueId >> 16;
                    if (System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter))) {
                        LeanTween.tweens[backId].pause();
                    }
                },
                /*LeanTween.pause:static end.*/

                /*LeanTween.pause$1:static start.*/
                pause$1: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTween#pause$1", this ); }

                    var trans = gameObject.transform;
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        if (UnityEngine.Component.op_Equality(LeanTween.tweens[i].trans, trans)) {
                            LeanTween.tweens[i].pause();
                        }
                    }
                },
                /*LeanTween.pause$1:static end.*/

                /*LeanTween.pauseAll:static start.*/
                pauseAll: function () {
if ( TRACE ) { TRACE( "LeanTween#pauseAll", this ); }

                    LeanTween.init();
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        LeanTween.tweens[i].pause();
                    }
                },
                /*LeanTween.pauseAll:static end.*/

                /*LeanTween.resumeAll:static start.*/
                resumeAll: function () {
if ( TRACE ) { TRACE( "LeanTween#resumeAll", this ); }

                    LeanTween.init();
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        LeanTween.tweens[i].resume();
                    }
                },
                /*LeanTween.resumeAll:static end.*/

                /*LeanTween.resume$2:static start.*/
                resume$2: function (gameObject, uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#resume$2", this ); }

                    LeanTween.resume(uniqueId);
                },
                /*LeanTween.resume$2:static end.*/

                /*LeanTween.resume:static start.*/
                resume: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#resume", this ); }

                    var backId = uniqueId & 65535;
                    var backCounter = uniqueId >> 16;
                    if (System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter))) {
                        LeanTween.tweens[backId].resume();
                    }
                },
                /*LeanTween.resume:static end.*/

                /*LeanTween.resume$1:static start.*/
                resume$1: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTween#resume$1", this ); }

                    var trans = gameObject.transform;
                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        if (UnityEngine.Component.op_Equality(LeanTween.tweens[i].trans, trans)) {
                            LeanTween.tweens[i].resume();
                        }
                    }
                },
                /*LeanTween.resume$1:static end.*/

                /*LeanTween.isPaused$1:static start.*/
                isPaused$1: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTween#isPaused$1", this ); }

                    if (gameObject === void 0) { gameObject = null; }
                    if (UnityEngine.GameObject.op_Equality(gameObject, null)) {
                        for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                            if (Bridge.equals(Bridge.box(LeanTween.tweens[i].direction, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(0.0, System.Single, System.Single.format, System.Single.getHashCode))) {
                                return true;
                            }
                        }
                        return false;
                    }
                    var trans = gameObject.transform;
                    for (var i1 = 0; i1 <= LeanTween.tweenMaxSearch; i1 = (i1 + 1) | 0) {
                        if (Bridge.equals(Bridge.box(LeanTween.tweens[i1].direction, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(0.0, System.Single, System.Single.format, System.Single.getHashCode)) && UnityEngine.Component.op_Equality(LeanTween.tweens[i1].trans, trans)) {
                            return true;
                        }
                    }
                    return false;
                },
                /*LeanTween.isPaused$1:static end.*/

                /*LeanTween.isPaused$2:static start.*/
                isPaused$2: function (rect) {
if ( TRACE ) { TRACE( "LeanTween#isPaused$2", this ); }

                    return LeanTween.isTweening$2(rect.gameObject);
                },
                /*LeanTween.isPaused$2:static end.*/

                /*LeanTween.isPaused:static start.*/
                isPaused: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#isPaused", this ); }

                    var backId = uniqueId & 65535;
                    var backCounter = uniqueId >> 16;
                    if (backId < 0 || backId >= LeanTween.maxTweens) {
                        return false;
                    }
                    // Debug.Log("tweens[backId].counter:"+tweens[backId].counter+" backCounter:"+backCounter +" toggle:"+tweens[backId].toggle);
                    if (System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter)) && Bridge.equals(Bridge.box(LeanTween.tweens[LeanTween.i].direction, System.Single, System.Single.format, System.Single.getHashCode), Bridge.box(0.0, System.Single, System.Single.format, System.Single.getHashCode))) {
                        return true;
                    }
                    return false;
                },
                /*LeanTween.isPaused:static end.*/

                /*LeanTween.isTweening$2:static start.*/
                isTweening$2: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTween#isTweening$2", this ); }

                    if (gameObject === void 0) { gameObject = null; }
                    if (UnityEngine.GameObject.op_Equality(gameObject, null)) {
                        for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                            if (LeanTween.tweens[i].toggle) {
                                return true;
                            }
                        }
                        return false;
                    }
                    var trans = gameObject.transform;
                    for (var i1 = 0; i1 <= LeanTween.tweenMaxSearch; i1 = (i1 + 1) | 0) {
                        if (LeanTween.tweens[i1].toggle && UnityEngine.Component.op_Equality(LeanTween.tweens[i1].trans, trans)) {
                            return true;
                        }
                    }
                    return false;
                },
                /*LeanTween.isTweening$2:static end.*/

                /*LeanTween.isTweening$3:static start.*/
                isTweening$3: function (rect) {
if ( TRACE ) { TRACE( "LeanTween#isTweening$3", this ); }

                    return LeanTween.isTweening$2(rect.gameObject);
                },
                /*LeanTween.isTweening$3:static end.*/

                /*LeanTween.isTweening$1:static start.*/
                isTweening$1: function (uniqueId) {
if ( TRACE ) { TRACE( "LeanTween#isTweening$1", this ); }

                    var backId = uniqueId & 65535;
                    var backCounter = uniqueId >> 16;
                    if (backId < 0 || backId >= LeanTween.maxTweens) {
                        return false;
                    }
                    // Debug.Log("tweens[backId].counter:"+tweens[backId].counter+" backCounter:"+backCounter +" toggle:"+tweens[backId].toggle);
                    if (System.Int64(LeanTween.tweens[backId].counter).equals(System.Int64(backCounter)) && LeanTween.tweens[backId].toggle) {
                        return true;
                    }
                    return false;
                },
                /*LeanTween.isTweening$1:static end.*/

                /*LeanTween.isTweening:static start.*/
                isTweening: function (ltRect) {
if ( TRACE ) { TRACE( "LeanTween#isTweening", this ); }

                    for (var i = 0; i <= LeanTween.tweenMaxSearch; i = (i + 1) | 0) {
                        if (LeanTween.tweens[i].toggle && Bridge.referenceEquals(LeanTween.tweens[i]._optional.ltRect, ltRect)) {
                            return true;
                        }
                    }
                    return false;
                },
                /*LeanTween.isTweening:static end.*/

                /*LeanTween.drawBezierPath:static start.*/
                drawBezierPath: function (a, b, c, d, arrowSize, arrowTransform) {
if ( TRACE ) { TRACE( "LeanTween#drawBezierPath", this ); }

                    if (arrowSize === void 0) { arrowSize = 0.0; }
                    if (arrowTransform === void 0) { arrowTransform = null; }
                    var last = a.$clone();
                    var p = new UnityEngine.Vector3();
                    var aa = (a.$clone().scale( -1 ).add( (b.$clone().sub( c )).clone().scale( 3 ) ).add( d ));
                    var bb = (a.$clone().add( c )).clone().scale( 3 ).sub( b.clone().scale( 6 ) );
                    var cc = (b.$clone().sub( a )).clone().scale( 3 );

                    var t;

                    if (arrowSize > 0.0) {
                        var beforePos = arrowTransform.position.$clone();
                        var beforeQ = arrowTransform.rotation.$clone();
                        var distanceTravelled = 0.0;

                        for (var k = 1.0; k <= 120.0; k++) {
                            t = k / 120.0;
                            p = ((aa.$clone().clone().scale( t ).add( (bb) )).clone().scale( t ).add( cc )).clone().scale( t ).add( a );
                            pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                            distanceTravelled += (p.$clone().sub( last )).length();
                            if (distanceTravelled > 1.0) {
                                distanceTravelled = distanceTravelled - 1.0;
                                /* float deltaY = p.y - last.y;
                                float deltaX = p.x - last.x;
                                float ang = Mathf.Atan(deltaY / deltaX);
                                Vector3 arrow = p + new Vector3( Mathf.Cos(ang+2.5f), Mathf.Sin(ang+2.5f), 0f)*0.5f;
                                Gizmos.DrawLine(p, arrow);
                                arrow = p + new Vector3( Mathf.Cos(ang+-2.5f), Mathf.Sin(ang+-2.5f), 0f)*0.5f;
                                Gizmos.DrawLine(p, arrow);*/

                                arrowTransform.position = p.$clone();
                                arrowTransform.LookAt$3(last, new pc.Vec3( 0, 0, 1 ));
                                var to = arrowTransform.TransformDirection$1(pc.Vec3.RIGHT.clone());
                                // Debug.Log("to:"+to+" tweenEmpty.transform.position:"+arrowTransform.position);
                                var back = (last.$clone().sub( p ));
                                back = back.clone().normalize().$clone();
                                pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                                to = arrowTransform.TransformDirection$1(pc.Vec3.RIGHT.clone().scale( -1 ));
                                pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                            }
                            last = p.$clone();
                        }

                        arrowTransform.position = beforePos.$clone();
                        arrowTransform.rotation = beforeQ.$clone();
                    } else {
                        for (var k1 = 1.0; k1 <= 30.0; k1++) {
                            t = k1 / 30.0;
                            p = ((aa.$clone().clone().scale( t ).add( (bb) )).clone().scale( t ).add( cc )).clone().scale( t ).add( a );
                            pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                            last = p.$clone();
                        }
                    }
                },
                /*LeanTween.drawBezierPath:static end.*/

                /*LeanTween.logError:static start.*/
                logError: function (error) {
if ( TRACE ) { TRACE( "LeanTween#logError", this ); }

                    if (LeanTween.throwErrors) {
                        UnityEngine.Debug.LogError$2(error);
                    } else {
                        UnityEngine.Debug.Log$1(error);
                    }
                    return null;
                },
                /*LeanTween.logError:static end.*/

                /*LeanTween.options$1:static start.*/
                options$1: function (seed) {
if ( TRACE ) { TRACE( "LeanTween#options$1", this ); }

                    UnityEngine.Debug.LogError$2("error this function is no longer used");
                    return null;
                },
                /*LeanTween.options$1:static end.*/

                /*LeanTween.options:static start.*/
                options: function () {
if ( TRACE ) { TRACE( "LeanTween#options", this ); }

                    LeanTween.init();

                    var found = false;
                    //      Debug.Log("Search start");
                    for (LeanTween.j = 0, LeanTween.i = LeanTween.startSearch; LeanTween.j <= LeanTween.maxTweens; LeanTween.i = (LeanTween.i + 1) | 0) {
                        if (LeanTween.j >= LeanTween.maxTweens) {
                            return Bridge.as(LeanTween.logError("LeanTween - You have run out of available spaces for tweening. To avoid this error increase the number of spaces to available for tweening when you initialize the LeanTween class ex: LeanTween.init( " + (Bridge.Int.mul(LeanTween.maxTweens, 2)) + " );"), LTDescr);
                        }
                        if (LeanTween.i >= LeanTween.maxTweens) {
                            LeanTween.i = 0;
                        }
                        //          Debug.Log("searching i:"+i);
                        if (LeanTween.tweens[LeanTween.i].toggle === false) {
                            if (((LeanTween.i + 1) | 0) > LeanTween.tweenMaxSearch && ((LeanTween.i + 1) | 0) < LeanTween.maxTweens) {
                                LeanTween.tweenMaxSearch = (LeanTween.i + 1) | 0;
                            }
                            LeanTween.startSearch = (LeanTween.i + 1) | 0;
                            found = true;
                            break;
                        }

                        LeanTween.j = (LeanTween.j + 1) | 0;
                    }
                    if (found === false) {
                        LeanTween.logError("no available tween found!");
                    }

                    // Debug.Log("new tween with i:"+i+" counter:"+tweens[i].counter+" tweenMaxSearch:"+tweenMaxSearch+" tween:"+tweens[i]);

                    LeanTween.global_counter = (LeanTween.global_counter + 1) >>> 0;
                    if (LeanTween.global_counter > 32768) {
                        LeanTween.global_counter = 0;
                    }

                    LeanTween.tweens[LeanTween.i].setId(((LeanTween.i) >>> 0), LeanTween.global_counter);

                    return LeanTween.tweens[LeanTween.i];
                },
                /*LeanTween.options:static end.*/

                /*LeanTween.pushNewTween:static start.*/
                pushNewTween: function (gameObject, to, time, tween) {
if ( TRACE ) { TRACE( "LeanTween#pushNewTween", this ); }

                    LeanTween.init$1(LeanTween.maxTweens);
                    if (UnityEngine.GameObject.op_Equality(gameObject, null) || tween == null) {
                        return null;
                    }

                    tween.toggle = true;
                    tween.trans = gameObject.transform;
                    tween.to = to.$clone();
                    tween.time = time;

                    if (tween.time <= 0.0) {
                        tween.updateInternal();
                    }
                    //tween.hasPhysics = gameObject.rigidbody!=null;

                    return tween;
                },
                /*LeanTween.pushNewTween:static end.*/

                /*LeanTween.play:static start.*/
                play: function (rectTransform, sprites) {
if ( TRACE ) { TRACE( "LeanTween#play", this ); }

                    var defaultFrameRate = 0.25;
                    var time = defaultFrameRate * sprites.length;
                    return LeanTween.pushNewTween(rectTransform.gameObject, new pc.Vec3( sprites.length - 1.0, 0, 0 ), time, LeanTween.options().setCanvasPlaySprite().setSprites(sprites).setRepeat(-1));
                },
                /*LeanTween.play:static end.*/

                /*LeanTween.sequence:static start.*/
                sequence: function (initSequence) {
if ( TRACE ) { TRACE( "LeanTween#sequence", this ); }

                    if (initSequence === void 0) { initSequence = true; }
                    LeanTween.init$1(LeanTween.maxTweens);
                    // Loop through and find available sequence
                    for (var i = 0; i < LeanTween.sequences.length; i = (i + 1) | 0) {
                        //          Debug.Log("i:" + i + " sequences[i]:" + sequences[i]);
                        if (LeanTween.sequences[i].tween == null || LeanTween.sequences[i].tween.toggle === false) {
                            if (LeanTween.sequences[i].toggle === false) {
                                var seq = LeanTween.sequences[i];
                                if (initSequence) {
                                    seq.init(((((i + LeanTween.tweens.length) | 0)) >>> 0), LeanTween.global_counter);

                                    LeanTween.global_counter = (LeanTween.global_counter + 1) >>> 0;
                                    if (LeanTween.global_counter > 32768) {
                                        LeanTween.global_counter = 0;
                                    }
                                } else {
                                    seq.reset();
                                }

                                return seq;
                            }
                        }
                    }

                    return null;
                },
                /*LeanTween.sequence:static end.*/

                /*LeanTween.alpha$1:static start.*/
                alpha$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#alpha$1", this ); }

                    var lt = LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setAlpha());

                    var ren = gameObject.GetComponent(UnityEngine.SpriteRenderer);
                    lt.spriteRen = ren;
                    return lt;
                },
                /*LeanTween.alpha$1:static end.*/

                /*LeanTween.alpha:static start.*/
                alpha: function (ltRect, to, time) {
if ( TRACE ) { TRACE( "LeanTween#alpha", this ); }

                    ltRect.alphaEnabled = true;
                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setGUIAlpha().setRect(ltRect));
                },
                /*LeanTween.alpha:static end.*/

                /*LeanTween.alpha$2:static start.*/
                alpha$2: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#alpha$2", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasAlpha().setRect$2(rectTrans));
                },
                /*LeanTween.alpha$2:static end.*/

                /*LeanTween.textAlpha:static start.*/
                textAlpha: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTween#textAlpha", this ); }

                    return LeanTween.pushNewTween(rectTransform.gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setTextAlpha());
                },
                /*LeanTween.textAlpha:static end.*/

                /*LeanTween.alphaText:static start.*/
                alphaText: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTween#alphaText", this ); }

                    return LeanTween.pushNewTween(rectTransform.gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setTextAlpha());
                },
                /*LeanTween.alphaText:static end.*/

                /*LeanTween.alphaCanvas:static start.*/
                alphaCanvas: function (canvasGroup, to, time) {
if ( TRACE ) { TRACE( "LeanTween#alphaCanvas", this ); }

                    return LeanTween.pushNewTween(canvasGroup.gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setCanvasGroupAlpha());
                },
                /*LeanTween.alphaCanvas:static end.*/

                /*LeanTween.alphaVertex:static start.*/
                alphaVertex: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#alphaVertex", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setAlphaVertex());
                },
                /*LeanTween.alphaVertex:static end.*/

                /*LeanTween.color:static start.*/
                color: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#color", this ); }

                    var lt = LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setColor().setPoint(new pc.Vec3( to.r, to.g, to.b )));
                    var ren = gameObject.GetComponent(UnityEngine.SpriteRenderer);
                    lt.spriteRen = ren;
                    return lt;
                },
                /*LeanTween.color:static end.*/

                /*LeanTween.color$1:static start.*/
                color$1: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#color$1", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setCanvasColor().setRect$2(rectTrans).setPoint(new pc.Vec3( to.r, to.g, to.b )));
                },
                /*LeanTween.color$1:static end.*/

                /*LeanTween.textColor:static start.*/
                textColor: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTween#textColor", this ); }

                    return LeanTween.pushNewTween(rectTransform.gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setTextColor().setPoint(new pc.Vec3( to.r, to.g, to.b )));
                },
                /*LeanTween.textColor:static end.*/

                /*LeanTween.colorText:static start.*/
                colorText: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTween#colorText", this ); }

                    return LeanTween.pushNewTween(rectTransform.gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setTextColor().setPoint(new pc.Vec3( to.r, to.g, to.b )));
                },
                /*LeanTween.colorText:static end.*/

                /*LeanTween.delayedCall:static start.*/
                delayedCall: function (delayTime, callback) {
if ( TRACE ) { TRACE( "LeanTween#delayedCall", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, pc.Vec3.ZERO.clone(), delayTime, LeanTween.options().setCallback().setOnComplete(callback));
                },
                /*LeanTween.delayedCall:static end.*/

                /*LeanTween.delayedCall$1:static start.*/
                delayedCall$1: function (delayTime, callback) {
if ( TRACE ) { TRACE( "LeanTween#delayedCall$1", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, pc.Vec3.ZERO.clone(), delayTime, LeanTween.options().setCallback().setOnComplete$1(callback));
                },
                /*LeanTween.delayedCall$1:static end.*/

                /*LeanTween.delayedCall$2:static start.*/
                delayedCall$2: function (gameObject, delayTime, callback) {
if ( TRACE ) { TRACE( "LeanTween#delayedCall$2", this ); }

                    var opt = LeanTween.options().setCallback().setOnComplete(callback);
                    return LeanTween.pushNewTween(gameObject, pc.Vec3.ZERO.clone(), delayTime, opt);
                },
                /*LeanTween.delayedCall$2:static end.*/

                /*LeanTween.delayedCall$3:static start.*/
                delayedCall$3: function (gameObject, delayTime, callback) {
if ( TRACE ) { TRACE( "LeanTween#delayedCall$3", this ); }

                    return LeanTween.pushNewTween(gameObject, pc.Vec3.ZERO.clone(), delayTime, LeanTween.options().setCallback().setOnComplete$1(callback));
                },
                /*LeanTween.delayedCall$3:static end.*/

                /*LeanTween.destroyAfter:static start.*/
                destroyAfter: function (rect, delayTime) {
if ( TRACE ) { TRACE( "LeanTween#destroyAfter", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, pc.Vec3.ZERO.clone(), delayTime, LeanTween.options().setCallback().setRect(rect).setDestroyOnComplete(true));
                },
                /*LeanTween.destroyAfter:static end.*/

                /*LeanTween.move$5:static start.*/
                move$5: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$5", this ); }

                    var opt = LeanTween.options().setMove();
                    return LeanTween.pushNewTween(gameObject, to, time, opt);
                },
                /*LeanTween.move$5:static end.*/

                /*LeanTween.move$4:static start.*/
                move$4: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$4", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to.x, to.y, gameObject.transform.position.z ), time, LeanTween.options().setMove());
                },
                /*LeanTween.move$4:static end.*/

                /*LeanTween.move$6:static start.*/
                move$6: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$6", this ); }

                    LeanTween.d = LeanTween.options().setMoveCurved();
                    if (LeanTween.d.optional.path == null) {
                        LeanTween.d.optional.path = new LTBezierPath.$ctor1(to);
                    } else {
                        LeanTween.d.optional.path.setPoints(to);
                    }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.move$6:static end.*/

                /*LeanTween.move$1:static start.*/
                move$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$1", this ); }

                    LeanTween.d = LeanTween.options().setMoveCurved();
                    LeanTween.d.optional.path = to;

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.move$1:static end.*/

                /*LeanTween.move$2:static start.*/
                move$2: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$2", this ); }

                    LeanTween.d = LeanTween.options().setMoveSpline();
                    LeanTween.d.optional.spline = to;

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.move$2:static end.*/

                /*LeanTween.move:static start.*/
                move: function (ltRect, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, UnityEngine.Vector3.FromVector2(to), time, LeanTween.options().setGUIMove().setRect(ltRect));
                },
                /*LeanTween.move:static end.*/

                /*LeanTween.move$3:static start.*/
                move$3: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$3", this ); }

                    return LeanTween.pushNewTween(gameObject, pc.Vec3.ZERO.clone(), time, LeanTween.options().setTo(to).setMoveToTransform());
                },
                /*LeanTween.move$3:static end.*/

                /*LeanTween.move$7:static start.*/
                move$7: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#move$7", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, to, time, LeanTween.options().setCanvasMove().setRect$2(rectTrans));
                },
                /*LeanTween.move$7:static end.*/

                /*LeanTween.moveSpline$1:static start.*/
                moveSpline$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveSpline$1", this ); }

                    LeanTween.d = LeanTween.options().setMoveSpline();
                    LeanTween.d.optional.spline = new LTSpline.ctor(to);

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.moveSpline$1:static end.*/

                /*LeanTween.moveSpline:static start.*/
                moveSpline: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveSpline", this ); }

                    LeanTween.d = LeanTween.options().setMoveSpline();
                    LeanTween.d.optional.spline = to;

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.moveSpline:static end.*/

                /*LeanTween.moveSplineLocal:static start.*/
                moveSplineLocal: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveSplineLocal", this ); }

                    LeanTween.d = LeanTween.options().setMoveSplineLocal();
                    LeanTween.d.optional.spline = new LTSpline.ctor(to);

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.moveSplineLocal:static end.*/

                /*LeanTween.moveMargin:static start.*/
                moveMargin: function (ltRect, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveMargin", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, UnityEngine.Vector3.FromVector2(to), time, LeanTween.options().setGUIMoveMargin().setRect(ltRect));
                },
                /*LeanTween.moveMargin:static end.*/

                /*LeanTween.moveX:static start.*/
                moveX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveX", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setMoveX());
                },
                /*LeanTween.moveX:static end.*/

                /*LeanTween.moveX$1:static start.*/
                moveX$1: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveX$1", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasMoveX().setRect$2(rectTrans));
                },
                /*LeanTween.moveX$1:static end.*/

                /*LeanTween.moveY:static start.*/
                moveY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveY", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setMoveY());
                },
                /*LeanTween.moveY:static end.*/

                /*LeanTween.moveY$1:static start.*/
                moveY$1: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveY$1", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasMoveY().setRect$2(rectTrans));
                },
                /*LeanTween.moveY$1:static end.*/

                /*LeanTween.moveZ:static start.*/
                moveZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveZ", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setMoveZ());
                },
                /*LeanTween.moveZ:static end.*/

                /*LeanTween.moveZ$1:static start.*/
                moveZ$1: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveZ$1", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasMoveZ().setRect$2(rectTrans));
                },
                /*LeanTween.moveZ$1:static end.*/

                /*LeanTween.moveLocal$2:static start.*/
                moveLocal$2: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocal$2", this ); }

                    var opt = LeanTween.options().setMoveLocal();
                    return LeanTween.pushNewTween(gameObject, to, time, opt);
                },
                /*LeanTween.moveLocal$2:static end.*/

                /*LeanTween.moveLocal$3:static start.*/
                moveLocal$3: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocal$3", this ); }

                    LeanTween.d = LeanTween.options().setMoveCurvedLocal();
                    if (LeanTween.d.optional.path == null) {
                        LeanTween.d.optional.path = new LTBezierPath.$ctor1(to);
                    } else {
                        LeanTween.d.optional.path.setPoints(to);
                    }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.moveLocal$3:static end.*/

                /*LeanTween.moveLocal:static start.*/
                moveLocal: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocal", this ); }

                    LeanTween.d = LeanTween.options().setMoveCurvedLocal();
                    LeanTween.d.optional.path = to;

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.moveLocal:static end.*/

                /*LeanTween.moveLocal$1:static start.*/
                moveLocal$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocal$1", this ); }

                    LeanTween.d = LeanTween.options().setMoveSplineLocal();
                    LeanTween.d.optional.spline = to;

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, 0.0, 0.0 ), time, LeanTween.d);
                },
                /*LeanTween.moveLocal$1:static end.*/

                /*LeanTween.moveLocalX:static start.*/
                moveLocalX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocalX", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setMoveLocalX());
                },
                /*LeanTween.moveLocalX:static end.*/

                /*LeanTween.moveLocalY:static start.*/
                moveLocalY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocalY", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setMoveLocalY());
                },
                /*LeanTween.moveLocalY:static end.*/

                /*LeanTween.moveLocalZ:static start.*/
                moveLocalZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#moveLocalZ", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setMoveLocalZ());
                },
                /*LeanTween.moveLocalZ:static end.*/

                /*LeanTween.rotate$1:static start.*/
                rotate$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotate$1", this ); }

                    return LeanTween.pushNewTween(gameObject, to, time, LeanTween.options().setRotate());
                },
                /*LeanTween.rotate$1:static end.*/

                /*LeanTween.rotate:static start.*/
                rotate: function (ltRect, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotate", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setGUIRotate().setRect(ltRect));
                },
                /*LeanTween.rotate:static end.*/

                /*LeanTween.rotate$2:static start.*/
                rotate$2: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotate$2", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasRotateAround().setRect$2(rectTrans).setAxis(new pc.Vec3( 0, 0, 1 )));
                },
                /*LeanTween.rotate$2:static end.*/

                /*LeanTween.rotate$3:static start.*/
                rotate$3: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotate$3", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, to, time, LeanTween.options().setCanvasRotateAround().setRect$2(rectTrans).setAxis(new pc.Vec3( 0, 0, 1 )));
                },
                /*LeanTween.rotate$3:static end.*/

                /*LeanTween.rotateLocal:static start.*/
                rotateLocal: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateLocal", this ); }

                    return LeanTween.pushNewTween(gameObject, to, time, LeanTween.options().setRotateLocal());
                },
                /*LeanTween.rotateLocal:static end.*/

                /*LeanTween.rotateX:static start.*/
                rotateX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateX", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setRotateX());
                },
                /*LeanTween.rotateX:static end.*/

                /*LeanTween.rotateY:static start.*/
                rotateY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateY", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setRotateY());
                },
                /*LeanTween.rotateY:static end.*/

                /*LeanTween.rotateZ:static start.*/
                rotateZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateZ", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setRotateZ());
                },
                /*LeanTween.rotateZ:static end.*/

                /*LeanTween.rotateAround:static start.*/
                rotateAround: function (gameObject, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateAround", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( add, 0.0, 0.0 ), time, LeanTween.options().setAxis(axis).setRotateAround());
                },
                /*LeanTween.rotateAround:static end.*/

                /*LeanTween.rotateAround$1:static start.*/
                rotateAround$1: function (rectTrans, axis, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateAround$1", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasRotateAround().setRect$2(rectTrans).setAxis(axis));
                },
                /*LeanTween.rotateAround$1:static end.*/

                /*LeanTween.rotateAroundLocal:static start.*/
                rotateAroundLocal: function (gameObject, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateAroundLocal", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( add, 0.0, 0.0 ), time, LeanTween.options().setRotateAroundLocal().setAxis(axis));
                },
                /*LeanTween.rotateAroundLocal:static end.*/

                /*LeanTween.rotateAroundLocal$1:static start.*/
                rotateAroundLocal$1: function (rectTrans, axis, to, time) {
if ( TRACE ) { TRACE( "LeanTween#rotateAroundLocal$1", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, new pc.Vec3( to, 0.0, 0.0 ), time, LeanTween.options().setCanvasRotateAroundLocal().setRect$2(rectTrans).setAxis(axis));
                },
                /*LeanTween.rotateAroundLocal$1:static end.*/

                /*LeanTween.scale$1:static start.*/
                scale$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#scale$1", this ); }

                    return LeanTween.pushNewTween(gameObject, to, time, LeanTween.options().setScale());
                },
                /*LeanTween.scale$1:static end.*/

                /*LeanTween.scale:static start.*/
                scale: function (ltRect, to, time) {
if ( TRACE ) { TRACE( "LeanTween#scale", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, UnityEngine.Vector3.FromVector2(to), time, LeanTween.options().setGUIScale().setRect(ltRect));
                },
                /*LeanTween.scale:static end.*/

                /*LeanTween.scale$2:static start.*/
                scale$2: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#scale$2", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, to, time, LeanTween.options().setCanvasScale().setRect$2(rectTrans));
                },
                /*LeanTween.scale$2:static end.*/

                /*LeanTween.scaleX:static start.*/
                scaleX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#scaleX", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setScaleX());
                },
                /*LeanTween.scaleX:static end.*/

                /*LeanTween.scaleY:static start.*/
                scaleY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#scaleY", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setScaleY());
                },
                /*LeanTween.scaleY:static end.*/

                /*LeanTween.scaleZ:static start.*/
                scaleZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTween#scaleZ", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setScaleZ());
                },
                /*LeanTween.scaleZ:static end.*/

                /*LeanTween.value$8:static start.*/
                value$8: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$8", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setCallback().setFrom$1(new pc.Vec3( from, 0, 0 )));
                },
                /*LeanTween.value$8:static end.*/

                /*LeanTween.value:static start.*/
                value: function (from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value", this ); }

                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setCallback().setFrom$1(new pc.Vec3( from, 0, 0 )));
                },
                /*LeanTween.value:static end.*/

                /*LeanTween.value$10:static start.*/
                value$10: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$10", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to.x, to.y, 0 ), time, LeanTween.options().setValue3().setTo$1(new pc.Vec3( to.x, to.y, 0.0 )).setFrom$1(new pc.Vec3( from.x, from.y, 0 )));
                },
                /*LeanTween.value$10:static end.*/

                /*LeanTween.value$11:static start.*/
                value$11: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$11", this ); }

                    return LeanTween.pushNewTween(gameObject, to, time, LeanTween.options().setValue3().setFrom$1(from));
                },
                /*LeanTween.value$11:static end.*/

                /*LeanTween.value$9:static start.*/
                value$9: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$9", this ); }

                    var lt = LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setCallbackColor().setPoint(new pc.Vec3( to.r, to.g, to.b )).setFromColor(from).setHasInitialized(false));

                    var ren = gameObject.GetComponent(UnityEngine.SpriteRenderer);
                    lt.spriteRen = ren;
                    return lt;
                },
                /*LeanTween.value$9:static end.*/

                /*LeanTween.value$1:static start.*/
                value$1: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$1", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setCallback().setTo$1(new pc.Vec3( to, 0, 0 )).setFrom$1(new pc.Vec3( from, 0, 0 )).setOnUpdate(callOnUpdate));
                },
                /*LeanTween.value$1:static end.*/

                /*LeanTween.value$6:static start.*/
                value$6: function (gameObject, callOnUpdateRatio, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$6", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setCallback().setTo$1(new pc.Vec3( to, 0, 0 )).setFrom$1(new pc.Vec3( from, 0, 0 )).setOnUpdateRatio(callOnUpdateRatio));
                },
                /*LeanTween.value$6:static end.*/

                /*LeanTween.value$2:static start.*/
                value$2: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$2", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setCallbackColor().setPoint(new pc.Vec3( to.r, to.g, to.b )).setAxis(new pc.Vec3( from.r, from.g, from.b )).setFrom$1(new pc.Vec3( 0.0, from.a, 0.0 )).setHasInitialized(false).setOnUpdateColor(callOnUpdate));
                },
                /*LeanTween.value$2:static end.*/

                /*LeanTween.value$7:static start.*/
                value$7: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$7", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( 1.0, to.a, 0.0 ), time, LeanTween.options().setCallbackColor().setPoint(new pc.Vec3( to.r, to.g, to.b )).setAxis(new pc.Vec3( from.r, from.g, from.b )).setFrom$1(new pc.Vec3( 0.0, from.a, 0.0 )).setHasInitialized(false).setOnUpdateColor$1(callOnUpdate));
                },
                /*LeanTween.value$7:static end.*/

                /*LeanTween.value$3:static start.*/
                value$3: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$3", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to.x, to.y, 0.0 ), time, LeanTween.options().setValue3().setTo$1(new pc.Vec3( to.x, to.y, 0.0 )).setFrom$1(new pc.Vec3( from.x, from.y, 0.0 )).setOnUpdateVector2(callOnUpdate));
                },
                /*LeanTween.value$3:static end.*/

                /*LeanTween.value$4:static start.*/
                value$4: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$4", this ); }

                    return LeanTween.pushNewTween(gameObject, to, time, LeanTween.options().setValue3().setTo$1(to).setFrom$1(from).setOnUpdateVector3(callOnUpdate));
                },
                /*LeanTween.value$4:static end.*/

                /*LeanTween.value$5:static start.*/
                value$5: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTween#value$5", this ); }

                    return LeanTween.pushNewTween(gameObject, new pc.Vec3( to, 0, 0 ), time, LeanTween.options().setCallback().setTo$1(new pc.Vec3( to, 0, 0 )).setFrom$1(new pc.Vec3( from, 0, 0 )).setOnUpdate$4(callOnUpdate, gameObject));
                },
                /*LeanTween.value$5:static end.*/

                /*LeanTween.delayedSound:static start.*/
                delayedSound: function (audio, pos, volume) {
if ( TRACE ) { TRACE( "LeanTween#delayedSound", this ); }

                    //Debug.LogError("Delay sound??");
                    return LeanTween.pushNewTween(LeanTween.tweenEmpty, pos, 0.0, LeanTween.options().setDelayedSound().setTo$1(pos).setFrom$1(new pc.Vec3( volume, 0, 0 )).setAudio(audio));
                },
                /*LeanTween.delayedSound:static end.*/

                /*LeanTween.delayedSound$1:static start.*/
                delayedSound$1: function (gameObject, audio, pos, volume) {
if ( TRACE ) { TRACE( "LeanTween#delayedSound$1", this ); }

                    //Debug.LogError("Delay sound??");
                    return LeanTween.pushNewTween(gameObject, pos, 0.0, LeanTween.options().setDelayedSound().setTo$1(pos).setFrom$1(new pc.Vec3( volume, 0, 0 )).setAudio(audio));
                },
                /*LeanTween.delayedSound$1:static end.*/

                /*LeanTween.size:static start.*/
                size: function (rectTrans, to, time) {
if ( TRACE ) { TRACE( "LeanTween#size", this ); }

                    return LeanTween.pushNewTween(rectTrans.gameObject, UnityEngine.Vector3.FromVector2(to), time, LeanTween.options().setCanvasSizeDelta().setRect$2(rectTrans));
                },
                /*LeanTween.size:static end.*/

                /*LeanTween.tweenOnCurve:static start.*/
                tweenOnCurve: function (tweenDescr, ratioPassed) {
if ( TRACE ) { TRACE( "LeanTween#tweenOnCurve", this ); }

                    // Debug.Log("single ratio:"+ratioPassed+" tweenDescr.animationCurve.Evaluate(ratioPassed):"+tweenDescr.animationCurve.Evaluate(ratioPassed));
                    return tweenDescr.from.x + (tweenDescr.diff.x) * tweenDescr.optional.animationCurve.value(ratioPassed);
                },
                /*LeanTween.tweenOnCurve:static end.*/

                /*LeanTween.tweenOnCurveVector:static start.*/
                tweenOnCurveVector: function (tweenDescr, ratioPassed) {
if ( TRACE ) { TRACE( "LeanTween#tweenOnCurveVector", this ); }

                    return new pc.Vec3( tweenDescr.from.x + (tweenDescr.diff.x) * tweenDescr.optional.animationCurve.value(ratioPassed), tweenDescr.from.y + (tweenDescr.diff.y) * tweenDescr.optional.animationCurve.value(ratioPassed), tweenDescr.from.z + (tweenDescr.diff.z) * tweenDescr.optional.animationCurve.value(ratioPassed) );
                },
                /*LeanTween.tweenOnCurveVector:static end.*/

                /*LeanTween.easeOutQuadOpt:static start.*/
                easeOutQuadOpt: function (start, diff, ratioPassed) {
if ( TRACE ) { TRACE( "LeanTween#easeOutQuadOpt", this ); }

                    return -diff * ratioPassed * (ratioPassed - 2) + start;
                },
                /*LeanTween.easeOutQuadOpt:static end.*/

                /*LeanTween.easeInQuadOpt:static start.*/
                easeInQuadOpt: function (start, diff, ratioPassed) {
if ( TRACE ) { TRACE( "LeanTween#easeInQuadOpt", this ); }

                    return diff * ratioPassed * ratioPassed + start;
                },
                /*LeanTween.easeInQuadOpt:static end.*/

                /*LeanTween.easeInOutQuadOpt:static start.*/
                easeInOutQuadOpt: function (start, diff, ratioPassed) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutQuadOpt", this ); }

                    ratioPassed /= 0.5;
                    if (ratioPassed < 1) {
                        return diff / 2 * ratioPassed * ratioPassed + start;
                    }
                    ratioPassed--;
                    return -diff / 2 * (ratioPassed * (ratioPassed - 2) - 1) + start;
                },
                /*LeanTween.easeInOutQuadOpt:static end.*/

                /*LeanTween.easeInOutQuadOpt$1:static start.*/
                easeInOutQuadOpt$1: function (start, diff, ratioPassed) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutQuadOpt$1", this ); }

                    ratioPassed /= 0.5;
                    if (ratioPassed < 1) {
                        return diff.$clone().scale( 1.0 / ( 2 ) ).clone().scale( ratioPassed ).clone().scale( ratioPassed ).add( start );
                    }
                    ratioPassed--;
                    return diff.$clone().scale( -1 ).scale( 1.0 / ( 2 ) ).clone().scale( (ratioPassed * (ratioPassed - 2) - 1) ).add( start );
                },
                /*LeanTween.easeInOutQuadOpt$1:static end.*/

                /*LeanTween.linear:static start.*/
                linear: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#linear", this ); }

                    return pc.math.lerp(start, end, val);
                },
                /*LeanTween.linear:static end.*/

                /*LeanTween.clerp:static start.*/
                clerp: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#clerp", this ); }

                    var min = 0.0;
                    var max = 360.0;
                    var half = Math.abs((max - min) / 2.0);
                    var retval = 0.0;
                    var diff = 0.0;
                    if ((end - start) < -half) {
                        diff = ((max - start) + end) * val;
                        retval = start + diff;
                    } else if ((end - start) > half) {
                        diff = -((max - end) + start) * val;
                        retval = start + diff;
                    } else {
                        retval = start + (end - start) * val;
                    }
                    return retval;
                },
                /*LeanTween.clerp:static end.*/

                /*LeanTween.spring:static start.*/
                spring: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#spring", this ); }

                    val = Math.max(0, Math.min(1, val));
                    val = (Math.sin(val * UnityEngine.Mathf.PI * (0.2 + 2.5 * val * val * val)) * Math.pow(1.0 - val, 2.2) + val) * (1.0 + (1.2 * (1.0 - val)));
                    return start + (end - start) * val;
                },
                /*LeanTween.spring:static end.*/

                /*LeanTween.easeInQuad:static start.*/
                easeInQuad: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInQuad", this ); }

                    end -= start;
                    return end * val * val + start;
                },
                /*LeanTween.easeInQuad:static end.*/

                /*LeanTween.easeOutQuad:static start.*/
                easeOutQuad: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutQuad", this ); }

                    end -= start;
                    return -end * val * (val - 2) + start;
                },
                /*LeanTween.easeOutQuad:static end.*/

                /*LeanTween.easeInOutQuad:static start.*/
                easeInOutQuad: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutQuad", this ); }

                    val /= 0.5;
                    end -= start;
                    if (val < 1) {
                        return end / 2 * val * val + start;
                    }
                    val--;
                    return -end / 2 * (val * (val - 2) - 1) + start;
                },
                /*LeanTween.easeInOutQuad:static end.*/

                /*LeanTween.easeInOutQuadOpt2:static start.*/
                easeInOutQuadOpt2: function (start, diffBy2, val, val2) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutQuadOpt2", this ); }

                    val /= 0.5;
                    if (val < 1) {
                        return diffBy2 * val2 + start;
                    }
                    val--;
                    return -diffBy2 * ((val2 - 2) - 1.0) + start;
                },
                /*LeanTween.easeInOutQuadOpt2:static end.*/

                /*LeanTween.easeInCubic:static start.*/
                easeInCubic: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInCubic", this ); }

                    end -= start;
                    return end * val * val * val + start;
                },
                /*LeanTween.easeInCubic:static end.*/

                /*LeanTween.easeOutCubic:static start.*/
                easeOutCubic: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutCubic", this ); }

                    val--;
                    end -= start;
                    return end * (val * val * val + 1) + start;
                },
                /*LeanTween.easeOutCubic:static end.*/

                /*LeanTween.easeInOutCubic:static start.*/
                easeInOutCubic: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutCubic", this ); }

                    val /= 0.5;
                    end -= start;
                    if (val < 1) {
                        return end / 2 * val * val * val + start;
                    }
                    val -= 2;
                    return end / 2 * (val * val * val + 2) + start;
                },
                /*LeanTween.easeInOutCubic:static end.*/

                /*LeanTween.easeInQuart:static start.*/
                easeInQuart: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInQuart", this ); }

                    end -= start;
                    return end * val * val * val * val + start;
                },
                /*LeanTween.easeInQuart:static end.*/

                /*LeanTween.easeOutQuart:static start.*/
                easeOutQuart: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutQuart", this ); }

                    val--;
                    end -= start;
                    return -end * (val * val * val * val - 1) + start;
                },
                /*LeanTween.easeOutQuart:static end.*/

                /*LeanTween.easeInOutQuart:static start.*/
                easeInOutQuart: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutQuart", this ); }

                    val /= 0.5;
                    end -= start;
                    if (val < 1) {
                        return end / 2 * val * val * val * val + start;
                    }
                    val -= 2;
                    return -end / 2 * (val * val * val * val - 2) + start;
                },
                /*LeanTween.easeInOutQuart:static end.*/

                /*LeanTween.easeInQuint:static start.*/
                easeInQuint: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInQuint", this ); }

                    end -= start;
                    return end * val * val * val * val * val + start;
                },
                /*LeanTween.easeInQuint:static end.*/

                /*LeanTween.easeOutQuint:static start.*/
                easeOutQuint: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutQuint", this ); }

                    val--;
                    end -= start;
                    return end * (val * val * val * val * val + 1) + start;
                },
                /*LeanTween.easeOutQuint:static end.*/

                /*LeanTween.easeInOutQuint:static start.*/
                easeInOutQuint: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutQuint", this ); }

                    val /= 0.5;
                    end -= start;
                    if (val < 1) {
                        return end / 2 * val * val * val * val * val + start;
                    }
                    val -= 2;
                    return end / 2 * (val * val * val * val * val + 2) + start;
                },
                /*LeanTween.easeInOutQuint:static end.*/

                /*LeanTween.easeInSine:static start.*/
                easeInSine: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInSine", this ); }

                    end -= start;
                    return -end * Math.cos(val / 1 * (1.57079637)) + end + start;
                },
                /*LeanTween.easeInSine:static end.*/

                /*LeanTween.easeOutSine:static start.*/
                easeOutSine: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutSine", this ); }

                    end -= start;
                    return end * Math.sin(val / 1 * (1.57079637)) + start;
                },
                /*LeanTween.easeOutSine:static end.*/

                /*LeanTween.easeInOutSine:static start.*/
                easeInOutSine: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutSine", this ); }

                    end -= start;
                    return -end / 2 * (Math.cos(UnityEngine.Mathf.PI * val / 1) - 1) + start;
                },
                /*LeanTween.easeInOutSine:static end.*/

                /*LeanTween.easeInExpo:static start.*/
                easeInExpo: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInExpo", this ); }

                    end -= start;
                    return end * Math.pow(2, 10 * (val / 1 - 1)) + start;
                },
                /*LeanTween.easeInExpo:static end.*/

                /*LeanTween.easeOutExpo:static start.*/
                easeOutExpo: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutExpo", this ); }

                    end -= start;
                    return end * (-Math.pow(2, -10 * val / 1) + 1) + start;
                },
                /*LeanTween.easeOutExpo:static end.*/

                /*LeanTween.easeInOutExpo:static start.*/
                easeInOutExpo: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutExpo", this ); }

                    val /= 0.5;
                    end -= start;
                    if (val < 1) {
                        return end / 2 * Math.pow(2, 10 * (val - 1)) + start;
                    }
                    val--;
                    return end / 2 * (-Math.pow(2, -10 * val) + 2) + start;
                },
                /*LeanTween.easeInOutExpo:static end.*/

                /*LeanTween.easeInCirc:static start.*/
                easeInCirc: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInCirc", this ); }

                    end -= start;
                    return -end * (Math.sqrt(1 - val * val) - 1) + start;
                },
                /*LeanTween.easeInCirc:static end.*/

                /*LeanTween.easeOutCirc:static start.*/
                easeOutCirc: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutCirc", this ); }

                    val--;
                    end -= start;
                    return end * Math.sqrt(1 - val * val) + start;
                },
                /*LeanTween.easeOutCirc:static end.*/

                /*LeanTween.easeInOutCirc:static start.*/
                easeInOutCirc: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutCirc", this ); }

                    val /= 0.5;
                    end -= start;
                    if (val < 1) {
                        return -end / 2 * (Math.sqrt(1 - val * val) - 1) + start;
                    }
                    val -= 2;
                    return end / 2 * (Math.sqrt(1 - val * val) + 1) + start;
                },
                /*LeanTween.easeInOutCirc:static end.*/

                /*LeanTween.easeInBounce:static start.*/
                easeInBounce: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInBounce", this ); }

                    end -= start;
                    var d = 1.0;
                    return end - LeanTween.easeOutBounce(0, end, d - val) + start;
                },
                /*LeanTween.easeInBounce:static end.*/

                /*LeanTween.easeOutBounce:static start.*/
                easeOutBounce: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeOutBounce", this ); }

                    val /= 1.0;
                    end -= start;
                    if (val < (0.363636374)) {
                        return end * (7.5625 * val * val) + start;
                    } else if (val < (0.727272749)) {
                        val -= (0.545454562);
                        return end * (7.5625 * (val) * val + 0.75) + start;
                    } else if (val < (0.90909090909090906)) {
                        val -= (0.8181818);
                        return end * (7.5625 * (val) * val + 0.9375) + start;
                    } else {
                        val -= (0.954545438);
                        return end * (7.5625 * (val) * val + 0.984375) + start;
                    }
                },
                /*LeanTween.easeOutBounce:static end.*/

                /*LeanTween.easeInOutBounce:static start.*/
                easeInOutBounce: function (start, end, val) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutBounce", this ); }

                    end -= start;
                    var d = 1.0;
                    if (val < d / 2) {
                        return LeanTween.easeInBounce(0, end, val * 2) * 0.5 + start;
                    } else {
                        return LeanTween.easeOutBounce(0, end, val * 2 - d) * 0.5 + end * 0.5 + start;
                    }
                },
                /*LeanTween.easeInOutBounce:static end.*/

                /*LeanTween.easeInBack:static start.*/
                easeInBack: function (start, end, val, overshoot) {
if ( TRACE ) { TRACE( "LeanTween#easeInBack", this ); }

                    if (overshoot === void 0) { overshoot = 1.0; }
                    end -= start;
                    val /= 1;
                    var s = 1.70158 * overshoot;
                    return end * (val) * val * ((s + 1) * val - s) + start;
                },
                /*LeanTween.easeInBack:static end.*/

                /*LeanTween.easeOutBack:static start.*/
                easeOutBack: function (start, end, val, overshoot) {
if ( TRACE ) { TRACE( "LeanTween#easeOutBack", this ); }

                    if (overshoot === void 0) { overshoot = 1.0; }
                    var s = 1.70158 * overshoot;
                    end -= start;
                    val = (val / 1) - 1;
                    return end * ((val) * val * ((s + 1) * val + s) + 1) + start;
                },
                /*LeanTween.easeOutBack:static end.*/

                /*LeanTween.easeInOutBack:static start.*/
                easeInOutBack: function (start, end, val, overshoot) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutBack", this ); }

                    if (overshoot === void 0) { overshoot = 1.0; }
                    var s = 1.70158 * overshoot;
                    end -= start;
                    val /= 0.5;
                    if ((val) < 1) {
                        s *= (1.525) * overshoot;
                        return end / 2 * (val * val * (((s) + 1) * val - s)) + start;
                    }
                    val -= 2;
                    s *= (1.525) * overshoot;
                    return end / 2 * ((val) * val * (((s) + 1) * val + s) + 2) + start;
                },
                /*LeanTween.easeInOutBack:static end.*/

                /*LeanTween.easeInElastic:static start.*/
                easeInElastic: function (start, end, val, overshoot, period) {
if ( TRACE ) { TRACE( "LeanTween#easeInElastic", this ); }

                    if (overshoot === void 0) { overshoot = 1.0; }
                    if (period === void 0) { period = 0.3; }
                    end -= start;

                    var p = period;
                    var s = 0.0;
                    var a = 0.0;

                    if (val === 0.0) {
                        return start;
                    }

                    if (val === 1.0) {
                        return start + end;
                    }

                    if (a === 0.0 || a < Math.abs(end)) {
                        a = end;
                        s = p / 4.0;
                    } else {
                        s = p / (6.28318548) * Math.asin(end / a);
                    }

                    if (overshoot > 1.0 && val > 0.6) {
                        overshoot = 1.0 + ((1.0 - val) / 0.4 * (overshoot - 1.0));
                    }
                    // Debug.Log("ease in elastic val:"+val+" a:"+a+" overshoot:"+overshoot);

                    val = val - 1.0;
                    return start - (a * Math.pow(2.0, 10.0 * val) * Math.sin((val - s) * (6.28318548) / p)) * overshoot;
                },
                /*LeanTween.easeInElastic:static end.*/

                /*LeanTween.easeOutElastic:static start.*/
                easeOutElastic: function (start, end, val, overshoot, period) {
if ( TRACE ) { TRACE( "LeanTween#easeOutElastic", this ); }

                    if (overshoot === void 0) { overshoot = 1.0; }
                    if (period === void 0) { period = 0.3; }
                    end -= start;

                    var p = period;
                    var s = 0.0;
                    var a = 0.0;

                    if (val === 0.0) {
                        return start;
                    }

                    // Debug.Log("ease out elastic val:"+val+" a:"+a);
                    if (val === 1.0) {
                        return start + end;
                    }

                    if (a === 0.0 || a < Math.abs(end)) {
                        a = end;
                        s = p / 4.0;
                    } else {
                        s = p / (6.28318548) * Math.asin(end / a);
                    }
                    if (overshoot > 1.0 && val < 0.4) {
                        overshoot = 1.0 + (val / 0.4 * (overshoot - 1.0));
                    }
                    // Debug.Log("ease out elastic val:"+val+" a:"+a+" overshoot:"+overshoot);

                    return start + end + a * Math.pow(2.0, -10.0 * val) * Math.sin((val - s) * (6.28318548) / p) * overshoot;
                },
                /*LeanTween.easeOutElastic:static end.*/

                /*LeanTween.easeInOutElastic:static start.*/
                easeInOutElastic: function (start, end, val, overshoot, period) {
if ( TRACE ) { TRACE( "LeanTween#easeInOutElastic", this ); }

                    if (overshoot === void 0) { overshoot = 1.0; }
                    if (period === void 0) { period = 0.3; }
                    end -= start;

                    var p = period;
                    var s = 0.0;
                    var a = 0.0;

                    if (val === 0.0) {
                        return start;
                    }

                    val = val / (0.5);
                    if (val === 2.0) {
                        return start + end;
                    }

                    if (a === 0.0 || a < Math.abs(end)) {
                        a = end;
                        s = p / 4.0;
                    } else {
                        s = p / (6.28318548) * Math.asin(end / a);
                    }

                    if (overshoot > 1.0) {
                        if (val < 0.2) {
                            overshoot = 1.0 + (val / 0.2 * (overshoot - 1.0));
                        } else if (val > 0.8) {
                            overshoot = 1.0 + ((1.0 - val) / 0.2 * (overshoot - 1.0));
                        }
                    }

                    if (val < 1.0) {
                        val = val - 1.0;
                        return start - 0.5 * (a * Math.pow(2.0, 10.0 * val) * Math.sin((val - s) * (6.28318548) / p)) * overshoot;
                    }
                    val = val - 1.0;
                    return end + start + a * Math.pow(2.0, -10.0 * val) * Math.sin((val - s) * (6.28318548) / p) * 0.5 * overshoot;
                },
                /*LeanTween.easeInOutElastic:static end.*/

                /*LeanTween.followDamp:static start.*/
                followDamp: function (trans, target, prop, smoothTime, maxSpeed) {
if ( TRACE ) { TRACE( "LeanTween#followDamp", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    var d = LeanTween.pushNewTween(trans.gameObject, pc.Vec3.ZERO.clone(), 3.40282347E+38, LeanTween.options().setFollow().setTarget(target));

                    switch (prop) {
                        case LeanProp.localPosition: 
                            d.optional.axis = d.trans.localPosition.$clone();
                            d.easeInternal = function () {
                                d.optional.axis = LeanSmooth.damp$2(d.optional.axis, d.toTrans.localPosition, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime);
                                d.trans.localPosition = d.optional.axis.$clone().add( d.toInternal );
                            };
                            break;
                        case LeanProp.position: 
                            d.diff = d.trans.position.$clone();
                            d.easeInternal = function () {
                                d.optional.axis = LeanSmooth.damp$2(d.optional.axis, d.toTrans.position, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime);
                                d.trans.position = d.optional.axis.$clone().add( d.toInternal );
                            };
                            break;
                        case LeanProp.localX: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosX(d.trans, LeanSmooth.damp(d.trans.localPosition.x, d.toTrans.localPosition.x, Bridge.ref(d.fromInternal, "x"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime));
                            };
                            break;
                        case LeanProp.localY: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosY(d.trans, LeanSmooth.damp(d.trans.localPosition.y, d.toTrans.localPosition.y, Bridge.ref(d.fromInternal, "y"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime));
                            };
                            break;
                        case LeanProp.localZ: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosZ(d.trans, LeanSmooth.damp(d.trans.localPosition.z, d.toTrans.localPosition.z, Bridge.ref(d.fromInternal, "z"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime));
                            };
                            break;
                        case LeanProp.x: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosX(d.trans, LeanSmooth.damp(d.trans.position.x, d.toTrans.position.x, Bridge.ref(d.fromInternal, "x"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime));
                            };
                            break;
                        case LeanProp.y: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosY(d.trans, LeanSmooth.damp(d.trans.position.y, d.toTrans.position.y, Bridge.ref(d.fromInternal, "y"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime));
                            };
                            break;
                        case LeanProp.z: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosZ(d.trans, LeanSmooth.damp(d.trans.position.z, d.toTrans.position.z, Bridge.ref(d.fromInternal, "z"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime));
                            };
                            break;
                        case LeanProp.scale: 
                            d.easeInternal = function () {
                                d.trans.localScale = LeanSmooth.damp$2(d.trans.localScale, d.toTrans.localScale, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime);
                            };
                            break;
                        case LeanProp.color: 
                            d.easeInternal = function () {
                                var col = LeanSmooth.damp$1(LeanTweenExt.LeanColor$1(d.trans), LeanTweenExt.LeanColor$1(d.toTrans), Bridge.ref(d.optional, "color"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime);
                                d.trans.GetComponent(UnityEngine.Renderer).material.color = col.$clone();
                            };
                            break;
                    }

                    return d;
                },
                /*LeanTween.followDamp:static end.*/

                /*LeanTween.followSpring:static start.*/
                followSpring: function (trans, target, prop, smoothTime, maxSpeed, friction, accelRate) {
if ( TRACE ) { TRACE( "LeanTween#followSpring", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    var d = LeanTween.pushNewTween(trans.gameObject, pc.Vec3.ZERO.clone(), 3.40282347E+38, LeanTween.options().setFollow().setTarget(target));
                    switch (prop) {
                        case LeanProp.localPosition: 
                            d.optional.axis = d.trans.localPosition.$clone();
                            d.easeInternal = function () {
                                d.optional.axis = LeanSmooth.spring$2(d.optional.axis, d.toTrans.localPosition, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate);
                                d.trans.localPosition = d.optional.axis.$clone().add( d.toInternal );
                            };
                            break;
                        case LeanProp.position: 
                            d.diff = d.trans.position.$clone();
                            d.easeInternal = function () {
                                d.diff = LeanSmooth.spring$2(d.diff, d.toTrans.position, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate);
                                d.trans.position = d.diff.$clone(); // + d.toInternal;
                            };
                            break;
                        case LeanProp.localX: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosX(d.trans, LeanSmooth.spring(d.trans.localPosition.x, d.toTrans.localPosition.x, Bridge.ref(d.fromInternal, "x"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate));
                            };
                            break;
                        case LeanProp.localY: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosY(d.trans, LeanSmooth.spring(d.trans.localPosition.y, d.toTrans.localPosition.y, Bridge.ref(d.fromInternal, "y"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate));
                            };
                            break;
                        case LeanProp.localZ: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosZ(d.trans, LeanSmooth.spring(d.trans.localPosition.z, d.toTrans.localPosition.z, Bridge.ref(d.fromInternal, "z"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate));
                            };
                            break;
                        case LeanProp.x: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosX(d.trans, LeanSmooth.spring(d.trans.position.x, d.toTrans.position.x, Bridge.ref(d.fromInternal, "x"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate));
                            };
                            break;
                        case LeanProp.y: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosY(d.trans, LeanSmooth.spring(d.trans.position.y, d.toTrans.position.y, Bridge.ref(d.fromInternal, "y"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate));
                            };
                            break;
                        case LeanProp.z: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosZ(d.trans, LeanSmooth.spring(d.trans.position.z, d.toTrans.position.z, Bridge.ref(d.fromInternal, "z"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate));
                            };
                            break;
                        case LeanProp.scale: 
                            d.easeInternal = function () {
                                d.trans.localScale = LeanSmooth.spring$2(d.trans.localScale, d.toTrans.localScale, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate);
                            };
                            break;
                        case LeanProp.color: 
                            d.easeInternal = function () {
                                var col = LeanSmooth.spring$1(LeanTweenExt.LeanColor$1(d.trans), LeanTweenExt.LeanColor$1(d.toTrans), Bridge.ref(d.optional, "color"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate);
                                d.trans.GetComponent(UnityEngine.Renderer).material.color = col.$clone();
                            };
                            break;
                    }

                    return d;
                },
                /*LeanTween.followSpring:static end.*/

                /*LeanTween.followBounceOut:static start.*/
                followBounceOut: function (trans, target, prop, smoothTime, maxSpeed, friction, accelRate, hitDamping) {
if ( TRACE ) { TRACE( "LeanTween#followBounceOut", this ); }

                    if (maxSpeed === void 0) { maxSpeed = -1.0; }
                    if (friction === void 0) { friction = 2.0; }
                    if (accelRate === void 0) { accelRate = 0.5; }
                    if (hitDamping === void 0) { hitDamping = 0.9; }
                    var d = LeanTween.pushNewTween(trans.gameObject, pc.Vec3.ZERO.clone(), 3.40282347E+38, LeanTween.options().setFollow().setTarget(target));
                    switch (prop) {
                        case LeanProp.localPosition: 
                            d.optional.axis = d.trans.localPosition.$clone();
                            d.easeInternal = function () {
                                d.optional.axis = LeanSmooth.bounceOut$2(d.optional.axis, d.toTrans.localPosition, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping);
                                d.trans.localPosition = d.optional.axis.$clone().add( d.toInternal );
                            };
                            break;
                        case LeanProp.position: 
                            d.easeInternal = function () {
                                d.optional.axis = LeanSmooth.bounceOut$2(d.optional.axis, d.toTrans.position, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping);
                                d.trans.position = d.optional.axis.$clone().add( d.toInternal );
                            };
                            break;
                        case LeanProp.localX: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosX(d.trans, LeanSmooth.bounceOut(d.trans.localPosition.x, d.toTrans.localPosition.x, Bridge.ref(d.fromInternal, "x"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping));
                            };
                            break;
                        case LeanProp.localY: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosY(d.trans, LeanSmooth.bounceOut(d.trans.localPosition.y, d.toTrans.localPosition.y, Bridge.ref(d.fromInternal, "y"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping));
                            };
                            break;
                        case LeanProp.localZ: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosZ(d.trans, LeanSmooth.bounceOut(d.trans.localPosition.z, d.toTrans.localPosition.z, Bridge.ref(d.fromInternal, "z"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping));
                            };
                            break;
                        case LeanProp.x: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosX(d.trans, LeanSmooth.bounceOut(d.trans.position.x, d.toTrans.position.x, Bridge.ref(d.fromInternal, "x"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping));
                            };
                            break;
                        case LeanProp.y: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosY(d.trans, LeanSmooth.bounceOut(d.trans.position.y, d.toTrans.position.y, Bridge.ref(d.fromInternal, "y"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping));
                            };
                            break;
                        case LeanProp.z: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosZ(d.trans, LeanSmooth.bounceOut(d.trans.position.z, d.toTrans.position.z, Bridge.ref(d.fromInternal, "z"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping));
                            };
                            break;
                        case LeanProp.scale: 
                            d.easeInternal = function () {
                                d.trans.localScale = LeanSmooth.bounceOut$2(d.trans.localScale, d.toTrans.localScale, Bridge.ref(d, "fromInternal"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping);
                            };
                            break;
                        case LeanProp.color: 
                            d.easeInternal = function () {
                                var col = LeanSmooth.bounceOut$1(LeanTweenExt.LeanColor$1(d.trans), LeanTweenExt.LeanColor$1(d.toTrans), Bridge.ref(d.optional, "color"), smoothTime, maxSpeed, UnityEngine.Time.deltaTime, friction, accelRate, hitDamping);
                                d.trans.GetComponent(UnityEngine.Renderer).material.color = col.$clone();
                            };
                            break;
                    }

                    return d;
                },
                /*LeanTween.followBounceOut:static end.*/

                /*LeanTween.followLinear:static start.*/
                followLinear: function (trans, target, prop, moveSpeed) {
if ( TRACE ) { TRACE( "LeanTween#followLinear", this ); }

                    var d = LeanTween.pushNewTween(trans.gameObject, pc.Vec3.ZERO.clone(), 3.40282347E+38, LeanTween.options().setFollow().setTarget(target));
                    switch (prop) {
                        case LeanProp.localPosition: 
                            d.optional.axis = d.trans.localPosition.$clone();
                            d.easeInternal = function () {
                                d.optional.axis = LeanSmooth.linear$2(d.optional.axis, d.toTrans.localPosition, moveSpeed);
                                d.trans.localPosition = d.optional.axis.$clone().add( d.toInternal );
                            };
                            break;
                        case LeanProp.position: 
                            d.easeInternal = function () {
                                d.trans.position = LeanSmooth.linear$2(d.trans.position, d.toTrans.position, moveSpeed);
                            };
                            break;
                        case LeanProp.localX: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosX(d.trans, LeanSmooth.linear(d.trans.localPosition.x, d.toTrans.localPosition.x, moveSpeed));
                            };
                            break;
                        case LeanProp.localY: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosY(d.trans, LeanSmooth.linear(d.trans.localPosition.y, d.toTrans.localPosition.y, moveSpeed));
                            };
                            break;
                        case LeanProp.localZ: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetLocalPosZ(d.trans, LeanSmooth.linear(d.trans.localPosition.z, d.toTrans.localPosition.z, moveSpeed));
                            };
                            break;
                        case LeanProp.x: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosX(d.trans, LeanSmooth.linear(d.trans.position.x, d.toTrans.position.x, moveSpeed));
                            };
                            break;
                        case LeanProp.y: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosY(d.trans, LeanSmooth.linear(d.trans.position.y, d.toTrans.position.y, moveSpeed));
                            };
                            break;
                        case LeanProp.z: 
                            d.easeInternal = function () {
                                LeanTweenExt.LeanSetPosZ(d.trans, LeanSmooth.linear(d.trans.position.z, d.toTrans.position.z, moveSpeed));
                            };
                            break;
                        case LeanProp.scale: 
                            d.easeInternal = function () {
                                d.trans.localScale = LeanSmooth.linear$2(d.trans.localScale, d.toTrans.localScale, moveSpeed);
                            };
                            break;
                        case LeanProp.color: 
                            d.easeInternal = function () {
                                var col = LeanSmooth.linear$1(LeanTweenExt.LeanColor$1(d.trans), LeanTweenExt.LeanColor$1(d.toTrans), moveSpeed);
                                d.trans.GetComponent(UnityEngine.Renderer).material.color = col.$clone();
                            };
                            break;
                    }

                    return d;
                },
                /*LeanTween.followLinear:static end.*/

                /*LeanTween.addListener:static start.*/
                addListener: function (eventId, callback) {
if ( TRACE ) { TRACE( "LeanTween#addListener", this ); }

                    LeanTween.addListener$1(LeanTween.tweenEmpty, eventId, callback);
                },
                /*LeanTween.addListener:static end.*/

                /*LeanTween.addListener$1:static start.*/
                addListener$1: function (caller, eventId, callback) {
if ( TRACE ) { TRACE( "LeanTween#addListener$1", this ); }

                    if (LeanTween.eventListeners == null) {
                        LeanTween.INIT_LISTENERS_MAX = LeanTween.LISTENERS_MAX;
                        LeanTween.eventListeners = System.Array.init(Bridge.Int.mul(LeanTween.EVENTS_MAX, LeanTween.LISTENERS_MAX), null, Function);
                        LeanTween.goListeners = System.Array.init(Bridge.Int.mul(LeanTween.EVENTS_MAX, LeanTween.LISTENERS_MAX), null, UnityEngine.GameObject);
                    }
                    // Debug.Log("searching for an empty space for:"+caller + " eventid:"+event);
                    for (LeanTween.i = 0; LeanTween.i < LeanTween.INIT_LISTENERS_MAX; LeanTween.i = (LeanTween.i + 1) | 0) {
                        var point = (Bridge.Int.mul(eventId, LeanTween.INIT_LISTENERS_MAX) + LeanTween.i) | 0;
                        if (UnityEngine.GameObject.op_Equality(LeanTween.goListeners[point], null) || Bridge.staticEquals(LeanTween.eventListeners[point], null)) {
                            LeanTween.eventListeners[point] = callback;
                            LeanTween.goListeners[point] = caller;
                            if (LeanTween.i >= LeanTween.eventsMaxSearch) {
                                LeanTween.eventsMaxSearch = (LeanTween.i + 1) | 0;
                            }
                            // Debug.Log("adding event for:"+caller.name);

                            return;
                        }
                        if (UnityEngine.GameObject.op_Equality(LeanTween.goListeners[point], caller) && Bridge.equals(LeanTween.eventListeners[point], callback)) {
                            // Debug.Log("This event is already being listened for.");
                            return;
                        }
                    }
                    UnityEngine.Debug.LogError$2("You ran out of areas to add listeners, consider increasing LISTENERS_MAX, ex: LeanTween.LISTENERS_MAX = " + (Bridge.Int.mul(LeanTween.LISTENERS_MAX, 2)));
                },
                /*LeanTween.addListener$1:static end.*/

                /*LeanTween.removeListener$1:static start.*/
                removeListener$1: function (eventId, callback) {
if ( TRACE ) { TRACE( "LeanTween#removeListener$1", this ); }

                    return LeanTween.removeListener$2(LeanTween.tweenEmpty, eventId, callback);
                },
                /*LeanTween.removeListener$1:static end.*/

                /*LeanTween.removeListener:static start.*/
                removeListener: function (eventId) {
if ( TRACE ) { TRACE( "LeanTween#removeListener", this ); }

                    var point = (Bridge.Int.mul(eventId, LeanTween.INIT_LISTENERS_MAX) + LeanTween.i) | 0;
                    LeanTween.eventListeners[point] = null;
                    LeanTween.goListeners[point] = null;
                    return true;
                },
                /*LeanTween.removeListener:static end.*/

                /*LeanTween.removeListener$2:static start.*/
                removeListener$2: function (caller, eventId, callback) {
if ( TRACE ) { TRACE( "LeanTween#removeListener$2", this ); }

                    for (LeanTween.i = 0; LeanTween.i < LeanTween.eventsMaxSearch; LeanTween.i = (LeanTween.i + 1) | 0) {
                        var point = (Bridge.Int.mul(eventId, LeanTween.INIT_LISTENERS_MAX) + LeanTween.i) | 0;
                        if (UnityEngine.GameObject.op_Equality(LeanTween.goListeners[point], caller) && Bridge.equals(LeanTween.eventListeners[point], callback)) {
                            LeanTween.eventListeners[point] = null;
                            LeanTween.goListeners[point] = null;
                            return true;
                        }
                    }
                    return false;
                },
                /*LeanTween.removeListener$2:static end.*/

                /*LeanTween.dispatchEvent:static start.*/
                dispatchEvent: function (eventId) {
if ( TRACE ) { TRACE( "LeanTween#dispatchEvent", this ); }

                    LeanTween.dispatchEvent$1(eventId, null);
                },
                /*LeanTween.dispatchEvent:static end.*/

                /*LeanTween.dispatchEvent$1:static start.*/
                dispatchEvent$1: function (eventId, data) {
if ( TRACE ) { TRACE( "LeanTween#dispatchEvent$1", this ); }

                    for (var k = 0; k < LeanTween.eventsMaxSearch; k = (k + 1) | 0) {
                        var point = (Bridge.Int.mul(eventId, LeanTween.INIT_LISTENERS_MAX) + k) | 0;
                        if (!Bridge.staticEquals(LeanTween.eventListeners[point], null)) {
                            if (UnityEngine.Object.op_Implicit(LeanTween.goListeners[point])) {
                                LeanTween.eventListeners[point](new LTEvent(eventId, data));
                            } else {
                                LeanTween.eventListeners[point] = null;
                            }
                        }
                    }
                },
                /*LeanTween.dispatchEvent$1:static end.*/


            }
        },
        methods: {
            /*LeanTween.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "LeanTween#Update", this ); }

                LeanTween.update();
            },
            /*LeanTween.Update end.*/


        }
    });
    /*LeanTween end.*/

    /*LeanTweenExt start.*/
    Bridge.define("LeanTweenExt", {
        statics: {
            methods: {
                /*LeanTweenExt.LeanAlpha$1:static start.*/
                LeanAlpha$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanAlpha$1", this ); }

                    return LeanTween.alpha$1(gameObject, to, time);
                },
                /*LeanTweenExt.LeanAlpha$1:static end.*/

                /*LeanTweenExt.LeanAlpha$2:static start.*/
                LeanAlpha$2: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanAlpha$2", this ); }

                    return LeanTween.alpha$2(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanAlpha$2:static end.*/

                /*LeanTweenExt.LeanAlpha:static start.*/
                LeanAlpha: function (canvas, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanAlpha", this ); }

                    return LeanTween.alphaCanvas(canvas, to, time);
                },
                /*LeanTweenExt.LeanAlpha:static end.*/

                /*LeanTweenExt.LeanAlphaVertex:static start.*/
                LeanAlphaVertex: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanAlphaVertex", this ); }

                    return LeanTween.alphaVertex(gameObject, to, time);
                },
                /*LeanTweenExt.LeanAlphaVertex:static end.*/

                /*LeanTweenExt.LeanAlphaText:static start.*/
                LeanAlphaText: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanAlphaText", this ); }

                    return LeanTween.alphaText(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanAlphaText:static end.*/

                /*LeanTweenExt.LeanCancel:static start.*/
                LeanCancel: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanCancel", this ); }

                    LeanTween.cancel$3(gameObject);
                },
                /*LeanTweenExt.LeanCancel:static end.*/

                /*LeanTweenExt.LeanCancel$1:static start.*/
                LeanCancel$1: function (gameObject, callOnComplete) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanCancel$1", this ); }

                    LeanTween.cancel$4(gameObject, callOnComplete);
                },
                /*LeanTweenExt.LeanCancel$1:static end.*/

                /*LeanTweenExt.LeanCancel$2:static start.*/
                LeanCancel$2: function (gameObject, uniqueId, callOnComplete) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanCancel$2", this ); }

                    if (callOnComplete === void 0) { callOnComplete = false; }
                    LeanTween.cancel$5(gameObject, uniqueId, callOnComplete);
                },
                /*LeanTweenExt.LeanCancel$2:static end.*/

                /*LeanTweenExt.LeanCancel$3:static start.*/
                LeanCancel$3: function (rectTransform) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanCancel$3", this ); }

                    LeanTween.cancel$6(rectTransform);
                },
                /*LeanTweenExt.LeanCancel$3:static end.*/

                /*LeanTweenExt.LeanColor:static start.*/
                LeanColor: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanColor", this ); }

                    return LeanTween.color(gameObject, to, time);
                },
                /*LeanTweenExt.LeanColor:static end.*/

                /*LeanTweenExt.LeanColor$1:static start.*/
                LeanColor$1: function (transform) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanColor$1", this ); }

                    return transform.GetComponent(UnityEngine.Renderer).material.color.$clone();
                },
                /*LeanTweenExt.LeanColor$1:static end.*/

                /*LeanTweenExt.LeanColorText:static start.*/
                LeanColorText: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanColorText", this ); }

                    return LeanTween.colorText(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanColorText:static end.*/

                /*LeanTweenExt.LeanDelayedCall:static start.*/
                LeanDelayedCall: function (gameObject, delayTime, callback) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanDelayedCall", this ); }

                    return LeanTween.delayedCall$2(gameObject, delayTime, callback);
                },
                /*LeanTweenExt.LeanDelayedCall:static end.*/

                /*LeanTweenExt.LeanDelayedCall$1:static start.*/
                LeanDelayedCall$1: function (gameObject, delayTime, callback) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanDelayedCall$1", this ); }

                    return LeanTween.delayedCall$3(gameObject, delayTime, callback);
                },
                /*LeanTweenExt.LeanDelayedCall$1:static end.*/

                /*LeanTweenExt.LeanIsPaused:static start.*/
                LeanIsPaused: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanIsPaused", this ); }

                    return LeanTween.isPaused$1(gameObject);
                },
                /*LeanTweenExt.LeanIsPaused:static end.*/

                /*LeanTweenExt.LeanIsPaused$1:static start.*/
                LeanIsPaused$1: function (rectTransform) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanIsPaused$1", this ); }

                    return LeanTween.isPaused$2(rectTransform);
                },
                /*LeanTweenExt.LeanIsPaused$1:static end.*/

                /*LeanTweenExt.LeanIsTweening:static start.*/
                LeanIsTweening: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanIsTweening", this ); }

                    return LeanTween.isTweening$2(gameObject);
                },
                /*LeanTweenExt.LeanIsTweening:static end.*/

                /*LeanTweenExt.LeanMove$3:static start.*/
                LeanMove$3: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$3", this ); }

                    return LeanTween.move$5(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$3:static end.*/

                /*LeanTweenExt.LeanMove$9:static start.*/
                LeanMove$9: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$9", this ); }

                    return LeanTween.move$5(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$9:static end.*/

                /*LeanTweenExt.LeanMove$5:static start.*/
                LeanMove$5: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$5", this ); }

                    return LeanTween.move$7(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanMove$5:static end.*/

                /*LeanTweenExt.LeanMove$2:static start.*/
                LeanMove$2: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$2", this ); }

                    return LeanTween.move$4(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$2:static end.*/

                /*LeanTweenExt.LeanMove$8:static start.*/
                LeanMove$8: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$8", this ); }

                    return LeanTween.move$4(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$8:static end.*/

                /*LeanTweenExt.LeanMove$4:static start.*/
                LeanMove$4: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$4", this ); }

                    return LeanTween.move$6(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$4:static end.*/

                /*LeanTweenExt.LeanMove:static start.*/
                LeanMove: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove", this ); }

                    return LeanTween.move$1(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove:static end.*/

                /*LeanTweenExt.LeanMove$1:static start.*/
                LeanMove$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$1", this ); }

                    return LeanTween.move$2(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$1:static end.*/

                /*LeanTweenExt.LeanMove$10:static start.*/
                LeanMove$10: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$10", this ); }

                    return LeanTween.move$6(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$10:static end.*/

                /*LeanTweenExt.LeanMove$6:static start.*/
                LeanMove$6: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$6", this ); }

                    return LeanTween.move$1(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$6:static end.*/

                /*LeanTweenExt.LeanMove$7:static start.*/
                LeanMove$7: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMove$7", this ); }

                    return LeanTween.move$2(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMove$7:static end.*/

                /*LeanTweenExt.LeanMoveLocal$2:static start.*/
                LeanMoveLocal$2: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocal$2", this ); }

                    return LeanTween.moveLocal$2(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocal$2:static end.*/

                /*LeanTweenExt.LeanMoveLocal:static start.*/
                LeanMoveLocal: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocal", this ); }

                    return LeanTween.moveLocal(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocal:static end.*/

                /*LeanTweenExt.LeanMoveLocal$1:static start.*/
                LeanMoveLocal$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocal$1", this ); }

                    return LeanTween.moveLocal$1(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocal$1:static end.*/

                /*LeanTweenExt.LeanMoveLocal$5:static start.*/
                LeanMoveLocal$5: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocal$5", this ); }

                    return LeanTween.moveLocal$2(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocal$5:static end.*/

                /*LeanTweenExt.LeanMoveLocal$3:static start.*/
                LeanMoveLocal$3: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocal$3", this ); }

                    return LeanTween.moveLocal(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocal$3:static end.*/

                /*LeanTweenExt.LeanMoveLocal$4:static start.*/
                LeanMoveLocal$4: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocal$4", this ); }

                    return LeanTween.moveLocal$1(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocal$4:static end.*/

                /*LeanTweenExt.LeanMoveLocalX:static start.*/
                LeanMoveLocalX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocalX", this ); }

                    return LeanTween.moveLocalX(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocalX:static end.*/

                /*LeanTweenExt.LeanMoveLocalX$1:static start.*/
                LeanMoveLocalX$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocalX$1", this ); }

                    return LeanTween.moveLocalX(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocalX$1:static end.*/

                /*LeanTweenExt.LeanMoveLocalY:static start.*/
                LeanMoveLocalY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocalY", this ); }

                    return LeanTween.moveLocalY(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocalY:static end.*/

                /*LeanTweenExt.LeanMoveLocalY$1:static start.*/
                LeanMoveLocalY$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocalY$1", this ); }

                    return LeanTween.moveLocalY(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocalY$1:static end.*/

                /*LeanTweenExt.LeanMoveLocalZ:static start.*/
                LeanMoveLocalZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocalZ", this ); }

                    return LeanTween.moveLocalZ(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocalZ:static end.*/

                /*LeanTweenExt.LeanMoveLocalZ$1:static start.*/
                LeanMoveLocalZ$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveLocalZ$1", this ); }

                    return LeanTween.moveLocalZ(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveLocalZ$1:static end.*/

                /*LeanTweenExt.LeanMoveSpline$1:static start.*/
                LeanMoveSpline$1: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveSpline$1", this ); }

                    return LeanTween.moveSpline$1(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveSpline$1:static end.*/

                /*LeanTweenExt.LeanMoveSpline:static start.*/
                LeanMoveSpline: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveSpline", this ); }

                    return LeanTween.moveSpline(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveSpline:static end.*/

                /*LeanTweenExt.LeanMoveSpline$3:static start.*/
                LeanMoveSpline$3: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveSpline$3", this ); }

                    return LeanTween.moveSpline$1(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveSpline$3:static end.*/

                /*LeanTweenExt.LeanMoveSpline$2:static start.*/
                LeanMoveSpline$2: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveSpline$2", this ); }

                    return LeanTween.moveSpline(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveSpline$2:static end.*/

                /*LeanTweenExt.LeanMoveSplineLocal:static start.*/
                LeanMoveSplineLocal: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveSplineLocal", this ); }

                    return LeanTween.moveSplineLocal(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveSplineLocal:static end.*/

                /*LeanTweenExt.LeanMoveSplineLocal$1:static start.*/
                LeanMoveSplineLocal$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveSplineLocal$1", this ); }

                    return LeanTween.moveSplineLocal(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveSplineLocal$1:static end.*/

                /*LeanTweenExt.LeanMoveX:static start.*/
                LeanMoveX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveX", this ); }

                    return LeanTween.moveX(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveX:static end.*/

                /*LeanTweenExt.LeanMoveX$2:static start.*/
                LeanMoveX$2: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveX$2", this ); }

                    return LeanTween.moveX(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveX$2:static end.*/

                /*LeanTweenExt.LeanMoveX$1:static start.*/
                LeanMoveX$1: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveX$1", this ); }

                    return LeanTween.moveX$1(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanMoveX$1:static end.*/

                /*LeanTweenExt.LeanMoveY:static start.*/
                LeanMoveY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveY", this ); }

                    return LeanTween.moveY(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveY:static end.*/

                /*LeanTweenExt.LeanMoveY$2:static start.*/
                LeanMoveY$2: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveY$2", this ); }

                    return LeanTween.moveY(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveY$2:static end.*/

                /*LeanTweenExt.LeanMoveY$1:static start.*/
                LeanMoveY$1: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveY$1", this ); }

                    return LeanTween.moveY$1(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanMoveY$1:static end.*/

                /*LeanTweenExt.LeanMoveZ:static start.*/
                LeanMoveZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveZ", this ); }

                    return LeanTween.moveZ(gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveZ:static end.*/

                /*LeanTweenExt.LeanMoveZ$2:static start.*/
                LeanMoveZ$2: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveZ$2", this ); }

                    return LeanTween.moveZ(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanMoveZ$2:static end.*/

                /*LeanTweenExt.LeanMoveZ$1:static start.*/
                LeanMoveZ$1: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanMoveZ$1", this ); }

                    return LeanTween.moveZ$1(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanMoveZ$1:static end.*/

                /*LeanTweenExt.LeanPause:static start.*/
                LeanPause: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanPause", this ); }

                    LeanTween.pause$1(gameObject);
                },
                /*LeanTweenExt.LeanPause:static end.*/

                /*LeanTweenExt.LeanPlay:static start.*/
                LeanPlay: function (rectTransform, sprites) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanPlay", this ); }

                    return LeanTween.play(rectTransform, sprites);
                },
                /*LeanTweenExt.LeanPlay:static end.*/

                /*LeanTweenExt.LeanResume:static start.*/
                LeanResume: function (gameObject) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanResume", this ); }

                    LeanTween.resume$1(gameObject);
                },
                /*LeanTweenExt.LeanResume:static end.*/

                /*LeanTweenExt.LeanRotate:static start.*/
                LeanRotate: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotate", this ); }

                    return LeanTween.rotate$1(gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotate:static end.*/

                /*LeanTweenExt.LeanRotate$2:static start.*/
                LeanRotate$2: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotate$2", this ); }

                    return LeanTween.rotate$1(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotate$2:static end.*/

                /*LeanTweenExt.LeanRotate$1:static start.*/
                LeanRotate$1: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotate$1", this ); }

                    return LeanTween.rotate$3(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanRotate$1:static end.*/

                /*LeanTweenExt.LeanRotateAround:static start.*/
                LeanRotateAround: function (gameObject, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateAround", this ); }

                    return LeanTween.rotateAround(gameObject, axis, add, time);
                },
                /*LeanTweenExt.LeanRotateAround:static end.*/

                /*LeanTweenExt.LeanRotateAround$2:static start.*/
                LeanRotateAround$2: function (transform, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateAround$2", this ); }

                    return LeanTween.rotateAround(transform.gameObject, axis, add, time);
                },
                /*LeanTweenExt.LeanRotateAround$2:static end.*/

                /*LeanTweenExt.LeanRotateAround$1:static start.*/
                LeanRotateAround$1: function (rectTransform, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateAround$1", this ); }

                    return LeanTween.rotateAround$1(rectTransform, axis, add, time);
                },
                /*LeanTweenExt.LeanRotateAround$1:static end.*/

                /*LeanTweenExt.LeanRotateAroundLocal:static start.*/
                LeanRotateAroundLocal: function (gameObject, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateAroundLocal", this ); }

                    return LeanTween.rotateAroundLocal(gameObject, axis, add, time);
                },
                /*LeanTweenExt.LeanRotateAroundLocal:static end.*/

                /*LeanTweenExt.LeanRotateAroundLocal$2:static start.*/
                LeanRotateAroundLocal$2: function (transform, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateAroundLocal$2", this ); }

                    return LeanTween.rotateAroundLocal(transform.gameObject, axis, add, time);
                },
                /*LeanTweenExt.LeanRotateAroundLocal$2:static end.*/

                /*LeanTweenExt.LeanRotateAroundLocal$1:static start.*/
                LeanRotateAroundLocal$1: function (rectTransform, axis, add, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateAroundLocal$1", this ); }

                    return LeanTween.rotateAroundLocal$1(rectTransform, axis, add, time);
                },
                /*LeanTweenExt.LeanRotateAroundLocal$1:static end.*/

                /*LeanTweenExt.LeanRotateX:static start.*/
                LeanRotateX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateX", this ); }

                    return LeanTween.rotateX(gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotateX:static end.*/

                /*LeanTweenExt.LeanRotateX$1:static start.*/
                LeanRotateX$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateX$1", this ); }

                    return LeanTween.rotateX(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotateX$1:static end.*/

                /*LeanTweenExt.LeanRotateY:static start.*/
                LeanRotateY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateY", this ); }

                    return LeanTween.rotateY(gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotateY:static end.*/

                /*LeanTweenExt.LeanRotateY$1:static start.*/
                LeanRotateY$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateY$1", this ); }

                    return LeanTween.rotateY(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotateY$1:static end.*/

                /*LeanTweenExt.LeanRotateZ:static start.*/
                LeanRotateZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateZ", this ); }

                    return LeanTween.rotateZ(gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotateZ:static end.*/

                /*LeanTweenExt.LeanRotateZ$1:static start.*/
                LeanRotateZ$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanRotateZ$1", this ); }

                    return LeanTween.rotateZ(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanRotateZ$1:static end.*/

                /*LeanTweenExt.LeanScale:static start.*/
                LeanScale: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScale", this ); }

                    return LeanTween.scale$1(gameObject, to, time);
                },
                /*LeanTweenExt.LeanScale:static end.*/

                /*LeanTweenExt.LeanScale$2:static start.*/
                LeanScale$2: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScale$2", this ); }

                    return LeanTween.scale$1(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanScale$2:static end.*/

                /*LeanTweenExt.LeanScale$1:static start.*/
                LeanScale$1: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScale$1", this ); }

                    return LeanTween.scale$2(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanScale$1:static end.*/

                /*LeanTweenExt.LeanScaleX:static start.*/
                LeanScaleX: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScaleX", this ); }

                    return LeanTween.scaleX(gameObject, to, time);
                },
                /*LeanTweenExt.LeanScaleX:static end.*/

                /*LeanTweenExt.LeanScaleX$1:static start.*/
                LeanScaleX$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScaleX$1", this ); }

                    return LeanTween.scaleX(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanScaleX$1:static end.*/

                /*LeanTweenExt.LeanScaleY:static start.*/
                LeanScaleY: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScaleY", this ); }

                    return LeanTween.scaleY(gameObject, to, time);
                },
                /*LeanTweenExt.LeanScaleY:static end.*/

                /*LeanTweenExt.LeanScaleY$1:static start.*/
                LeanScaleY$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScaleY$1", this ); }

                    return LeanTween.scaleY(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanScaleY$1:static end.*/

                /*LeanTweenExt.LeanScaleZ:static start.*/
                LeanScaleZ: function (gameObject, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScaleZ", this ); }

                    return LeanTween.scaleZ(gameObject, to, time);
                },
                /*LeanTweenExt.LeanScaleZ:static end.*/

                /*LeanTweenExt.LeanScaleZ$1:static start.*/
                LeanScaleZ$1: function (transform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanScaleZ$1", this ); }

                    return LeanTween.scaleZ(transform.gameObject, to, time);
                },
                /*LeanTweenExt.LeanScaleZ$1:static end.*/

                /*LeanTweenExt.LeanSize:static start.*/
                LeanSize: function (rectTransform, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSize", this ); }

                    return LeanTween.size(rectTransform, to, time);
                },
                /*LeanTweenExt.LeanSize:static end.*/

                /*LeanTweenExt.LeanValue$7:static start.*/
                LeanValue$7: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$7", this ); }

                    return LeanTween.value$9(gameObject, from, to, time);
                },
                /*LeanTweenExt.LeanValue$7:static end.*/

                /*LeanTweenExt.LeanValue$6:static start.*/
                LeanValue$6: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$6", this ); }

                    return LeanTween.value$8(gameObject, from, to, time);
                },
                /*LeanTweenExt.LeanValue$6:static end.*/

                /*LeanTweenExt.LeanValue$8:static start.*/
                LeanValue$8: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$8", this ); }

                    return LeanTween.value$10(gameObject, from, to, time);
                },
                /*LeanTweenExt.LeanValue$8:static end.*/

                /*LeanTweenExt.LeanValue$9:static start.*/
                LeanValue$9: function (gameObject, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$9", this ); }

                    return LeanTween.value$11(gameObject, from, to, time);
                },
                /*LeanTweenExt.LeanValue$9:static end.*/

                /*LeanTweenExt.LeanValue:static start.*/
                LeanValue: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue", this ); }

                    return LeanTween.value$1(gameObject, callOnUpdate, from, to, time);
                },
                /*LeanTweenExt.LeanValue:static end.*/

                /*LeanTweenExt.LeanValue$5:static start.*/
                LeanValue$5: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$5", this ); }

                    return LeanTween.value$6(gameObject, callOnUpdate, from, to, time);
                },
                /*LeanTweenExt.LeanValue$5:static end.*/

                /*LeanTweenExt.LeanValue$4:static start.*/
                LeanValue$4: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$4", this ); }

                    return LeanTween.value$5(gameObject, callOnUpdate, from, to, time);
                },
                /*LeanTweenExt.LeanValue$4:static end.*/

                /*LeanTweenExt.LeanValue$1:static start.*/
                LeanValue$1: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$1", this ); }

                    return LeanTween.value$2(gameObject, callOnUpdate, from, to, time);
                },
                /*LeanTweenExt.LeanValue$1:static end.*/

                /*LeanTweenExt.LeanValue$2:static start.*/
                LeanValue$2: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$2", this ); }

                    return LeanTween.value$3(gameObject, callOnUpdate, from, to, time);
                },
                /*LeanTweenExt.LeanValue$2:static end.*/

                /*LeanTweenExt.LeanValue$3:static start.*/
                LeanValue$3: function (gameObject, callOnUpdate, from, to, time) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanValue$3", this ); }

                    return LeanTween.value$4(gameObject, callOnUpdate, from, to, time);
                },
                /*LeanTweenExt.LeanValue$3:static end.*/

                /*LeanTweenExt.LeanSetPosX:static start.*/
                LeanSetPosX: function (transform, val) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSetPosX", this ); }

                    transform.position = new pc.Vec3( val, transform.position.y, transform.position.z );
                },
                /*LeanTweenExt.LeanSetPosX:static end.*/

                /*LeanTweenExt.LeanSetPosY:static start.*/
                LeanSetPosY: function (transform, val) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSetPosY", this ); }

                    transform.position = new pc.Vec3( transform.position.x, val, transform.position.z );
                },
                /*LeanTweenExt.LeanSetPosY:static end.*/

                /*LeanTweenExt.LeanSetPosZ:static start.*/
                LeanSetPosZ: function (transform, val) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSetPosZ", this ); }

                    transform.position = new pc.Vec3( transform.position.x, transform.position.y, val );
                },
                /*LeanTweenExt.LeanSetPosZ:static end.*/

                /*LeanTweenExt.LeanSetLocalPosX:static start.*/
                LeanSetLocalPosX: function (transform, val) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSetLocalPosX", this ); }

                    transform.localPosition = new pc.Vec3( val, transform.localPosition.y, transform.localPosition.z );
                },
                /*LeanTweenExt.LeanSetLocalPosX:static end.*/

                /*LeanTweenExt.LeanSetLocalPosY:static start.*/
                LeanSetLocalPosY: function (transform, val) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSetLocalPosY", this ); }

                    transform.localPosition = new pc.Vec3( transform.localPosition.x, val, transform.localPosition.z );
                },
                /*LeanTweenExt.LeanSetLocalPosY:static end.*/

                /*LeanTweenExt.LeanSetLocalPosZ:static start.*/
                LeanSetLocalPosZ: function (transform, val) {
if ( TRACE ) { TRACE( "LeanTweenExt#LeanSetLocalPosZ", this ); }

                    transform.localPosition = new pc.Vec3( transform.localPosition.x, transform.localPosition.y, val );
                },
                /*LeanTweenExt.LeanSetLocalPosZ:static end.*/


            }
        }
    });
    /*LeanTweenExt end.*/

    /*LeanTweenType start.*/
    Bridge.define("LeanTweenType", {
        $kind: 6,
        statics: {
            fields: {
                notUsed: 0,
                linear: 1,
                easeOutQuad: 2,
                easeInQuad: 3,
                easeInOutQuad: 4,
                easeInCubic: 5,
                easeOutCubic: 6,
                easeInOutCubic: 7,
                easeInQuart: 8,
                easeOutQuart: 9,
                easeInOutQuart: 10,
                easeInQuint: 11,
                easeOutQuint: 12,
                easeInOutQuint: 13,
                easeInSine: 14,
                easeOutSine: 15,
                easeInOutSine: 16,
                easeInExpo: 17,
                easeOutExpo: 18,
                easeInOutExpo: 19,
                easeInCirc: 20,
                easeOutCirc: 21,
                easeInOutCirc: 22,
                easeInBounce: 23,
                easeOutBounce: 24,
                easeInOutBounce: 25,
                easeInBack: 26,
                easeOutBack: 27,
                easeInOutBack: 28,
                easeInElastic: 29,
                easeOutElastic: 30,
                easeInOutElastic: 31,
                easeSpring: 32,
                easeShake: 33,
                punch: 34,
                once: 35,
                clamp: 36,
                pingPong: 37,
                animationCurve: 38
            }
        }
    });
    /*LeanTweenType end.*/

    /*LTBezier start.*/
    Bridge.define("LTBezier", {
        fields: {
            length: 0,
            a: null,
            aa: null,
            bb: null,
            cc: null,
            len: 0,
            arcLengths: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTBezier#init", this ); }

                this.a = new UnityEngine.Vector3();
                this.aa = new UnityEngine.Vector3();
                this.bb = new UnityEngine.Vector3();
                this.cc = new UnityEngine.Vector3();
            },
            ctor: function (a, b, c, d, precision) {
if ( TRACE ) { TRACE( "LTBezier#ctor", this ); }

                this.$initialize();
                this.a = a.$clone();
                this.aa = (a.$clone().scale( -1 ).add( (b.$clone().sub( c )).clone().scale( 3 ) ).add( d ));
                this.bb = (a.$clone().add( c )).clone().scale( 3 ).sub( b.clone().scale( 6 ) );
                this.cc = (b.$clone().sub( a )).clone().scale( 3 );

                this.len = 1.0 / precision;
                this.arcLengths = System.Array.init(((Bridge.Int.clip32(this.len) + 1) | 0), 0, System.Single);
                this.arcLengths[0] = 0;

                var ov = a.$clone();
                var v = new UnityEngine.Vector3();
                var clen = 0.0;
                for (var i = 1; i <= this.len; i = (i + 1) | 0) {
                    v = this.bezierPoint(i * precision);
                    clen += (ov.$clone().sub( v )).length();
                    this.arcLengths[i] = clen;
                    ov = v.$clone();
                }
                this.length = clen;
            }
        },
        methods: {
            /*LTBezier.map start.*/
            map: function (u) {
if ( TRACE ) { TRACE( "LTBezier#map", this ); }

                var targetLength = u * this.arcLengths[Bridge.Int.clip32(this.len)];
                var low = 0;
                var high = Bridge.Int.clip32(this.len);
                var index = 0;
                while (low < high) {
                    index = (low + (Bridge.Int.clip32(((((high - low) | 0)) / 2.0)) | 0)) | 0;
                    if (this.arcLengths[index] < targetLength) {
                        low = (index + 1) | 0;
                    } else {
                        high = index;
                    }
                }
                if (this.arcLengths[index] > targetLength) {
                    index = (index - 1) | 0;
                }
                if (index < 0) {
                    index = 0;
                }

                return (index + (targetLength - this.arcLengths[index]) / (this.arcLengths[((index + 1) | 0)] - this.arcLengths[index])) / this.len;
            },
            /*LTBezier.map end.*/

            /*LTBezier.bezierPoint start.*/
            bezierPoint: function (t) {
if ( TRACE ) { TRACE( "LTBezier#bezierPoint", this ); }

                return ((this.aa.$clone().clone().scale( t ).add( (this.bb) )).clone().scale( t ).add( this.cc )).clone().scale( t ).add( this.a );
            },
            /*LTBezier.bezierPoint end.*/

            /*LTBezier.point start.*/
            point: function (t) {
if ( TRACE ) { TRACE( "LTBezier#point", this ); }

                return this.bezierPoint(this.map(t));
            },
            /*LTBezier.point end.*/


        }
    });
    /*LTBezier end.*/

    /*LTBezierPath start.*/
    Bridge.define("LTBezierPath", {
        fields: {
            pts: null,
            length: 0,
            orientToPath: false,
            orientToPath2d: false,
            beziers: null,
            lengthRatio: null,
            currentBezier: 0,
            previousBezier: 0
        },
        props: {
            distance: {
                get: function () {
if ( TRACE ) { TRACE( "LTBezierPath#distance#get", this ); }

                    return this.length;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTBezierPath#init", this ); }

                this.currentBezier = 0;
                this.previousBezier = 0;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "LTBezierPath#ctor", this ); }

                this.$initialize();
            },
            $ctor1: function (pts_) {
if ( TRACE ) { TRACE( "LTBezierPath#$ctor1", this ); }

                this.$initialize();
                this.setPoints(pts_);
            }
        },
        methods: {
            /*LTBezierPath.setPoints start.*/
            setPoints: function (pts_) {
if ( TRACE ) { TRACE( "LTBezierPath#setPoints", this ); }

                if (pts_.length < 4) {
                    LeanTween.logError("LeanTween - When passing values for a vector path, you must pass four or more values!");
                }
                if (pts_.length % 4 !== 0) {
                    LeanTween.logError("LeanTween - When passing values for a vector path, they must be in sets of four: controlPoint1, controlPoint2, endPoint2, controlPoint2, controlPoint2...");
                }

                this.pts = pts_;

                var k = 0;
                this.beziers = System.Array.init(((Bridge.Int.div(this.pts.length, 4)) | 0), null, LTBezier);
                this.lengthRatio = System.Array.init(this.beziers.length, 0, System.Single);
                var i;
                this.length = 0;
                for (i = 0; i < this.pts.length; i = (i + 4) | 0) {
                    this.beziers[k] = new LTBezier(this.pts[((i + 0) | 0)].$clone(), this.pts[((i + 2) | 0)].$clone(), this.pts[((i + 1) | 0)].$clone(), this.pts[((i + 3) | 0)].$clone(), 0.05);
                    this.length += this.beziers[k].length;
                    k = (k + 1) | 0;
                }
                // Debug.Log("beziers.Length:"+beziers.Length + " beziers:"+beziers);
                for (i = 0; i < this.beziers.length; i = (i + 1) | 0) {
                    this.lengthRatio[i] = this.beziers[i].length / this.length;
                }
            },
            /*LTBezierPath.setPoints end.*/

            /*LTBezierPath.point start.*/
            point: function (ratio) {
if ( TRACE ) { TRACE( "LTBezierPath#point", this ); }

                var added = 0.0;
                for (var i = 0; i < this.lengthRatio.length; i = (i + 1) | 0) {
                    added += this.lengthRatio[i];
                    if (added >= ratio) {
                        return this.beziers[i].point((ratio - (added - this.lengthRatio[i])) / this.lengthRatio[i]);
                    }
                }
                return this.beziers[((this.lengthRatio.length - 1) | 0)].point(1.0);
            },
            /*LTBezierPath.point end.*/

            /*LTBezierPath.place2d start.*/
            place2d: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTBezierPath#place2d", this ); }

                transform.position = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    var v3Dir = this.point(ratio).sub( transform.position );
                    var angle = Math.atan2(v3Dir.y, v3Dir.x) * UnityEngine.Mathf.Rad2Deg;
                    transform.eulerAngles = new pc.Vec3( 0, 0, angle );
                }
            },
            /*LTBezierPath.place2d end.*/

            /*LTBezierPath.placeLocal2d start.*/
            placeLocal2d: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTBezierPath#placeLocal2d", this ); }

                transform.localPosition = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    var v3Dir = this.point(ratio).sub( transform.localPosition );
                    var angle = Math.atan2(v3Dir.y, v3Dir.x) * UnityEngine.Mathf.Rad2Deg;
                    transform.localEulerAngles = new pc.Vec3( 0, 0, angle );
                }
            },
            /*LTBezierPath.placeLocal2d end.*/

            /*LTBezierPath.place start.*/
            place: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTBezierPath#place", this ); }

                this.place$1(transform, ratio, pc.Vec3.UP.clone());

            },
            /*LTBezierPath.place end.*/

            /*LTBezierPath.place$1 start.*/
            place$1: function (transform, ratio, worldUp) {
if ( TRACE ) { TRACE( "LTBezierPath#place$1", this ); }

                transform.position = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    transform.LookAt$3(this.point(ratio), worldUp);
                }

            },
            /*LTBezierPath.place$1 end.*/

            /*LTBezierPath.placeLocal start.*/
            placeLocal: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTBezierPath#placeLocal", this ); }

                this.placeLocal$1(transform, ratio, pc.Vec3.UP.clone());
            },
            /*LTBezierPath.placeLocal end.*/

            /*LTBezierPath.placeLocal$1 start.*/
            placeLocal$1: function (transform, ratio, worldUp) {
if ( TRACE ) { TRACE( "LTBezierPath#placeLocal$1", this ); }

                // Debug.Log("place ratio:" + ratio + " greater:"+(ratio>1f));
                ratio = Math.max(0, Math.min(1, ratio));
                transform.localPosition = this.point(ratio);
                // Debug.Log("ratio:" + ratio + " +:" + (ratio + 0.001f));
                ratio = Math.max(0, Math.min(1, ratio + 0.001));

                if (ratio <= 1.0) {
                    transform.LookAt$3(transform.parent.TransformPoint$1(this.point(ratio)), worldUp);
                }
            },
            /*LTBezierPath.placeLocal$1 end.*/

            /*LTBezierPath.gizmoDraw start.*/
            gizmoDraw: function (t) {
if ( TRACE ) { TRACE( "LTBezierPath#gizmoDraw", this ); }

                if (t === void 0) { t = -1.0; }
                var prevPt = this.point(0);

                for (var i = 1; i <= 120; i = (i + 1) | 0) {
                    var pm = i / 120.0;
                    var currPt2 = this.point(pm);
                    //Gizmos.color = new Color(UnityEngine.Random.Range(0f,1f),UnityEngine.Random.Range(0f,1f),UnityEngine.Random.Range(0f,1f),1);
                    pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = (this.previousBezier === this.currentBezier) ? new pc.Color( 1, 0, 1, 1 ) : new pc.Color( 0.5, 0.5, 0.5, 1 );
                    pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                    prevPt = currPt2.$clone();
                    this.previousBezier = this.currentBezier;
                }
            },
            /*LTBezierPath.gizmoDraw end.*/

            /*LTBezierPath.ratioAtPoint start.*/
            ratioAtPoint: function (pt, precision) {
if ( TRACE ) { TRACE( "LTBezierPath#ratioAtPoint", this ); }

                if (precision === void 0) { precision = 0.01; }
                var closestDist = 3.40282347E+38;
                var closestI = 0;
                var maxIndex = Math.round(1.0 / precision);
                for (var i = 0; i < maxIndex; i = (i + 1) | 0) {
                    var ratio = i / maxIndex;
                    var dist = pc.Vec3.distance( pt, this.point(ratio) );
                    // Debug.Log("i:"+i+" dist:"+dist);
                    if (dist < closestDist) {
                        closestDist = dist;
                        closestI = i;
                    }
                }
                //Debug.Log("closestI:"+closestI+" maxIndex:"+maxIndex);
                return closestI / (maxIndex);
            },
            /*LTBezierPath.ratioAtPoint end.*/


        },
        overloads: {
            "place(Transform, float, Vector3)": "place$1",
            "placeLocal(Transform, float, Vector3)": "placeLocal$1"
        }
    });
    /*LTBezierPath end.*/

    /*LTDescr start.*/
    Bridge.define("LTDescr", {
        statics: {
            fields: {
                val: 0,
                dt: 0,
                newVect: null
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "LTDescr#init", this ); }

                    this.newVect = new UnityEngine.Vector3();
                }
            },
            methods: {
                /*LTDescr.alphaRecursive$1:static start.*/
                alphaRecursive$1: function (transform, val, useRecursion) {
if ( TRACE ) { TRACE( "LTDescr#alphaRecursive$1", this ); }

                    var $t, $t1;
                    if (useRecursion === void 0) { useRecursion = true; }
                    var renderer = transform.gameObject.GetComponent(UnityEngine.Renderer);
                    if (UnityEngine.Component.op_Inequality(renderer, null)) {
                        $t = Bridge.getEnumerator(renderer.materials);
                        try {
                            while ($t.moveNext()) {
                                var mat = $t.Current;
                                if (mat.HasProperty$1("_Color")) {
                                    mat.color = new pc.Color( mat.color.r, mat.color.g, mat.color.b, val );
                                } else if (mat.HasProperty$1("_TintColor")) {
                                    var col = mat.GetColor$1("_TintColor");
                                    mat.SetColor$1("_TintColor", new pc.Color( col.r, col.g, col.b, val ));
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                    if (useRecursion && transform.childCount > 0) {
                        $t1 = Bridge.getEnumerator(transform);
                        try {
                            while ($t1.moveNext()) {
                                var child = Bridge.cast($t1.Current, UnityEngine.Transform);
                                LTDescr.alphaRecursive$1(child, val);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.alphaRecursive$1:static end.*/

                /*LTDescr.alphaRecursive:static start.*/
                alphaRecursive: function (rectTransform, val, recursiveLevel) {
if ( TRACE ) { TRACE( "LTDescr#alphaRecursive", this ); }

                    var $t;
                    if (recursiveLevel === void 0) { recursiveLevel = 0; }
                    if (rectTransform.childCount > 0) {
                        $t = Bridge.getEnumerator(rectTransform);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.RectTransform);
                                var uiImage = child.GetComponent(UnityEngine.UI.Image);
                                if (UnityEngine.MonoBehaviour.op_Inequality(uiImage, null)) {
                                    var c = uiImage.color.$clone();
                                    c.a = val;
                                    uiImage.color = c.$clone();
                                } else {
                                    uiImage = child.GetComponent(UnityEngine.UI.RawImage);
                                    if (UnityEngine.MonoBehaviour.op_Inequality(uiImage, null)) {
                                        var c1 = uiImage.color.$clone();
                                        c1.a = val;
                                        uiImage.color = c1.$clone();
                                    }
                                }

                                LTDescr.alphaRecursive(child, val, ((recursiveLevel + 1) | 0));
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.alphaRecursive:static end.*/

                /*LTDescr.colorRecursive$1:static start.*/
                colorRecursive$1: function (transform, toColor, useRecursion) {
if ( TRACE ) { TRACE( "LTDescr#colorRecursive$1", this ); }

                    var $t, $t1;
                    if (useRecursion === void 0) { useRecursion = true; }
                    var ren = transform.gameObject.GetComponent(UnityEngine.Renderer);
                    if (UnityEngine.Component.op_Inequality(ren, null)) {
                        $t = Bridge.getEnumerator(ren.materials);
                        try {
                            while ($t.moveNext()) {
                                var mat = $t.Current;
                                mat.color = toColor.$clone();
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                    if (useRecursion && transform.childCount > 0) {
                        $t1 = Bridge.getEnumerator(transform);
                        try {
                            while ($t1.moveNext()) {
                                var child = Bridge.cast($t1.Current, UnityEngine.Transform);
                                LTDescr.colorRecursive$1(child, toColor);
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.colorRecursive$1:static end.*/

                /*LTDescr.colorRecursive:static start.*/
                colorRecursive: function (rectTransform, toColor) {
if ( TRACE ) { TRACE( "LTDescr#colorRecursive", this ); }

                    var $t;

                    if (rectTransform.childCount > 0) {
                        $t = Bridge.getEnumerator(rectTransform);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.RectTransform);
                                var uiImage = child.GetComponent(UnityEngine.UI.Image);
                                if (UnityEngine.MonoBehaviour.op_Inequality(uiImage, null)) {
                                    uiImage.color = toColor.$clone();
                                } else {
                                    uiImage = child.GetComponent(UnityEngine.UI.RawImage);
                                    if (UnityEngine.MonoBehaviour.op_Inequality(uiImage, null)) {
                                        uiImage.color = toColor.$clone();
                                    }
                                }
                                LTDescr.colorRecursive(child, toColor);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.colorRecursive:static end.*/

                /*LTDescr.alphaRecursiveSprite:static start.*/
                alphaRecursiveSprite: function (transform, val) {
if ( TRACE ) { TRACE( "LTDescr#alphaRecursiveSprite", this ); }

                    var $t;
                    if (transform.childCount > 0) {
                        $t = Bridge.getEnumerator(transform);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                var ren = child.GetComponent(UnityEngine.SpriteRenderer);
                                if (UnityEngine.Component.op_Inequality(ren, null)) {
                                    ren.color = new pc.Color( ren.color.r, ren.color.g, ren.color.b, val );
                                }
                                LTDescr.alphaRecursiveSprite(child, val);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.alphaRecursiveSprite:static end.*/

                /*LTDescr.colorRecursiveSprite:static start.*/
                colorRecursiveSprite: function (transform, toColor) {
if ( TRACE ) { TRACE( "LTDescr#colorRecursiveSprite", this ); }

                    var $t;
                    if (transform.childCount > 0) {
                        $t = Bridge.getEnumerator(transform);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                var ren = transform.gameObject.GetComponent(UnityEngine.SpriteRenderer);
                                if (UnityEngine.Component.op_Inequality(ren, null)) {
                                    ren.color = toColor.$clone();
                                }
                                LTDescr.colorRecursiveSprite(child, toColor);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.colorRecursiveSprite:static end.*/

                /*LTDescr.textAlphaChildrenRecursive:static start.*/
                textAlphaChildrenRecursive: function (trans, val, useRecursion) {
if ( TRACE ) { TRACE( "LTDescr#textAlphaChildrenRecursive", this ); }

                    var $t;
                    if (useRecursion === void 0) { useRecursion = true; }

                    if (useRecursion && trans.childCount > 0) {
                        $t = Bridge.getEnumerator(trans);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                var uiText = child.GetComponent(UnityEngine.UI.Text);
                                if (UnityEngine.MonoBehaviour.op_Inequality(uiText, null)) {
                                    var c = uiText.color.$clone();
                                    c.a = val;
                                    uiText.color = c.$clone();
                                }
                                LTDescr.textAlphaChildrenRecursive(child, val);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.textAlphaChildrenRecursive:static end.*/

                /*LTDescr.textAlphaRecursive:static start.*/
                textAlphaRecursive: function (trans, val, useRecursion) {
if ( TRACE ) { TRACE( "LTDescr#textAlphaRecursive", this ); }

                    var $t;
                    if (useRecursion === void 0) { useRecursion = true; }
                    var uiText = trans.GetComponent(UnityEngine.UI.Text);
                    if (UnityEngine.MonoBehaviour.op_Inequality(uiText, null)) {
                        var c = uiText.color.$clone();
                        c.a = val;
                        uiText.color = c.$clone();
                    }
                    if (useRecursion && trans.childCount > 0) {
                        $t = Bridge.getEnumerator(trans);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                LTDescr.textAlphaRecursive(child, val);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.textAlphaRecursive:static end.*/

                /*LTDescr.textColorRecursive:static start.*/
                textColorRecursive: function (trans, toColor) {
if ( TRACE ) { TRACE( "LTDescr#textColorRecursive", this ); }

                    var $t;
                    if (trans.childCount > 0) {
                        $t = Bridge.getEnumerator(trans);
                        try {
                            while ($t.moveNext()) {
                                var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                var uiText = child.GetComponent(UnityEngine.UI.Text);
                                if (UnityEngine.MonoBehaviour.op_Inequality(uiText, null)) {
                                    uiText.color = toColor.$clone();
                                }
                                LTDescr.textColorRecursive(child, toColor);
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                },
                /*LTDescr.textColorRecursive:static end.*/

                /*LTDescr.tweenColor:static start.*/
                tweenColor: function (tween, val) {
if ( TRACE ) { TRACE( "LTDescr#tweenColor", this ); }

                    var diff3 = tween._optional.point.$clone().sub( tween._optional.axis );
                    var diffAlpha = tween.to.y - tween.from.y;
                    return new pc.Color( tween._optional.axis.x + diff3.x * val, tween._optional.axis.y + diff3.y * val, tween._optional.axis.z + diff3.z * val, tween.from.y + diffAlpha * val );
                },
                /*LTDescr.tweenColor:static end.*/


            }
        },
        fields: {
            toggle: false,
            useEstimatedTime: false,
            useFrames: false,
            useManualTime: false,
            usesNormalDt: false,
            hasInitiliazed: false,
            hasExtraOnCompletes: false,
            hasPhysics: false,
            onCompleteOnRepeat: false,
            onCompleteOnStart: false,
            useRecursion: false,
            ratioPassed: 0,
            passed: 0,
            delay: 0,
            time: 0,
            speed: 0,
            lastVal: 0,
            _id: 0,
            loopCount: 0,
            counter: 0,
            direction: 0,
            directionLast: 0,
            overshoot: 0,
            period: 0,
            scale: 0,
            destroyOnComplete: false,
            trans: null,
            fromInternal: null,
            toInternal: null,
            diff: null,
            diffDiv2: null,
            type: 0,
            easeType: 0,
            loopType: 0,
            hasUpdateCallback: false,
            easeMethod: null,
            easeInternal: null,
            initInternal: null,
            spriteRen: null,
            rectTransform: null,
            uiText: null,
            uiImage: null,
            rawImage: null,
            sprites: null,
            _optional: null
        },
        props: {
            from: {
                get: function () {
if ( TRACE ) { TRACE( "LTDescr#from#get", this ); }

                    return this.fromInternal.$clone();
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTDescr#from#set", this ); }

                    this.fromInternal = value.$clone();
                }
            },
            to: {
                get: function () {
if ( TRACE ) { TRACE( "LTDescr#to#get", this ); }

                    return this.toInternal.$clone();
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTDescr#to#set", this ); }

                    this.toInternal = value.$clone();
                }
            },
            toTrans: {
                get: function () {
if ( TRACE ) { TRACE( "LTDescr#toTrans#get", this ); }

                    return this.optional.toTrans;
                }
            },
            uniqueId: {
                get: function () {
if ( TRACE ) { TRACE( "LTDescr#uniqueId#get", this ); }

                    var toId = (this._id | ((this.counter << 16) >>> 0)) >>> 0;

                    /* uint backId = toId & 0xFFFF;
                    			uint backCounter = toId >> 16;
                    			if(_id!=backId || backCounter!=counter){
                    				Debug.LogError("BAD CONVERSION toId:"+_id);
                    			}*/

                    return (toId | 0);
                }
            },
            id: {
                get: function () {
if ( TRACE ) { TRACE( "LTDescr#id#get", this ); }

                    return this.uniqueId;
                }
            },
            optional: {
                get: function () {
if ( TRACE ) { TRACE( "LTDescr#optional#get", this ); }

                    return this._optional;
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTDescr#optional#set", this ); }

                    this._optional = value;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTDescr#init", this ); }

                this.fromInternal = new UnityEngine.Vector3();
                this.toInternal = new UnityEngine.Vector3();
                this.diff = new UnityEngine.Vector3();
                this.diffDiv2 = new UnityEngine.Vector3();
                this.counter = 4294967295;
                this._optional = new LTDescrOptional();
            },
            ctor: function () {
if ( TRACE ) { TRACE( "LTDescr#ctor", this ); }

                this.$initialize();

            }
        },
        methods: {
            /*LTDescr.toString start.*/
            toString: function () {
if ( TRACE ) { TRACE( "LTDescr#toString", this ); }

                return ((UnityEngine.Component.op_Inequality(this.trans, null) ? "name:" + (this.trans.gameObject.name || "") : "gameObject:null") || "") + " toggle:" + System.Boolean.toString(this.toggle) + " passed:" + System.Single.format(this.passed) + " time:" + System.Single.format(this.time) + " delay:" + System.Single.format(this.delay) + " direction:" + System.Single.format(this.direction) + " from:" + this.from + " to:" + this.to + " diff:" + this.diff + " type:" + System.Enum.toString(TweenAction, this.type) + " ease:" + System.Enum.toString(LeanTweenType, this.easeType) + " useEstimatedTime:" + System.Boolean.toString(this.useEstimatedTime) + " id:" + this.id + " hasInitiliazed:" + System.Boolean.toString(this.hasInitiliazed);
            },
            /*LTDescr.toString end.*/

            /*LTDescr.cancel start.*/
            cancel: function (gameObject) {
if ( TRACE ) { TRACE( "LTDescr#cancel", this ); }

                // Debug.Log("canceling id:"+this._id+" this.uniqueId:"+this.uniqueId+" go:"+this.trans.gameObject);
                if (UnityEngine.GameObject.op_Equality(gameObject, this.trans.gameObject)) {
                    LeanTween.removeTween$1((this._id | 0), this.uniqueId);
                }
                return this;
            },
            /*LTDescr.cancel end.*/

            /*LTDescr.reset start.*/
            reset: function () {
if ( TRACE ) { TRACE( "LTDescr#reset", this ); }

                var $t;
                this.toggle = (this.useRecursion = (this.usesNormalDt = true));
                this.trans = null;
                this.spriteRen = null;
                this.passed = (this.delay = (this.lastVal = 0.0));
                this.hasUpdateCallback = (this.useEstimatedTime = (this.useFrames = (this.hasInitiliazed = (this.onCompleteOnRepeat = (this.destroyOnComplete = (this.onCompleteOnStart = (this.useManualTime = (this.hasExtraOnCompletes = (this.toggle = false)))))))));
                this.easeType = LeanTweenType.linear;
                this.loopType = LeanTweenType.once;
                this.loopCount = 0;
                this.direction = (this.directionLast = (this.overshoot = (this.scale = 1.0)));
                this.period = 0.3;
                this.speed = -1.0;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeLinear);
                this.from = ($t = pc.Vec3.ZERO.clone(), this.to = $t.$clone(), $t);
                this._optional.reset();
            },
            /*LTDescr.reset end.*/

            /*LTDescr.setFollow start.*/
            setFollow: function () {
if ( TRACE ) { TRACE( "LTDescr#setFollow", this ); }

                this.type = TweenAction.FOLLOW;
                return this;
            },
            /*LTDescr.setFollow end.*/

            /*LTDescr.setMoveX start.*/
            setMoveX: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveX", this ); }

                this.type = TweenAction.MOVE_X;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.position.x;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.position = new pc.Vec3( this.easeMethod().x, this.trans.position.y, this.trans.position.z );
                });
                return this;
            },
            /*LTDescr.setMoveX end.*/

            /*LTDescr.setMoveY start.*/
            setMoveY: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveY", this ); }

                this.type = TweenAction.MOVE_Y;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.position.y;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.position = new pc.Vec3( this.trans.position.x, this.easeMethod().x, this.trans.position.z );
                });
                return this;
            },
            /*LTDescr.setMoveY end.*/

            /*LTDescr.setMoveZ start.*/
            setMoveZ: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveZ", this ); }

                this.type = TweenAction.MOVE_Z;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.position.z;
                });
                ;
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.position = new pc.Vec3( this.trans.position.x, this.trans.position.y, this.easeMethod().x );
                });
                return this;
            },
            /*LTDescr.setMoveZ end.*/

            /*LTDescr.setMoveLocalX start.*/
            setMoveLocalX: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveLocalX", this ); }

                this.type = TweenAction.MOVE_LOCAL_X;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.localPosition.x;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.localPosition = new pc.Vec3( this.easeMethod().x, this.trans.localPosition.y, this.trans.localPosition.z );
                });
                return this;
            },
            /*LTDescr.setMoveLocalX end.*/

            /*LTDescr.setMoveLocalY start.*/
            setMoveLocalY: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveLocalY", this ); }

                this.type = TweenAction.MOVE_LOCAL_Y;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.localPosition.y;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.localPosition = new pc.Vec3( this.trans.localPosition.x, this.easeMethod().x, this.trans.localPosition.z );
                });
                return this;
            },
            /*LTDescr.setMoveLocalY end.*/

            /*LTDescr.setMoveLocalZ start.*/
            setMoveLocalZ: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveLocalZ", this ); }

                this.type = TweenAction.MOVE_LOCAL_Z;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.localPosition.z;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.localPosition = new pc.Vec3( this.trans.localPosition.x, this.trans.localPosition.y, this.easeMethod().x );
                });
                return this;
            },
            /*LTDescr.setMoveLocalZ end.*/

            /*LTDescr.initFromInternal start.*/
            initFromInternal: function () {
if ( TRACE ) { TRACE( "LTDescr#initFromInternal", this ); }

                this.fromInternal.x = 0;
            },
            /*LTDescr.initFromInternal end.*/

            /*LTDescr.setOffset start.*/
            setOffset: function (offset) {
if ( TRACE ) { TRACE( "LTDescr#setOffset", this ); }

                this.toInternal = offset.$clone();
                return this;
            },
            /*LTDescr.setOffset end.*/

            /*LTDescr.setMoveCurved start.*/
            setMoveCurved: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveCurved", this ); }

                this.type = TweenAction.MOVE_CURVED;
                this.initInternal = Bridge.fn.cacheBind(this, this.initFromInternal);
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    if (this._optional.path.orientToPath) {
                        if (this._optional.path.orientToPath2d) {
                            this._optional.path.place2d(this.trans, LTDescr.val);
                        } else {
                            this._optional.path.place(this.trans, LTDescr.val);
                        }
                    } else {
                        this.trans.position = this._optional.path.point(LTDescr.val);
                    }
                });
                return this;
            },
            /*LTDescr.setMoveCurved end.*/

            /*LTDescr.setMoveCurvedLocal start.*/
            setMoveCurvedLocal: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveCurvedLocal", this ); }

                this.type = TweenAction.MOVE_CURVED_LOCAL;
                this.initInternal = Bridge.fn.cacheBind(this, this.initFromInternal);
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    if (this._optional.path.orientToPath) {
                        if (this._optional.path.orientToPath2d) {
                            this._optional.path.placeLocal2d(this.trans, LTDescr.val);
                        } else {
                            this._optional.path.placeLocal(this.trans, LTDescr.val);
                        }
                    } else {
                        this.trans.localPosition = this._optional.path.point(LTDescr.val);
                    }
                });
                return this;
            },
            /*LTDescr.setMoveCurvedLocal end.*/

            /*LTDescr.setMoveSpline start.*/
            setMoveSpline: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveSpline", this ); }

                this.type = TweenAction.MOVE_SPLINE;
                this.initInternal = Bridge.fn.cacheBind(this, this.initFromInternal);
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    if (this._optional.spline.orientToPath) {
                        if (this._optional.spline.orientToPath2d) {
                            this._optional.spline.place2d(this.trans, LTDescr.val);
                        } else {
                            this._optional.spline.place(this.trans, LTDescr.val);
                        }
                    } else {
                        this.trans.position = this._optional.spline.point(LTDescr.val);
                    }
                });
                return this;
            },
            /*LTDescr.setMoveSpline end.*/

            /*LTDescr.setMoveSplineLocal start.*/
            setMoveSplineLocal: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveSplineLocal", this ); }

                this.type = TweenAction.MOVE_SPLINE_LOCAL;
                this.initInternal = Bridge.fn.cacheBind(this, this.initFromInternal);
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    if (this._optional.spline.orientToPath) {
                        if (this._optional.spline.orientToPath2d) {
                            this._optional.spline.placeLocal2d(this.trans, LTDescr.val);
                        } else {
                            this._optional.spline.placeLocal(this.trans, LTDescr.val);
                        }
                    } else {
                        this.trans.localPosition = this._optional.spline.point(LTDescr.val);
                    }
                });
                return this;
            },
            /*LTDescr.setMoveSplineLocal end.*/

            /*LTDescr.setScaleX start.*/
            setScaleX: function () {
if ( TRACE ) { TRACE( "LTDescr#setScaleX", this ); }

                this.type = TweenAction.SCALE_X;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.localScale.x;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.localScale = new pc.Vec3( this.easeMethod().x, this.trans.localScale.y, this.trans.localScale.z );
                });
                return this;
            },
            /*LTDescr.setScaleX end.*/

            /*LTDescr.setScaleY start.*/
            setScaleY: function () {
if ( TRACE ) { TRACE( "LTDescr#setScaleY", this ); }

                this.type = TweenAction.SCALE_Y;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.localScale.y;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.localScale = new pc.Vec3( this.trans.localScale.x, this.easeMethod().x, this.trans.localScale.z );
                });
                return this;
            },
            /*LTDescr.setScaleY end.*/

            /*LTDescr.setScaleZ start.*/
            setScaleZ: function () {
if ( TRACE ) { TRACE( "LTDescr#setScaleZ", this ); }

                this.type = TweenAction.SCALE_Z;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.localScale.z;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.localScale = new pc.Vec3( this.trans.localScale.x, this.trans.localScale.y, this.easeMethod().x );
                });
                return this;
            },
            /*LTDescr.setScaleZ end.*/

            /*LTDescr.setRotateX start.*/
            setRotateX: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotateX", this ); }

                this.type = TweenAction.ROTATE_X;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.eulerAngles.x;
                    this.toInternal.x = LeanTween.closestRot(this.fromInternal.x, this.toInternal.x);
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.eulerAngles = new pc.Vec3( this.easeMethod().x, this.trans.eulerAngles.y, this.trans.eulerAngles.z );
                });
                return this;
            },
            /*LTDescr.setRotateX end.*/

            /*LTDescr.setRotateY start.*/
            setRotateY: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotateY", this ); }

                this.type = TweenAction.ROTATE_Y;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.eulerAngles.y;
                    this.toInternal.x = LeanTween.closestRot(this.fromInternal.x, this.toInternal.x);
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.eulerAngles = new pc.Vec3( this.trans.eulerAngles.x, this.easeMethod().x, this.trans.eulerAngles.z );
                });
                return this;
            },
            /*LTDescr.setRotateY end.*/

            /*LTDescr.setRotateZ start.*/
            setRotateZ: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotateZ", this ); }

                this.type = TweenAction.ROTATE_Z;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.eulerAngles.z;
                    this.toInternal.x = LeanTween.closestRot(this.fromInternal.x, this.toInternal.x);
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.eulerAngles = new pc.Vec3( this.trans.eulerAngles.x, this.trans.eulerAngles.y, this.easeMethod().x );
                });
                return this;
            },
            /*LTDescr.setRotateZ end.*/

            /*LTDescr.setRotateAround start.*/
            setRotateAround: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotateAround", this ); }

                this.type = TweenAction.ROTATE_AROUND;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = 0.0;
                    this._optional.origRotation = this.trans.rotation.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var origPos = this.trans.localPosition.$clone();
                    var rotateAroundPt = this.trans.TransformPoint$1(this._optional.point);
                    // Debug.Log("this._optional.point:"+this._optional.point);
                    this.trans.RotateAround(rotateAroundPt.$clone(), this._optional.axis.$clone(), -this._optional.lastVal);
                    var diff = origPos.$clone().sub( this.trans.localPosition );

                    this.trans.localPosition = origPos.$clone().sub( diff ); // Subtract the amount the object has been shifted over by the rotate, to get it back to it's orginal position
                    this.trans.rotation = this._optional.origRotation.$clone();

                    rotateAroundPt = this.trans.TransformPoint$1(this._optional.point);
                    this.trans.RotateAround(rotateAroundPt.$clone(), this._optional.axis.$clone(), LTDescr.val);

                    this._optional.lastVal = LTDescr.val;
                });
                return this;
            },
            /*LTDescr.setRotateAround end.*/

            /*LTDescr.setRotateAroundLocal start.*/
            setRotateAroundLocal: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotateAroundLocal", this ); }

                this.type = TweenAction.ROTATE_AROUND_LOCAL;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = 0.0;
                    this._optional.origRotation = this.trans.localRotation.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var origPos = this.trans.localPosition.$clone();
                    this.trans.RotateAround(this.trans.TransformPoint$1(this._optional.point), this.trans.TransformDirection$1(this._optional.axis.$clone()), -this._optional.lastVal);
                    var diff = origPos.$clone().sub( this.trans.localPosition );

                    this.trans.localPosition = origPos.$clone().sub( diff ); // Subtract the amount the object has been shifted over by the rotate, to get it back to it's orginal position
                    this.trans.localRotation = this._optional.origRotation.$clone();
                    var rotateAroundPt = this.trans.TransformPoint$1(this._optional.point);
                    this.trans.RotateAround(rotateAroundPt.$clone(), this.trans.TransformDirection$1(this._optional.axis.$clone()), LTDescr.val);

                    this._optional.lastVal = LTDescr.val;
                });
                return this;
            },
            /*LTDescr.setRotateAroundLocal end.*/

            /*LTDescr.setAlpha start.*/
            setAlpha: function () {
if ( TRACE ) { TRACE( "LTDescr#setAlpha", this ); }

                this.type = TweenAction.ALPHA;
                this.initInternal = Bridge.fn.bind(this, function () {
                    var $t;
                    var ren = this.trans.GetComponent(UnityEngine.SpriteRenderer);
                    if (UnityEngine.Component.op_Inequality(ren, null)) {
                        this.fromInternal.x = ren.color.a;
                    } else {
                        if (UnityEngine.Component.op_Inequality(this.trans.GetComponent(UnityEngine.Renderer), null) && this.trans.GetComponent(UnityEngine.Renderer).material.HasProperty$1("_Color")) {
                            this.fromInternal.x = this.trans.GetComponent(UnityEngine.Renderer).material.color.a;
                        } else if (UnityEngine.Component.op_Inequality(this.trans.GetComponent(UnityEngine.Renderer), null) && this.trans.GetComponent(UnityEngine.Renderer).material.HasProperty$1("_TintColor")) {
                            var col = this.trans.GetComponent(UnityEngine.Renderer).material.GetColor$1("_TintColor");
                            this.fromInternal.x = col.a;
                        } else if (this.trans.childCount > 0) {
                            $t = Bridge.getEnumerator(this.trans);
                            try {
                                while ($t.moveNext()) {
                                    var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                    if (UnityEngine.Component.op_Inequality(child.gameObject.GetComponent(UnityEngine.Renderer), null)) {
                                        var col1 = child.gameObject.GetComponent(UnityEngine.Renderer).material.color.$clone();
                                        this.fromInternal.x = col1.a;
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        }
                    }

                    this.easeInternal = Bridge.fn.bind(this, function () {
                        LTDescr.val = this.easeMethod().x;
                        if (UnityEngine.Component.op_Inequality(this.spriteRen, null)) {
                            this.spriteRen.color = new pc.Color( this.spriteRen.color.r, this.spriteRen.color.g, this.spriteRen.color.b, LTDescr.val );
                            LTDescr.alphaRecursiveSprite(this.trans, LTDescr.val);
                        } else {
                            LTDescr.alphaRecursive$1(this.trans, LTDescr.val, this.useRecursion);
                        }
                    });

                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    if (UnityEngine.Component.op_Inequality(this.spriteRen, null)) {
                        this.spriteRen.color = new pc.Color( this.spriteRen.color.r, this.spriteRen.color.g, this.spriteRen.color.b, LTDescr.val );
                        LTDescr.alphaRecursiveSprite(this.trans, LTDescr.val);
                    } else {
                        LTDescr.alphaRecursive$1(this.trans, LTDescr.val, this.useRecursion);
                    }
                });
                return this;
            },
            /*LTDescr.setAlpha end.*/

            /*LTDescr.setTextAlpha start.*/
            setTextAlpha: function () {
if ( TRACE ) { TRACE( "LTDescr#setTextAlpha", this ); }

                this.type = TweenAction.TEXT_ALPHA;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.uiText = this.trans.GetComponent(UnityEngine.UI.Text);
                    this.fromInternal.x = UnityEngine.MonoBehaviour.op_Inequality(this.uiText, null) ? this.uiText.color.a : 1.0;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.textAlphaRecursive(this.trans, this.easeMethod().x, this.useRecursion);
                });
                return this;
            },
            /*LTDescr.setTextAlpha end.*/

            /*LTDescr.setAlphaVertex start.*/
            setAlphaVertex: function () {
if ( TRACE ) { TRACE( "LTDescr#setAlphaVertex", this ); }

                this.type = TweenAction.ALPHA_VERTEX;
                this.initInternal = Bridge.fn.bind(this, function () {
                    var $t;
                    this.fromInternal.x = ($t = this.trans.GetComponent(UnityEngine.MeshFilter).mesh.colors32)[0].a;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var $t;
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var mesh = this.trans.GetComponent(UnityEngine.MeshFilter).mesh;
                    var vertices = mesh.vertices;
                    var colors = System.Array.init(vertices.length, function (){
                        return new UnityEngine.Color32();
                    }, UnityEngine.Color32);
                    if (colors.length === 0) { //MaxFW fix: add vertex colors if the mesh doesn't have any             
                        var transparentWhiteColor32 = new UnityEngine.Color32.$ctor1(255, 255, 255, 0);
                        colors = System.Array.init(mesh.vertices.length, function (){
                            return new UnityEngine.Color32();
                        }, UnityEngine.Color32);
                        for (var k = 0; k < colors.length; k = (k + 1) | 0) {
                            colors[k] = transparentWhiteColor32.$clone();
                        }
                        mesh.colors32 = colors;
                    } // fix end
                    var c = ($t = mesh.colors32)[0].$clone();
                    c = UnityEngine.Color32.op_Implicit$1(new pc.Color( c.r, c.g, c.b, LTDescr.val ));
                    for (var k1 = 0; k1 < vertices.length; k1 = (k1 + 1) | 0) {
                        colors[k1] = c.$clone();
                    }
                    mesh.colors32 = colors;
                });
                return this;
            },
            /*LTDescr.setAlphaVertex end.*/

            /*LTDescr.setColor start.*/
            setColor: function () {
if ( TRACE ) { TRACE( "LTDescr#setColor", this ); }

                this.type = TweenAction.COLOR;
                this.initInternal = Bridge.fn.bind(this, function () {
                    var $t;
                    var renColor = this.trans.GetComponent(UnityEngine.SpriteRenderer);
                    if (UnityEngine.Component.op_Inequality(renColor, null)) {
                        this.setFromColor(renColor.color);
                    } else {
                        if (UnityEngine.Component.op_Inequality(this.trans.GetComponent(UnityEngine.Renderer), null) && this.trans.GetComponent(UnityEngine.Renderer).material.HasProperty$1("_Color")) {
                            var col = this.trans.GetComponent(UnityEngine.Renderer).material.color.$clone();
                            this.setFromColor(col);
                        } else if (UnityEngine.Component.op_Inequality(this.trans.GetComponent(UnityEngine.Renderer), null) && this.trans.GetComponent(UnityEngine.Renderer).material.HasProperty$1("_TintColor")) {
                            var col1 = this.trans.GetComponent(UnityEngine.Renderer).material.GetColor$1("_TintColor");
                            this.setFromColor(col1);
                        } else if (this.trans.childCount > 0) {
                            $t = Bridge.getEnumerator(this.trans);
                            try {
                                while ($t.moveNext()) {
                                    var child = Bridge.cast($t.Current, UnityEngine.Transform);
                                    if (UnityEngine.Component.op_Inequality(child.gameObject.GetComponent(UnityEngine.Renderer), null)) {
                                        var col2 = child.gameObject.GetComponent(UnityEngine.Renderer).material.color.$clone();
                                        this.setFromColor(col2);
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t, System.IDisposable)) {
                                    $t.System$IDisposable$Dispose();
                                }
                            }
                        }
                    }
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var toColor = LTDescr.tweenColor(this, LTDescr.val);


                    if (UnityEngine.Component.op_Inequality(this.spriteRen, null)) {
                        this.spriteRen.color = toColor.$clone();
                        LTDescr.colorRecursiveSprite(this.trans, toColor);
                    } else {
                        // Debug.Log("val:"+val+" tween:"+tween+" tween.diff:"+tween.diff);
                        if (this.type === TweenAction.COLOR) {
                            LTDescr.colorRecursive$1(this.trans, toColor, this.useRecursion);
                        }

                    }
                    if (LTDescr.dt !== 0.0 && !Bridge.staticEquals(this._optional.onUpdateColor, null)) {
                        this._optional.onUpdateColor(toColor.$clone());
                    } else if (LTDescr.dt !== 0.0 && !Bridge.staticEquals(this._optional.onUpdateColorObject, null)) {
                        this._optional.onUpdateColorObject(toColor.$clone(), this._optional.onUpdateParam);
                    }
                });
                return this;
            },
            /*LTDescr.setColor end.*/

            /*LTDescr.setCallbackColor start.*/
            setCallbackColor: function () {
if ( TRACE ) { TRACE( "LTDescr#setCallbackColor", this ); }

                this.type = TweenAction.CALLBACK_COLOR;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.diff = new pc.Vec3( 1.0, 0.0, 0.0 );
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var toColor = LTDescr.tweenColor(this, LTDescr.val);

                    if (UnityEngine.Component.op_Inequality(this.spriteRen, null)) {
                        this.spriteRen.color = toColor.$clone();
                        LTDescr.colorRecursiveSprite(this.trans, toColor);
                    } else {
                        // Debug.Log("val:"+val+" tween:"+tween+" tween.diff:"+tween.diff);
                        if (this.type === TweenAction.COLOR) {
                            LTDescr.colorRecursive$1(this.trans, toColor, this.useRecursion);
                        }

                    }
                    if (LTDescr.dt !== 0.0 && !Bridge.staticEquals(this._optional.onUpdateColor, null)) {
                        this._optional.onUpdateColor(toColor.$clone());
                    } else if (LTDescr.dt !== 0.0 && !Bridge.staticEquals(this._optional.onUpdateColorObject, null)) {
                        this._optional.onUpdateColorObject(toColor.$clone(), this._optional.onUpdateParam);
                    }
                });
                return this;
            },
            /*LTDescr.setCallbackColor end.*/

            /*LTDescr.setTextColor start.*/
            setTextColor: function () {
if ( TRACE ) { TRACE( "LTDescr#setTextColor", this ); }

                this.type = TweenAction.TEXT_COLOR;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.uiText = this.trans.GetComponent(UnityEngine.UI.Text);
                    this.setFromColor(UnityEngine.MonoBehaviour.op_Inequality(this.uiText, null) ? this.uiText.color.$clone() : new pc.Color( 1, 1, 1, 1 ));
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var toColor = LTDescr.tweenColor(this, LTDescr.val);
                    this.uiText.color = toColor.$clone();
                    if (LTDescr.dt !== 0.0 && !Bridge.staticEquals(this._optional.onUpdateColor, null)) {
                        this._optional.onUpdateColor(toColor.$clone());
                    }

                    if (this.useRecursion && this.trans.childCount > 0) {
                        LTDescr.textColorRecursive(this.trans, toColor);
                    }
                });
                return this;
            },
            /*LTDescr.setTextColor end.*/

            /*LTDescr.setCanvasAlpha start.*/
            setCanvasAlpha: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasAlpha", this ); }

                this.type = TweenAction.CANVAS_ALPHA;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.uiImage = this.trans.GetComponent(UnityEngine.UI.Image);
                    if (UnityEngine.MonoBehaviour.op_Inequality(this.uiImage, null)) {
                        this.fromInternal.x = this.uiImage.color.a;
                    } else {
                        this.rawImage = this.trans.GetComponent(UnityEngine.UI.RawImage);
                        if (UnityEngine.MonoBehaviour.op_Inequality(this.rawImage, null)) {
                            this.fromInternal.x = this.rawImage.color.a;
                        } else {
                            this.fromInternal.x = 1.0;
                        }
                    }

                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    if (UnityEngine.MonoBehaviour.op_Inequality(this.uiImage, null)) {
                        var c = this.uiImage.color.$clone();
                        c.a = LTDescr.val;
                        this.uiImage.color = c.$clone();
                    } else if (UnityEngine.MonoBehaviour.op_Inequality(this.rawImage, null)) {
                        var c1 = this.rawImage.color.$clone();
                        c1.a = LTDescr.val;
                        this.rawImage.color = c1.$clone();
                    }
                    if (this.useRecursion) {
                        LTDescr.alphaRecursive(this.rectTransform, LTDescr.val, 0);
                        LTDescr.textAlphaChildrenRecursive(this.rectTransform, LTDescr.val);
                    }
                });
                return this;
            },
            /*LTDescr.setCanvasAlpha end.*/

            /*LTDescr.setCanvasGroupAlpha start.*/
            setCanvasGroupAlpha: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasGroupAlpha", this ); }

                this.type = TweenAction.CANVASGROUP_ALPHA;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.trans.GetComponent(UnityEngine.CanvasGroup).alpha;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.trans.GetComponent(UnityEngine.CanvasGroup).alpha = this.easeMethod().x;
                });
                return this;
            },
            /*LTDescr.setCanvasGroupAlpha end.*/

            /*LTDescr.setCanvasColor start.*/
            setCanvasColor: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasColor", this ); }

                this.type = TweenAction.CANVAS_COLOR;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.uiImage = this.trans.GetComponent(UnityEngine.UI.Image);
                    if (UnityEngine.MonoBehaviour.op_Equality(this.uiImage, null)) {
                        this.rawImage = this.trans.GetComponent(UnityEngine.UI.RawImage);
                        this.setFromColor(UnityEngine.MonoBehaviour.op_Inequality(this.rawImage, null) ? this.rawImage.color.$clone() : new pc.Color( 1, 1, 1, 1 ));
                    } else {
                        this.setFromColor(this.uiImage.color);
                    }

                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var toColor = LTDescr.tweenColor(this, LTDescr.val);
                    if (UnityEngine.MonoBehaviour.op_Inequality(this.uiImage, null)) {
                        this.uiImage.color = toColor.$clone();
                    } else if (UnityEngine.MonoBehaviour.op_Inequality(this.rawImage, null)) {
                        this.rawImage.color = toColor.$clone();
                    }

                    if (LTDescr.dt !== 0.0 && !Bridge.staticEquals(this._optional.onUpdateColor, null)) {
                        this._optional.onUpdateColor(toColor.$clone());
                    }

                    if (this.useRecursion) {
                        LTDescr.colorRecursive(this.rectTransform, toColor);
                    }
                });
                return this;
            },
            /*LTDescr.setCanvasColor end.*/

            /*LTDescr.setCanvasMoveX start.*/
            setCanvasMoveX: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasMoveX", this ); }

                this.type = TweenAction.CANVAS_MOVE_X;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.rectTransform.anchoredPosition3D.x;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var c = this.rectTransform.anchoredPosition3D.$clone();
                    this.rectTransform.anchoredPosition3D = new pc.Vec3( this.easeMethod().x, c.y, c.z );
                });
                return this;
            },
            /*LTDescr.setCanvasMoveX end.*/

            /*LTDescr.setCanvasMoveY start.*/
            setCanvasMoveY: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasMoveY", this ); }

                this.type = TweenAction.CANVAS_MOVE_Y;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.rectTransform.anchoredPosition3D.y;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var c = this.rectTransform.anchoredPosition3D.$clone();
                    this.rectTransform.anchoredPosition3D = new pc.Vec3( c.x, this.easeMethod().x, c.z );
                });
                return this;
            },
            /*LTDescr.setCanvasMoveY end.*/

            /*LTDescr.setCanvasMoveZ start.*/
            setCanvasMoveZ: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasMoveZ", this ); }

                this.type = TweenAction.CANVAS_MOVE_Z;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this.rectTransform.anchoredPosition3D.z;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var c = this.rectTransform.anchoredPosition3D.$clone();
                    this.rectTransform.anchoredPosition3D = new pc.Vec3( c.x, c.y, this.easeMethod().x );
                });
                return this;
            },
            /*LTDescr.setCanvasMoveZ end.*/

            /*LTDescr.initCanvasRotateAround start.*/
            initCanvasRotateAround: function () {
if ( TRACE ) { TRACE( "LTDescr#initCanvasRotateAround", this ); }

                this.lastVal = 0.0;
                this.fromInternal.x = 0.0;
                this._optional.origRotation = this.rectTransform.rotation.$clone();
            },
            /*LTDescr.initCanvasRotateAround end.*/

            /*LTDescr.setCanvasRotateAround start.*/
            setCanvasRotateAround: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasRotateAround", this ); }

                this.type = TweenAction.CANVAS_ROTATEAROUND;
                this.initInternal = Bridge.fn.cacheBind(this, this.initCanvasRotateAround);
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var rect = this.rectTransform;
                    var origPos = rect.localPosition.$clone();
                    rect.RotateAround(rect.TransformPoint$1(this._optional.point), this._optional.axis.$clone(), -LTDescr.val);
                    var diff = origPos.$clone().sub( rect.localPosition );

                    rect.localPosition = origPos.$clone().sub( diff ); // Subtract the amount the object has been shifted over by the rotate, to get it back to it's orginal position
                    rect.rotation = this._optional.origRotation.$clone();
                    rect.RotateAround(rect.TransformPoint$1(this._optional.point), this._optional.axis.$clone(), LTDescr.val);
                });
                return this;
            },
            /*LTDescr.setCanvasRotateAround end.*/

            /*LTDescr.setCanvasRotateAroundLocal start.*/
            setCanvasRotateAroundLocal: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasRotateAroundLocal", this ); }

                this.type = TweenAction.CANVAS_ROTATEAROUND_LOCAL;
                this.initInternal = Bridge.fn.cacheBind(this, this.initCanvasRotateAround);
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var rect = this.rectTransform;
                    var origPos = rect.localPosition.$clone();
                    rect.RotateAround(rect.TransformPoint$1(this._optional.point), rect.TransformDirection$1(this._optional.axis.$clone()), -LTDescr.val);
                    var diff = origPos.$clone().sub( rect.localPosition );

                    rect.localPosition = origPos.$clone().sub( diff ); // Subtract the amount the object has been shifted over by the rotate, to get it back to it's orginal position
                    rect.rotation = this._optional.origRotation.$clone();
                    rect.RotateAround(rect.TransformPoint$1(this._optional.point), rect.TransformDirection$1(this._optional.axis.$clone()), LTDescr.val);
                });
                return this;
            },
            /*LTDescr.setCanvasRotateAroundLocal end.*/

            /*LTDescr.setCanvasPlaySprite start.*/
            setCanvasPlaySprite: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasPlaySprite", this ); }

                this.type = TweenAction.CANVAS_PLAYSPRITE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.uiImage = this.trans.GetComponent(UnityEngine.UI.Image);
                    this.fromInternal.x = 0.0;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    LTDescr.val = LTDescr.newVect.x;
                    var frame = Bridge.Int.clip32(Math.round(LTDescr.val));
                    this.uiImage.sprite = this.sprites[frame];
                });
                return this;
            },
            /*LTDescr.setCanvasPlaySprite end.*/

            /*LTDescr.setCanvasMove start.*/
            setCanvasMove: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasMove", this ); }

                this.type = TweenAction.CANVAS_MOVE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal = this.rectTransform.anchoredPosition3D.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.rectTransform.anchoredPosition3D = this.easeMethod();
                });
                return this;
            },
            /*LTDescr.setCanvasMove end.*/

            /*LTDescr.setCanvasScale start.*/
            setCanvasScale: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasScale", this ); }

                this.type = TweenAction.CANVAS_SCALE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.rectTransform.localScale.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.rectTransform.localScale = this.easeMethod();
                });
                return this;
            },
            /*LTDescr.setCanvasScale end.*/

            /*LTDescr.setCanvasSizeDelta start.*/
            setCanvasSizeDelta: function () {
if ( TRACE ) { TRACE( "LTDescr#setCanvasSizeDelta", this ); }

                this.type = TweenAction.CANVAS_SIZEDELTA;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = UnityEngine.Vector3.FromVector2(this.rectTransform.sizeDelta.$clone());
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.rectTransform.sizeDelta = UnityEngine.Vector2.FromVector3(this.easeMethod());
                });
                return this;
            },
            /*LTDescr.setCanvasSizeDelta end.*/

            /*LTDescr.callback start.*/
            callback: function () {
if ( TRACE ) { TRACE( "LTDescr#callback", this ); }

                LTDescr.newVect = this.easeMethod();
                LTDescr.val = LTDescr.newVect.x;
            },
            /*LTDescr.callback end.*/

            /*LTDescr.setCallback start.*/
            setCallback: function () {
if ( TRACE ) { TRACE( "LTDescr#setCallback", this ); }

                this.type = TweenAction.CALLBACK;
                this.initInternal = function () { };
                this.easeInternal = Bridge.fn.cacheBind(this, this.callback);
                return this;
            },
            /*LTDescr.setCallback end.*/

            /*LTDescr.setValue3 start.*/
            setValue3: function () {
if ( TRACE ) { TRACE( "LTDescr#setValue3", this ); }

                this.type = TweenAction.VALUE3;
                this.initInternal = function () { };
                this.easeInternal = Bridge.fn.cacheBind(this, this.callback);
                return this;
            },
            /*LTDescr.setValue3 end.*/

            /*LTDescr.setMove start.*/
            setMove: function () {
if ( TRACE ) { TRACE( "LTDescr#setMove", this ); }

                this.type = TweenAction.MOVE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.trans.position.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    this.trans.position = LTDescr.newVect.$clone();
                });
                return this;
            },
            /*LTDescr.setMove end.*/

            /*LTDescr.setMoveLocal start.*/
            setMoveLocal: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveLocal", this ); }

                this.type = TweenAction.MOVE_LOCAL;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.trans.localPosition.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    this.trans.localPosition = LTDescr.newVect.$clone();
                });
                return this;
            },
            /*LTDescr.setMoveLocal end.*/

            /*LTDescr.setMoveToTransform start.*/
            setMoveToTransform: function () {
if ( TRACE ) { TRACE( "LTDescr#setMoveToTransform", this ); }

                this.type = TweenAction.MOVE_TO_TRANSFORM;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.trans.position.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this.to = this._optional.toTrans.position.$clone();
                    this.diff = this.to.$clone().sub( this.from );
                    this.diffDiv2 = this.diff.$clone().clone().scale( 0.5 );

                    LTDescr.newVect = this.easeMethod();
                    this.trans.position = LTDescr.newVect.$clone();
                });
                return this;
            },
            /*LTDescr.setMoveToTransform end.*/

            /*LTDescr.setRotate start.*/
            setRotate: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotate", this ); }

                this.type = TweenAction.ROTATE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.trans.eulerAngles.$clone();
                    this.to = new pc.Vec3( LeanTween.closestRot(this.fromInternal.x, this.toInternal.x), LeanTween.closestRot(this.from.y, this.to.y), LeanTween.closestRot(this.from.z, this.to.z) );
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    this.trans.eulerAngles = LTDescr.newVect.$clone();
                });
                return this;
            },
            /*LTDescr.setRotate end.*/

            /*LTDescr.setRotateLocal start.*/
            setRotateLocal: function () {
if ( TRACE ) { TRACE( "LTDescr#setRotateLocal", this ); }

                this.type = TweenAction.ROTATE_LOCAL;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.trans.localEulerAngles.$clone();
                    this.to = new pc.Vec3( LeanTween.closestRot(this.fromInternal.x, this.toInternal.x), LeanTween.closestRot(this.from.y, this.to.y), LeanTween.closestRot(this.from.z, this.to.z) );
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    this.trans.localEulerAngles = LTDescr.newVect.$clone();
                });
                return this;
            },
            /*LTDescr.setRotateLocal end.*/

            /*LTDescr.setScale start.*/
            setScale: function () {
if ( TRACE ) { TRACE( "LTDescr#setScale", this ); }

                this.type = TweenAction.SCALE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = this.trans.localScale.$clone();
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    LTDescr.newVect = this.easeMethod();
                    this.trans.localScale = LTDescr.newVect.$clone();
                });
                return this;
            },
            /*LTDescr.setScale end.*/

            /*LTDescr.setScale$1 start.*/
            setScale$1: function (scale) {
if ( TRACE ) { TRACE( "LTDescr#setScale$1", this ); }

                this.scale = scale;
                return this;
            },
            /*LTDescr.setScale$1 end.*/

            /*LTDescr.setGUIMove start.*/
            setGUIMove: function () {
if ( TRACE ) { TRACE( "LTDescr#setGUIMove", this ); }

                this.type = TweenAction.GUI_MOVE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = new pc.Vec3( this._optional.ltRect.rect.x, this._optional.ltRect.rect.y, 0 );
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var v = this.easeMethod();
                    this._optional.ltRect.rect = new UnityEngine.Rect.$ctor1(v.x, v.y, this._optional.ltRect.rect.width, this._optional.ltRect.rect.height);
                });
                return this;
            },
            /*LTDescr.setGUIMove end.*/

            /*LTDescr.setGUIMoveMargin start.*/
            setGUIMoveMargin: function () {
if ( TRACE ) { TRACE( "LTDescr#setGUIMoveMargin", this ); }

                this.type = TweenAction.GUI_MOVE_MARGIN;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = UnityEngine.Vector3.FromVector2(new pc.Vec2( this._optional.ltRect.margin.x, this._optional.ltRect.margin.y ));
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var v = this.easeMethod();
                    this._optional.ltRect.margin = new pc.Vec2( v.x, v.y );
                });
                return this;
            },
            /*LTDescr.setGUIMoveMargin end.*/

            /*LTDescr.setGUIScale start.*/
            setGUIScale: function () {
if ( TRACE ) { TRACE( "LTDescr#setGUIScale", this ); }

                this.type = TweenAction.GUI_SCALE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.from = new pc.Vec3( this._optional.ltRect.rect.width, this._optional.ltRect.rect.height, 0 );
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    var v = this.easeMethod();
                    this._optional.ltRect.rect = new UnityEngine.Rect.$ctor1(this._optional.ltRect.rect.x, this._optional.ltRect.rect.y, v.x, v.y);
                });
                return this;
            },
            /*LTDescr.setGUIScale end.*/

            /*LTDescr.setGUIAlpha start.*/
            setGUIAlpha: function () {
if ( TRACE ) { TRACE( "LTDescr#setGUIAlpha", this ); }

                this.type = TweenAction.GUI_ALPHA;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.fromInternal.x = this._optional.ltRect.alpha;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this._optional.ltRect.alpha = this.easeMethod().x;
                });
                return this;
            },
            /*LTDescr.setGUIAlpha end.*/

            /*LTDescr.setGUIRotate start.*/
            setGUIRotate: function () {
if ( TRACE ) { TRACE( "LTDescr#setGUIRotate", this ); }

                this.type = TweenAction.GUI_ROTATE;
                this.initInternal = Bridge.fn.bind(this, function () {
                    if (this._optional.ltRect.rotateEnabled === false) {
                        this._optional.ltRect.rotateEnabled = true;
                        this._optional.ltRect.resetForRotation();
                    }

                    this.fromInternal.x = this._optional.ltRect.rotation;
                });
                this.easeInternal = Bridge.fn.bind(this, function () {
                    this._optional.ltRect.rotation = this.easeMethod().x;
                });
                return this;
            },
            /*LTDescr.setGUIRotate end.*/

            /*LTDescr.setDelayedSound start.*/
            setDelayedSound: function () {
if ( TRACE ) { TRACE( "LTDescr#setDelayedSound", this ); }

                this.type = TweenAction.DELAYED_SOUND;
                this.initInternal = Bridge.fn.bind(this, function () {
                    this.hasExtraOnCompletes = true;
                });
                this.easeInternal = Bridge.fn.cacheBind(this, this.callback);
                return this;
            },
            /*LTDescr.setDelayedSound end.*/

            /*LTDescr.setTarget start.*/
            setTarget: function (trans) {
if ( TRACE ) { TRACE( "LTDescr#setTarget", this ); }

                this.optional.toTrans = trans;
                return this;
            },
            /*LTDescr.setTarget end.*/

            /*LTDescr.init start.*/
            init: function () {
if ( TRACE ) { TRACE( "LTDescr#init", this ); }

                this.hasInitiliazed = true;

                this.usesNormalDt = !(this.useEstimatedTime || this.useManualTime || this.useFrames); // only set this to true if it uses non of the other timing modes

                if (this.useFrames) {
                    this.optional.initFrameCount = UnityEngine.Time.frameCount;
                }

                if (this.time <= 0.0) {
                    this.time = Number.EPSILON;
                }

                if (!Bridge.staticEquals(this.initInternal, null)) {
                    this.initInternal();
                }

                this.diff = this.to.$clone().sub( this.from );
                this.diffDiv2 = this.diff.$clone().clone().scale( 0.5 );

                if (!Bridge.staticEquals(this._optional.onStart, null)) {
                    this._optional.onStart();
                }

                if (this.onCompleteOnStart) {
                    this.callOnCompletes();
                }

                if (this.speed >= 0) {
                    this.initSpeed();
                }
            },
            /*LTDescr.init end.*/

            /*LTDescr.initSpeed start.*/
            initSpeed: function () {
if ( TRACE ) { TRACE( "LTDescr#initSpeed", this ); }

                if (this.type === TweenAction.MOVE_CURVED || this.type === TweenAction.MOVE_CURVED_LOCAL) {
                    this.time = this._optional.path.distance / this.speed;
                } else if (this.type === TweenAction.MOVE_SPLINE || this.type === TweenAction.MOVE_SPLINE_LOCAL) {
                    this.time = this._optional.spline.distance / this.speed;
                } else {
                    this.time = (this.to.$clone().sub( this.from )).length() / this.speed;
                }
            },
            /*LTDescr.initSpeed end.*/

            /*LTDescr.updateNow start.*/
            updateNow: function () {
if ( TRACE ) { TRACE( "LTDescr#updateNow", this ); }

                this.updateInternal();
                return this;
            },
            /*LTDescr.updateNow end.*/

            /*LTDescr.updateInternal start.*/
            updateInternal: function () {
if ( TRACE ) { TRACE( "LTDescr#updateInternal", this ); }


                var directionLocal = this.direction;
                if (this.usesNormalDt) {
                    LTDescr.dt = LeanTween.dtActual;
                } else if (this.useEstimatedTime) {
                    LTDescr.dt = LeanTween.dtEstimated;
                } else if (this.useFrames) {
                    LTDescr.dt = this.optional.initFrameCount === 0 ? 0 : 1;
                    this.optional.initFrameCount = UnityEngine.Time.frameCount;
                } else if (this.useManualTime) {
                    LTDescr.dt = LeanTween.dtManual;
                }

                //		Debug.Log ("tween:" + this+ " dt:"+dt);
                if (this.delay <= 0.0 && directionLocal !== 0.0) {
                    if (UnityEngine.Component.op_Equality(this.trans, null)) {
                        return true;
                    }

                    // initialize if has not done so yet
                    if (!this.hasInitiliazed) {
                        this.init();
                    }

                    LTDescr.dt = LTDescr.dt * directionLocal;
                    this.passed += LTDescr.dt;

                    this.passed = Math.max(0.0, Math.min(this.passed, this.time));

                    this.ratioPassed = (this.passed / this.time); // need to clamp when finished so it will finish at the exact spot and not overshoot

                    this.easeInternal();

                    if (this.hasUpdateCallback) {
                        this._optional.callOnUpdate(LTDescr.val, this.ratioPassed);
                    }

                    var isTweenFinished = directionLocal > 0.0 ? this.passed >= this.time : this.passed <= 0.0;
                    //			Debug.Log("lt "+this+" dt:"+dt+" fin:"+isTweenFinished);
                    if (isTweenFinished) { // increment or flip tween
                        this.loopCount = (this.loopCount - 1) | 0;
                        if (this.loopType === LeanTweenType.pingPong) {
                            this.direction = 0.0 - directionLocal;
                        } else {
                            this.passed = Number.EPSILON;
                        }

                        isTweenFinished = this.loopCount === 0 || this.loopType === LeanTweenType.once; // only return true if it is fully complete

                        if (isTweenFinished === false && this.onCompleteOnRepeat && this.hasExtraOnCompletes) {
                            this.callOnCompletes();
                        } // this only gets called if onCompleteOnRepeat is set to true, otherwise LeanTween class takes care of calling it

                        return isTweenFinished;
                    }
                } else {
                    this.delay -= LTDescr.dt;
                }

                return false;
            },
            /*LTDescr.updateInternal end.*/

            /*LTDescr.callOnCompletes start.*/
            callOnCompletes: function () {
if ( TRACE ) { TRACE( "LTDescr#callOnCompletes", this ); }

                if (this.type === TweenAction.GUI_ROTATE) {
                    this._optional.ltRect.rotateFinished = true;
                }

                if (this.type === TweenAction.DELAYED_SOUND) {
                    UnityEngine.AudioSource.PlayClipAtPoint(Bridge.cast(this._optional.onCompleteParam, UnityEngine.AudioClip), this.to, this.from.x);
                }
                if (!Bridge.staticEquals(this._optional.onComplete, null)) {
                    this._optional.onComplete();
                } else if (!Bridge.staticEquals(this._optional.onCompleteObject, null)) {
                    this._optional.onCompleteObject(this._optional.onCompleteParam);
                }
            },
            /*LTDescr.callOnCompletes end.*/

            /*LTDescr.setFromColor start.*/
            setFromColor: function (col) {
if ( TRACE ) { TRACE( "LTDescr#setFromColor", this ); }

                this.from = new pc.Vec3( 0.0, col.a, 0.0 );
                this.diff = new pc.Vec3( 1.0, 0.0, 0.0 );
                this._optional.axis = new pc.Vec3( col.r, col.g, col.b );
                return this;
            },
            /*LTDescr.setFromColor end.*/

            /*LTDescr.pause start.*/
            pause: function () {
if ( TRACE ) { TRACE( "LTDescr#pause", this ); }

                if (this.direction !== 0.0) { // check if tween is already paused
                    this.directionLast = this.direction;
                    this.direction = 0.0;
                }

                return this;
            },
            /*LTDescr.pause end.*/

            /*LTDescr.resume start.*/
            resume: function () {
if ( TRACE ) { TRACE( "LTDescr#resume", this ); }

                this.direction = this.directionLast;

                return this;
            },
            /*LTDescr.resume end.*/

            /*LTDescr.setAxis start.*/
            setAxis: function (axis) {
if ( TRACE ) { TRACE( "LTDescr#setAxis", this ); }

                this._optional.axis = axis.$clone();
                return this;
            },
            /*LTDescr.setAxis end.*/

            /*LTDescr.setDelay start.*/
            setDelay: function (delay) {
if ( TRACE ) { TRACE( "LTDescr#setDelay", this ); }

                this.delay = delay;

                return this;
            },
            /*LTDescr.setDelay end.*/

            /*LTDescr.setEase start.*/
            setEase: function (easeType) {
if ( TRACE ) { TRACE( "LTDescr#setEase", this ); }


                switch (easeType) {
                    case LeanTweenType.linear: 
                        this.setEaseLinear();
                        break;
                    case LeanTweenType.easeOutQuad: 
                        this.setEaseOutQuad();
                        break;
                    case LeanTweenType.easeInQuad: 
                        this.setEaseInQuad();
                        break;
                    case LeanTweenType.easeInOutQuad: 
                        this.setEaseInOutQuad();
                        break;
                    case LeanTweenType.easeInCubic: 
                        this.setEaseInCubic();
                        break;
                    case LeanTweenType.easeOutCubic: 
                        this.setEaseOutCubic();
                        break;
                    case LeanTweenType.easeInOutCubic: 
                        this.setEaseInOutCubic();
                        break;
                    case LeanTweenType.easeInQuart: 
                        this.setEaseInQuart();
                        break;
                    case LeanTweenType.easeOutQuart: 
                        this.setEaseOutQuart();
                        break;
                    case LeanTweenType.easeInOutQuart: 
                        this.setEaseInOutQuart();
                        break;
                    case LeanTweenType.easeInQuint: 
                        this.setEaseInQuint();
                        break;
                    case LeanTweenType.easeOutQuint: 
                        this.setEaseOutQuint();
                        break;
                    case LeanTweenType.easeInOutQuint: 
                        this.setEaseInOutQuint();
                        break;
                    case LeanTweenType.easeInSine: 
                        this.setEaseInSine();
                        break;
                    case LeanTweenType.easeOutSine: 
                        this.setEaseOutSine();
                        break;
                    case LeanTweenType.easeInOutSine: 
                        this.setEaseInOutSine();
                        break;
                    case LeanTweenType.easeInExpo: 
                        this.setEaseInExpo();
                        break;
                    case LeanTweenType.easeOutExpo: 
                        this.setEaseOutExpo();
                        break;
                    case LeanTweenType.easeInOutExpo: 
                        this.setEaseInOutExpo();
                        break;
                    case LeanTweenType.easeInCirc: 
                        this.setEaseInCirc();
                        break;
                    case LeanTweenType.easeOutCirc: 
                        this.setEaseOutCirc();
                        break;
                    case LeanTweenType.easeInOutCirc: 
                        this.setEaseInOutCirc();
                        break;
                    case LeanTweenType.easeInBounce: 
                        this.setEaseInBounce();
                        break;
                    case LeanTweenType.easeOutBounce: 
                        this.setEaseOutBounce();
                        break;
                    case LeanTweenType.easeInOutBounce: 
                        this.setEaseInOutBounce();
                        break;
                    case LeanTweenType.easeInBack: 
                        this.setEaseInBack();
                        break;
                    case LeanTweenType.easeOutBack: 
                        this.setEaseOutBack();
                        break;
                    case LeanTweenType.easeInOutBack: 
                        this.setEaseInOutBack();
                        break;
                    case LeanTweenType.easeInElastic: 
                        this.setEaseInElastic();
                        break;
                    case LeanTweenType.easeOutElastic: 
                        this.setEaseOutElastic();
                        break;
                    case LeanTweenType.easeInOutElastic: 
                        this.setEaseInOutElastic();
                        break;
                    case LeanTweenType.punch: 
                        this.setEasePunch();
                        break;
                    case LeanTweenType.easeShake: 
                        this.setEaseShake();
                        break;
                    case LeanTweenType.easeSpring: 
                        this.setEaseSpring();
                        break;
                    default: 
                        this.setEaseLinear();
                        break;
                }

                return this;
            },
            /*LTDescr.setEase end.*/

            /*LTDescr.setEase$1 start.*/
            setEase$1: function (easeCurve) {
if ( TRACE ) { TRACE( "LTDescr#setEase$1", this ); }

                this._optional.animationCurve = easeCurve;
                this.easeMethod = Bridge.fn.cacheBind(this, this.tweenOnCurve);
                this.easeType = LeanTweenType.animationCurve;
                return this;
            },
            /*LTDescr.setEase$1 end.*/

            /*LTDescr.setEaseLinear start.*/
            setEaseLinear: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseLinear", this ); }

                this.easeType = LeanTweenType.linear;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeLinear);
                return this;
            },
            /*LTDescr.setEaseLinear end.*/

            /*LTDescr.setEaseSpring start.*/
            setEaseSpring: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseSpring", this ); }

                this.easeType = LeanTweenType.easeSpring;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeSpring);
                return this;
            },
            /*LTDescr.setEaseSpring end.*/

            /*LTDescr.setEaseInQuad start.*/
            setEaseInQuad: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInQuad", this ); }

                this.easeType = LeanTweenType.easeInQuad;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInQuad);
                return this;
            },
            /*LTDescr.setEaseInQuad end.*/

            /*LTDescr.setEaseOutQuad start.*/
            setEaseOutQuad: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutQuad", this ); }

                this.easeType = LeanTweenType.easeOutQuad;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutQuad);
                return this;
            },
            /*LTDescr.setEaseOutQuad end.*/

            /*LTDescr.setEaseInOutQuad start.*/
            setEaseInOutQuad: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutQuad", this ); }

                this.easeType = LeanTweenType.easeInOutQuad;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutQuad);
                return this;
            },
            /*LTDescr.setEaseInOutQuad end.*/

            /*LTDescr.setEaseInCubic start.*/
            setEaseInCubic: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInCubic", this ); }

                this.easeType = LeanTweenType.easeInCubic;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInCubic);
                return this;
            },
            /*LTDescr.setEaseInCubic end.*/

            /*LTDescr.setEaseOutCubic start.*/
            setEaseOutCubic: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutCubic", this ); }

                this.easeType = LeanTweenType.easeOutCubic;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutCubic);
                return this;
            },
            /*LTDescr.setEaseOutCubic end.*/

            /*LTDescr.setEaseInOutCubic start.*/
            setEaseInOutCubic: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutCubic", this ); }

                this.easeType = LeanTweenType.easeInOutCubic;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutCubic);
                return this;
            },
            /*LTDescr.setEaseInOutCubic end.*/

            /*LTDescr.setEaseInQuart start.*/
            setEaseInQuart: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInQuart", this ); }

                this.easeType = LeanTweenType.easeInQuart;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInQuart);
                return this;
            },
            /*LTDescr.setEaseInQuart end.*/

            /*LTDescr.setEaseOutQuart start.*/
            setEaseOutQuart: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutQuart", this ); }

                this.easeType = LeanTweenType.easeOutQuart;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutQuart);
                return this;
            },
            /*LTDescr.setEaseOutQuart end.*/

            /*LTDescr.setEaseInOutQuart start.*/
            setEaseInOutQuart: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutQuart", this ); }

                this.easeType = LeanTweenType.easeInOutQuart;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutQuart);
                return this;
            },
            /*LTDescr.setEaseInOutQuart end.*/

            /*LTDescr.setEaseInQuint start.*/
            setEaseInQuint: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInQuint", this ); }

                this.easeType = LeanTweenType.easeInQuint;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInQuint);
                return this;
            },
            /*LTDescr.setEaseInQuint end.*/

            /*LTDescr.setEaseOutQuint start.*/
            setEaseOutQuint: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutQuint", this ); }

                this.easeType = LeanTweenType.easeOutQuint;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutQuint);
                return this;
            },
            /*LTDescr.setEaseOutQuint end.*/

            /*LTDescr.setEaseInOutQuint start.*/
            setEaseInOutQuint: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutQuint", this ); }

                this.easeType = LeanTweenType.easeInOutQuint;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutQuint);
                return this;
            },
            /*LTDescr.setEaseInOutQuint end.*/

            /*LTDescr.setEaseInSine start.*/
            setEaseInSine: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInSine", this ); }

                this.easeType = LeanTweenType.easeInSine;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInSine);
                return this;
            },
            /*LTDescr.setEaseInSine end.*/

            /*LTDescr.setEaseOutSine start.*/
            setEaseOutSine: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutSine", this ); }

                this.easeType = LeanTweenType.easeOutSine;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutSine);
                return this;
            },
            /*LTDescr.setEaseOutSine end.*/

            /*LTDescr.setEaseInOutSine start.*/
            setEaseInOutSine: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutSine", this ); }

                this.easeType = LeanTweenType.easeInOutSine;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutSine);
                return this;
            },
            /*LTDescr.setEaseInOutSine end.*/

            /*LTDescr.setEaseInExpo start.*/
            setEaseInExpo: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInExpo", this ); }

                this.easeType = LeanTweenType.easeInExpo;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInExpo);
                return this;
            },
            /*LTDescr.setEaseInExpo end.*/

            /*LTDescr.setEaseOutExpo start.*/
            setEaseOutExpo: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutExpo", this ); }

                this.easeType = LeanTweenType.easeOutExpo;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutExpo);
                return this;
            },
            /*LTDescr.setEaseOutExpo end.*/

            /*LTDescr.setEaseInOutExpo start.*/
            setEaseInOutExpo: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutExpo", this ); }

                this.easeType = LeanTweenType.easeInOutExpo;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutExpo);
                return this;
            },
            /*LTDescr.setEaseInOutExpo end.*/

            /*LTDescr.setEaseInCirc start.*/
            setEaseInCirc: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInCirc", this ); }

                this.easeType = LeanTweenType.easeInCirc;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInCirc);
                return this;
            },
            /*LTDescr.setEaseInCirc end.*/

            /*LTDescr.setEaseOutCirc start.*/
            setEaseOutCirc: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutCirc", this ); }

                this.easeType = LeanTweenType.easeOutCirc;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutCirc);
                return this;
            },
            /*LTDescr.setEaseOutCirc end.*/

            /*LTDescr.setEaseInOutCirc start.*/
            setEaseInOutCirc: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutCirc", this ); }

                this.easeType = LeanTweenType.easeInOutCirc;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutCirc);
                return this;
            },
            /*LTDescr.setEaseInOutCirc end.*/

            /*LTDescr.setEaseInBounce start.*/
            setEaseInBounce: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInBounce", this ); }

                this.easeType = LeanTweenType.easeInBounce;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInBounce);
                return this;
            },
            /*LTDescr.setEaseInBounce end.*/

            /*LTDescr.setEaseOutBounce start.*/
            setEaseOutBounce: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutBounce", this ); }

                this.easeType = LeanTweenType.easeOutBounce;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutBounce);
                return this;
            },
            /*LTDescr.setEaseOutBounce end.*/

            /*LTDescr.setEaseInOutBounce start.*/
            setEaseInOutBounce: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutBounce", this ); }

                this.easeType = LeanTweenType.easeInOutBounce;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutBounce);
                return this;
            },
            /*LTDescr.setEaseInOutBounce end.*/

            /*LTDescr.setEaseInBack start.*/
            setEaseInBack: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInBack", this ); }

                this.easeType = LeanTweenType.easeInBack;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInBack);
                return this;
            },
            /*LTDescr.setEaseInBack end.*/

            /*LTDescr.setEaseOutBack start.*/
            setEaseOutBack: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutBack", this ); }

                this.easeType = LeanTweenType.easeOutBack;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutBack);
                return this;
            },
            /*LTDescr.setEaseOutBack end.*/

            /*LTDescr.setEaseInOutBack start.*/
            setEaseInOutBack: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutBack", this ); }

                this.easeType = LeanTweenType.easeInOutBack;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutBack);
                return this;
            },
            /*LTDescr.setEaseInOutBack end.*/

            /*LTDescr.setEaseInElastic start.*/
            setEaseInElastic: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInElastic", this ); }

                this.easeType = LeanTweenType.easeInElastic;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInElastic);
                return this;
            },
            /*LTDescr.setEaseInElastic end.*/

            /*LTDescr.setEaseOutElastic start.*/
            setEaseOutElastic: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseOutElastic", this ); }

                this.easeType = LeanTweenType.easeOutElastic;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeOutElastic);
                return this;
            },
            /*LTDescr.setEaseOutElastic end.*/

            /*LTDescr.setEaseInOutElastic start.*/
            setEaseInOutElastic: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseInOutElastic", this ); }

                this.easeType = LeanTweenType.easeInOutElastic;
                this.easeMethod = Bridge.fn.cacheBind(this, this.easeInOutElastic);
                return this;
            },
            /*LTDescr.setEaseInOutElastic end.*/

            /*LTDescr.setEasePunch start.*/
            setEasePunch: function () {
if ( TRACE ) { TRACE( "LTDescr#setEasePunch", this ); }

                this._optional.animationCurve = LeanTween.punch;
                this.toInternal.x = this.from.x + this.to.x;
                this.easeMethod = Bridge.fn.cacheBind(this, this.tweenOnCurve);
                return this;
            },
            /*LTDescr.setEasePunch end.*/

            /*LTDescr.setEaseShake start.*/
            setEaseShake: function () {
if ( TRACE ) { TRACE( "LTDescr#setEaseShake", this ); }

                this._optional.animationCurve = LeanTween.shake;
                this.toInternal.x = this.from.x + this.to.x;
                this.easeMethod = Bridge.fn.cacheBind(this, this.tweenOnCurve);
                return this;
            },
            /*LTDescr.setEaseShake end.*/

            /*LTDescr.tweenOnCurve start.*/
            tweenOnCurve: function () {
if ( TRACE ) { TRACE( "LTDescr#tweenOnCurve", this ); }

                return new pc.Vec3( this.from.x + (this.diff.x) * this._optional.animationCurve.value(this.ratioPassed), this.from.y + (this.diff.y) * this._optional.animationCurve.value(this.ratioPassed), this.from.z + (this.diff.z) * this._optional.animationCurve.value(this.ratioPassed) );
            },
            /*LTDescr.tweenOnCurve end.*/

            /*LTDescr.easeInOutQuad start.*/
            easeInOutQuad: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutQuad", this ); }

                LTDescr.val = this.ratioPassed * 2.0;

                if (LTDescr.val < 1.0) {
                    LTDescr.val = LTDescr.val * LTDescr.val;
                    return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
                }
                LTDescr.val = (1.0 - LTDescr.val) * (LTDescr.val - 3.0) + 1.0;
                return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInOutQuad end.*/

            /*LTDescr.easeInQuad start.*/
            easeInQuad: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInQuad", this ); }

                LTDescr.val = this.ratioPassed * this.ratioPassed;
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInQuad end.*/

            /*LTDescr.easeOutQuad start.*/
            easeOutQuad: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutQuad", this ); }

                LTDescr.val = this.ratioPassed;
                LTDescr.val = -LTDescr.val * (LTDescr.val - 2.0);
                return (this.diff.$clone().clone().scale( LTDescr.val ).add( this.from ));
            },
            /*LTDescr.easeOutQuad end.*/

            /*LTDescr.easeLinear start.*/
            easeLinear: function () {
if ( TRACE ) { TRACE( "LTDescr#easeLinear", this ); }

                LTDescr.val = this.ratioPassed;
                return new pc.Vec3( this.from.x + this.diff.x * LTDescr.val, this.from.y + this.diff.y * LTDescr.val, this.from.z + this.diff.z * LTDescr.val );
            },
            /*LTDescr.easeLinear end.*/

            /*LTDescr.easeSpring start.*/
            easeSpring: function () {
if ( TRACE ) { TRACE( "LTDescr#easeSpring", this ); }

                LTDescr.val = Math.max(0, Math.min(1, this.ratioPassed));
                LTDescr.val = (Math.sin(LTDescr.val * UnityEngine.Mathf.PI * (0.2 + 2.5 * LTDescr.val * LTDescr.val * LTDescr.val)) * Math.pow(1.0 - LTDescr.val, 2.2) + LTDescr.val) * (1.0 + (1.2 * (1.0 - LTDescr.val)));
                return this.from.$clone().add( this.diff.$clone().clone().scale( LTDescr.val ) );
            },
            /*LTDescr.easeSpring end.*/

            /*LTDescr.easeInCubic start.*/
            easeInCubic: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInCubic", this ); }

                LTDescr.val = this.ratioPassed * this.ratioPassed * this.ratioPassed;
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInCubic end.*/

            /*LTDescr.easeOutCubic start.*/
            easeOutCubic: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutCubic", this ); }

                LTDescr.val = this.ratioPassed - 1.0;
                LTDescr.val = (LTDescr.val * LTDescr.val * LTDescr.val + 1);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeOutCubic end.*/

            /*LTDescr.easeInOutCubic start.*/
            easeInOutCubic: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutCubic", this ); }

                LTDescr.val = this.ratioPassed * 2.0;
                if (LTDescr.val < 1.0) {
                    LTDescr.val = LTDescr.val * LTDescr.val * LTDescr.val;
                    return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
                }
                LTDescr.val -= 2.0;
                LTDescr.val = LTDescr.val * LTDescr.val * LTDescr.val + 2.0;
                return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInOutCubic end.*/

            /*LTDescr.easeInQuart start.*/
            easeInQuart: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInQuart", this ); }

                LTDescr.val = this.ratioPassed * this.ratioPassed * this.ratioPassed * this.ratioPassed;
                return this.diff.$clone().clone().scale( LTDescr.val ).add( this.from );
            },
            /*LTDescr.easeInQuart end.*/

            /*LTDescr.easeOutQuart start.*/
            easeOutQuart: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutQuart", this ); }

                LTDescr.val = this.ratioPassed - 1.0;
                LTDescr.val = -(LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val - 1);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeOutQuart end.*/

            /*LTDescr.easeInOutQuart start.*/
            easeInOutQuart: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutQuart", this ); }

                LTDescr.val = this.ratioPassed * 2.0;
                if (LTDescr.val < 1.0) {
                    LTDescr.val = LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val;
                    return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
                }
                LTDescr.val -= 2.0;
                //		val = (val * val * val * val - 2f);
                return this.diffDiv2.$clone().scale( -1 ).clone().scale( (LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val - 2.0) ).add( this.from );
            },
            /*LTDescr.easeInOutQuart end.*/

            /*LTDescr.easeInQuint start.*/
            easeInQuint: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInQuint", this ); }

                LTDescr.val = this.ratioPassed;
                LTDescr.val = LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val;
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInQuint end.*/

            /*LTDescr.easeOutQuint start.*/
            easeOutQuint: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutQuint", this ); }

                LTDescr.val = this.ratioPassed - 1.0;
                LTDescr.val = (LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val + 1.0);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeOutQuint end.*/

            /*LTDescr.easeInOutQuint start.*/
            easeInOutQuint: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutQuint", this ); }

                LTDescr.val = this.ratioPassed * 2.0;
                if (LTDescr.val < 1.0) {
                    LTDescr.val = LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val;
                    return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
                }
                LTDescr.val -= 2.0;
                LTDescr.val = (LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val * LTDescr.val + 2.0);
                return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInOutQuint end.*/

            /*LTDescr.easeInSine start.*/
            easeInSine: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInSine", this ); }

                LTDescr.val = -Math.cos(this.ratioPassed * LeanTween.PI_DIV2);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.diff.x + this.from.x, this.diff.y * LTDescr.val + this.diff.y + this.from.y, this.diff.z * LTDescr.val + this.diff.z + this.from.z );
            },
            /*LTDescr.easeInSine end.*/

            /*LTDescr.easeOutSine start.*/
            easeOutSine: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutSine", this ); }

                LTDescr.val = Math.sin(this.ratioPassed * LeanTween.PI_DIV2);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeOutSine end.*/

            /*LTDescr.easeInOutSine start.*/
            easeInOutSine: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutSine", this ); }

                LTDescr.val = -(Math.cos(UnityEngine.Mathf.PI * this.ratioPassed) - 1.0);
                return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInOutSine end.*/

            /*LTDescr.easeInExpo start.*/
            easeInExpo: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInExpo", this ); }

                LTDescr.val = Math.pow(2.0, 10.0 * (this.ratioPassed - 1.0));
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInExpo end.*/

            /*LTDescr.easeOutExpo start.*/
            easeOutExpo: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutExpo", this ); }

                LTDescr.val = (-Math.pow(2.0, -10.0 * this.ratioPassed) + 1.0);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeOutExpo end.*/

            /*LTDescr.easeInOutExpo start.*/
            easeInOutExpo: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutExpo", this ); }

                LTDescr.val = this.ratioPassed * 2.0;
                if (LTDescr.val < 1) {
                    return this.diffDiv2.$clone().clone().scale( Math.pow(2, 10 * (LTDescr.val - 1)) ).add( this.from );
                }
                LTDescr.val--;
                return this.diffDiv2.$clone().clone().scale( (-Math.pow(2, -10 * LTDescr.val) + 2) ).add( this.from );
            },
            /*LTDescr.easeInOutExpo end.*/

            /*LTDescr.easeInCirc start.*/
            easeInCirc: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInCirc", this ); }

                LTDescr.val = -(Math.sqrt(1.0 - this.ratioPassed * this.ratioPassed) - 1.0);
                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInCirc end.*/

            /*LTDescr.easeOutCirc start.*/
            easeOutCirc: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutCirc", this ); }

                LTDescr.val = this.ratioPassed - 1.0;
                LTDescr.val = Math.sqrt(1.0 - LTDescr.val * LTDescr.val);

                return new pc.Vec3( this.diff.x * LTDescr.val + this.from.x, this.diff.y * LTDescr.val + this.from.y, this.diff.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeOutCirc end.*/

            /*LTDescr.easeInOutCirc start.*/
            easeInOutCirc: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutCirc", this ); }

                LTDescr.val = this.ratioPassed * 2.0;
                if (LTDescr.val < 1.0) {
                    LTDescr.val = -(Math.sqrt(1.0 - LTDescr.val * LTDescr.val) - 1.0);
                    return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
                }
                LTDescr.val -= 2.0;
                LTDescr.val = (Math.sqrt(1.0 - LTDescr.val * LTDescr.val) + 1.0);
                return new pc.Vec3( this.diffDiv2.x * LTDescr.val + this.from.x, this.diffDiv2.y * LTDescr.val + this.from.y, this.diffDiv2.z * LTDescr.val + this.from.z );
            },
            /*LTDescr.easeInOutCirc end.*/

            /*LTDescr.easeInBounce start.*/
            easeInBounce: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInBounce", this ); }

                LTDescr.val = this.ratioPassed;
                LTDescr.val = 1.0 - LTDescr.val;
                return new pc.Vec3( this.diff.x - LeanTween.easeOutBounce(0, this.diff.x, LTDescr.val) + this.from.x, this.diff.y - LeanTween.easeOutBounce(0, this.diff.y, LTDescr.val) + this.from.y, this.diff.z - LeanTween.easeOutBounce(0, this.diff.z, LTDescr.val) + this.from.z );
            },
            /*LTDescr.easeInBounce end.*/

            /*LTDescr.easeOutBounce start.*/
            easeOutBounce: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutBounce", this ); }

                LTDescr.val = this.ratioPassed;
                var valM, valN; // bounce values
                if (LTDescr.val < ((valM = 1 - 1.75 * this.overshoot / 2.75))) {
                    LTDescr.val = 1 / valM / valM * LTDescr.val * LTDescr.val;
                } else if (LTDescr.val < ((valN = 1 - 0.75 * this.overshoot / 2.75))) {
                    LTDescr.val -= (valM + valN) / 2;
                    // first bounce, height: 1/4
                    LTDescr.val = 7.5625 * LTDescr.val * LTDescr.val + 1 - 0.25 * this.overshoot * this.overshoot;
                } else if (LTDescr.val < ((valM = 1 - 0.25 * this.overshoot / 2.75))) {
                    LTDescr.val -= (valM + valN) / 2;
                    // second bounce, height: 1/16
                    LTDescr.val = 7.5625 * LTDescr.val * LTDescr.val + 1 - 0.0625 * this.overshoot * this.overshoot;
                } else { // valN = 1
                    LTDescr.val -= (valM + 1) / 2;
                    // third bounce, height: 1/64
                    LTDescr.val = 7.5625 * LTDescr.val * LTDescr.val + 1 - 0.015625 * this.overshoot * this.overshoot;
                }
                return this.diff.$clone().clone().scale( LTDescr.val ).add( this.from );
            },
            /*LTDescr.easeOutBounce end.*/

            /*LTDescr.easeInOutBounce start.*/
            easeInOutBounce: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutBounce", this ); }

                LTDescr.val = this.ratioPassed * 2.0;
                if (LTDescr.val < 1.0) {
                    return new pc.Vec3( LeanTween.easeInBounce(0, this.diff.x, LTDescr.val) * 0.5 + this.from.x, LeanTween.easeInBounce(0, this.diff.y, LTDescr.val) * 0.5 + this.from.y, LeanTween.easeInBounce(0, this.diff.z, LTDescr.val) * 0.5 + this.from.z );
                } else {
                    LTDescr.val = LTDescr.val - 1.0;
                    return new pc.Vec3( LeanTween.easeOutBounce(0, this.diff.x, LTDescr.val) * 0.5 + this.diffDiv2.x + this.from.x, LeanTween.easeOutBounce(0, this.diff.y, LTDescr.val) * 0.5 + this.diffDiv2.y + this.from.y, LeanTween.easeOutBounce(0, this.diff.z, LTDescr.val) * 0.5 + this.diffDiv2.z + this.from.z );
                }
            },
            /*LTDescr.easeInOutBounce end.*/

            /*LTDescr.easeInBack start.*/
            easeInBack: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInBack", this ); }

                LTDescr.val = this.ratioPassed;
                LTDescr.val /= 1;
                var s = 1.70158 * this.overshoot;
                return this.diff.$clone().clone().scale( (LTDescr.val) ).clone().scale( LTDescr.val ).clone().scale( ((s + 1) * LTDescr.val - s) ).add( this.from );
            },
            /*LTDescr.easeInBack end.*/

            /*LTDescr.easeOutBack start.*/
            easeOutBack: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutBack", this ); }

                var s = 1.70158 * this.overshoot;
                LTDescr.val = (this.ratioPassed / 1) - 1;
                LTDescr.val = ((LTDescr.val) * LTDescr.val * ((s + 1) * LTDescr.val + s) + 1);
                return this.diff.$clone().clone().scale( LTDescr.val ).add( this.from );
            },
            /*LTDescr.easeOutBack end.*/

            /*LTDescr.easeInOutBack start.*/
            easeInOutBack: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutBack", this ); }

                var s = 1.70158 * this.overshoot;
                LTDescr.val = this.ratioPassed * 2.0;
                if ((LTDescr.val) < 1) {
                    s *= (1.525) * this.overshoot;
                    return this.diffDiv2.$clone().clone().scale( (LTDescr.val * LTDescr.val * (((s) + 1) * LTDescr.val - s)) ).add( this.from );
                }
                LTDescr.val -= 2;
                s *= (1.525) * this.overshoot;
                LTDescr.val = ((LTDescr.val) * LTDescr.val * (((s) + 1) * LTDescr.val + s) + 2);
                return this.diffDiv2.$clone().clone().scale( LTDescr.val ).add( this.from );
            },
            /*LTDescr.easeInOutBack end.*/

            /*LTDescr.easeInElastic start.*/
            easeInElastic: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInElastic", this ); }

                return new pc.Vec3( LeanTween.easeInElastic(this.from.x, this.to.x, this.ratioPassed, this.overshoot, this.period), LeanTween.easeInElastic(this.from.y, this.to.y, this.ratioPassed, this.overshoot, this.period), LeanTween.easeInElastic(this.from.z, this.to.z, this.ratioPassed, this.overshoot, this.period) );
            },
            /*LTDescr.easeInElastic end.*/

            /*LTDescr.easeOutElastic start.*/
            easeOutElastic: function () {
if ( TRACE ) { TRACE( "LTDescr#easeOutElastic", this ); }

                return new pc.Vec3( LeanTween.easeOutElastic(this.from.x, this.to.x, this.ratioPassed, this.overshoot, this.period), LeanTween.easeOutElastic(this.from.y, this.to.y, this.ratioPassed, this.overshoot, this.period), LeanTween.easeOutElastic(this.from.z, this.to.z, this.ratioPassed, this.overshoot, this.period) );
            },
            /*LTDescr.easeOutElastic end.*/

            /*LTDescr.easeInOutElastic start.*/
            easeInOutElastic: function () {
if ( TRACE ) { TRACE( "LTDescr#easeInOutElastic", this ); }

                return new pc.Vec3( LeanTween.easeInOutElastic(this.from.x, this.to.x, this.ratioPassed, this.overshoot, this.period), LeanTween.easeInOutElastic(this.from.y, this.to.y, this.ratioPassed, this.overshoot, this.period), LeanTween.easeInOutElastic(this.from.z, this.to.z, this.ratioPassed, this.overshoot, this.period) );
            },
            /*LTDescr.easeInOutElastic end.*/

            /*LTDescr.setOvershoot start.*/
            setOvershoot: function (overshoot) {
if ( TRACE ) { TRACE( "LTDescr#setOvershoot", this ); }

                this.overshoot = overshoot;
                return this;
            },
            /*LTDescr.setOvershoot end.*/

            /*LTDescr.setPeriod start.*/
            setPeriod: function (period) {
if ( TRACE ) { TRACE( "LTDescr#setPeriod", this ); }

                this.period = period;
                return this;
            },
            /*LTDescr.setPeriod end.*/

            /*LTDescr.setTo$1 start.*/
            setTo$1: function (to) {
if ( TRACE ) { TRACE( "LTDescr#setTo$1", this ); }

                if (this.hasInitiliazed) {
                    this.to = to.$clone();
                    this.diff = to.$clone().sub( this.from );
                } else {
                    this.to = to.$clone();
                }

                return this;
            },
            /*LTDescr.setTo$1 end.*/

            /*LTDescr.setTo start.*/
            setTo: function (to) {
if ( TRACE ) { TRACE( "LTDescr#setTo", this ); }

                this._optional.toTrans = to;
                return this;
            },
            /*LTDescr.setTo end.*/

            /*LTDescr.setFrom$1 start.*/
            setFrom$1: function (from) {
if ( TRACE ) { TRACE( "LTDescr#setFrom$1", this ); }

                if (UnityEngine.Object.op_Implicit(this.trans)) {
                    this.init();
                }
                this.from = from.$clone();
                // this.hasInitiliazed = true; // this is set, so that the "from" value isn't overwritten later on when the tween starts
                this.diff = this.to.$clone().sub( this.from );
                this.diffDiv2 = this.diff.$clone().clone().scale( 0.5 );
                return this;
            },
            /*LTDescr.setFrom$1 end.*/

            /*LTDescr.setFrom start.*/
            setFrom: function (from) {
if ( TRACE ) { TRACE( "LTDescr#setFrom", this ); }

                return this.setFrom$1(new pc.Vec3( from, 0.0, 0.0 ));
            },
            /*LTDescr.setFrom end.*/

            /*LTDescr.setDiff start.*/
            setDiff: function (diff) {
if ( TRACE ) { TRACE( "LTDescr#setDiff", this ); }

                this.diff = diff.$clone();
                return this;
            },
            /*LTDescr.setDiff end.*/

            /*LTDescr.setHasInitialized start.*/
            setHasInitialized: function (has) {
if ( TRACE ) { TRACE( "LTDescr#setHasInitialized", this ); }

                this.hasInitiliazed = has;
                return this;
            },
            /*LTDescr.setHasInitialized end.*/

            /*LTDescr.setId start.*/
            setId: function (id, global_counter) {
if ( TRACE ) { TRACE( "LTDescr#setId", this ); }

                this._id = id;
                this.counter = global_counter;
                // Debug.Log("Global counter:"+global_counter);
                return this;
            },
            /*LTDescr.setId end.*/

            /*LTDescr.setPassed start.*/
            setPassed: function (passed) {
if ( TRACE ) { TRACE( "LTDescr#setPassed", this ); }

                this.passed = passed;
                return this;
            },
            /*LTDescr.setPassed end.*/

            /*LTDescr.setTime start.*/
            setTime: function (time) {
if ( TRACE ) { TRACE( "LTDescr#setTime", this ); }

                var passedTimeRatio = this.passed / this.time;
                this.passed = time * passedTimeRatio;
                this.time = time;
                return this;
            },
            /*LTDescr.setTime end.*/

            /*LTDescr.setSpeed start.*/
            setSpeed: function (speed) {
if ( TRACE ) { TRACE( "LTDescr#setSpeed", this ); }

                this.speed = speed;
                if (this.hasInitiliazed) {
                    this.initSpeed();
                }
                return this;
            },
            /*LTDescr.setSpeed end.*/

            /*LTDescr.setRepeat start.*/
            setRepeat: function (repeat) {
if ( TRACE ) { TRACE( "LTDescr#setRepeat", this ); }

                this.loopCount = repeat;
                if ((repeat > 1 && this.loopType === LeanTweenType.once) || (repeat < 0 && this.loopType === LeanTweenType.once)) {
                    this.loopType = LeanTweenType.clamp;
                }
                if (this.type === TweenAction.CALLBACK || this.type === TweenAction.CALLBACK_COLOR) {
                    this.setOnCompleteOnRepeat(true);
                }
                return this;
            },
            /*LTDescr.setRepeat end.*/

            /*LTDescr.setLoopType start.*/
            setLoopType: function (loopType) {
if ( TRACE ) { TRACE( "LTDescr#setLoopType", this ); }

                this.loopType = loopType;
                return this;
            },
            /*LTDescr.setLoopType end.*/

            /*LTDescr.setUseEstimatedTime start.*/
            setUseEstimatedTime: function (useEstimatedTime) {
if ( TRACE ) { TRACE( "LTDescr#setUseEstimatedTime", this ); }

                this.useEstimatedTime = useEstimatedTime;
                this.usesNormalDt = false;
                return this;
            },
            /*LTDescr.setUseEstimatedTime end.*/

            /*LTDescr.setIgnoreTimeScale start.*/
            setIgnoreTimeScale: function (useUnScaledTime) {
if ( TRACE ) { TRACE( "LTDescr#setIgnoreTimeScale", this ); }

                this.useEstimatedTime = useUnScaledTime;
                this.usesNormalDt = false;
                return this;
            },
            /*LTDescr.setIgnoreTimeScale end.*/

            /*LTDescr.setUseFrames start.*/
            setUseFrames: function (useFrames) {
if ( TRACE ) { TRACE( "LTDescr#setUseFrames", this ); }

                this.useFrames = useFrames;
                this.usesNormalDt = false;
                return this;
            },
            /*LTDescr.setUseFrames end.*/

            /*LTDescr.setUseManualTime start.*/
            setUseManualTime: function (useManualTime) {
if ( TRACE ) { TRACE( "LTDescr#setUseManualTime", this ); }

                this.useManualTime = useManualTime;
                this.usesNormalDt = false;
                return this;
            },
            /*LTDescr.setUseManualTime end.*/

            /*LTDescr.setLoopCount start.*/
            setLoopCount: function (loopCount) {
if ( TRACE ) { TRACE( "LTDescr#setLoopCount", this ); }

                this.loopType = LeanTweenType.clamp;
                this.loopCount = loopCount;
                return this;
            },
            /*LTDescr.setLoopCount end.*/

            /*LTDescr.setLoopOnce start.*/
            setLoopOnce: function () {
if ( TRACE ) { TRACE( "LTDescr#setLoopOnce", this ); }

                this.loopType = LeanTweenType.once;
                return this;
            },
            /*LTDescr.setLoopOnce end.*/

            /*LTDescr.setLoopClamp start.*/
            setLoopClamp: function () {
if ( TRACE ) { TRACE( "LTDescr#setLoopClamp", this ); }

                this.loopType = LeanTweenType.clamp;
                if (this.loopCount === 0) {
                    this.loopCount = -1;
                }
                return this;
            },
            /*LTDescr.setLoopClamp end.*/

            /*LTDescr.setLoopClamp$1 start.*/
            setLoopClamp$1: function (loops) {
if ( TRACE ) { TRACE( "LTDescr#setLoopClamp$1", this ); }

                this.loopCount = loops;
                return this;
            },
            /*LTDescr.setLoopClamp$1 end.*/

            /*LTDescr.setLoopPingPong start.*/
            setLoopPingPong: function () {
if ( TRACE ) { TRACE( "LTDescr#setLoopPingPong", this ); }

                this.loopType = LeanTweenType.pingPong;
                if (this.loopCount === 0) {
                    this.loopCount = -1;
                }
                return this;
            },
            /*LTDescr.setLoopPingPong end.*/

            /*LTDescr.setLoopPingPong$1 start.*/
            setLoopPingPong$1: function (loops) {
if ( TRACE ) { TRACE( "LTDescr#setLoopPingPong$1", this ); }

                this.loopType = LeanTweenType.pingPong;
                this.loopCount = loops === -1 ? loops : Bridge.Int.mul(loops, 2);
                return this;
            },
            /*LTDescr.setLoopPingPong$1 end.*/

            /*LTDescr.setOnComplete start.*/
            setOnComplete: function (onComplete) {
if ( TRACE ) { TRACE( "LTDescr#setOnComplete", this ); }

                this._optional.onComplete = onComplete;
                this.hasExtraOnCompletes = true;
                return this;
            },
            /*LTDescr.setOnComplete end.*/

            /*LTDescr.setOnComplete$1 start.*/
            setOnComplete$1: function (onComplete) {
if ( TRACE ) { TRACE( "LTDescr#setOnComplete$1", this ); }

                this._optional.onCompleteObject = onComplete;
                this.hasExtraOnCompletes = true;
                return this;
            },
            /*LTDescr.setOnComplete$1 end.*/

            /*LTDescr.setOnComplete$2 start.*/
            setOnComplete$2: function (onComplete, onCompleteParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnComplete$2", this ); }

                this._optional.onCompleteObject = onComplete;
                this.hasExtraOnCompletes = true;
                if (onCompleteParam != null) {
                    this._optional.onCompleteParam = onCompleteParam;
                }
                return this;
            },
            /*LTDescr.setOnComplete$2 end.*/

            /*LTDescr.setOnCompleteParam start.*/
            setOnCompleteParam: function (onCompleteParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnCompleteParam", this ); }

                this._optional.onCompleteParam = onCompleteParam;
                this.hasExtraOnCompletes = true;
                return this;
            },
            /*LTDescr.setOnCompleteParam end.*/

            /*LTDescr.setOnUpdate start.*/
            setOnUpdate: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate", this ); }

                this._optional.onUpdateFloat = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdate end.*/

            /*LTDescr.setOnUpdate$1 start.*/
            setOnUpdate$1: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate$1", this ); }

                this._optional.onUpdateColor = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdate$1 end.*/

            /*LTDescr.setOnUpdate$5 start.*/
            setOnUpdate$5: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate$5", this ); }

                this._optional.onUpdateColorObject = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdate$5 end.*/

            /*LTDescr.setOnUpdate$4 start.*/
            setOnUpdate$4: function (onUpdate, onUpdateParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate$4", this ); }

                if (onUpdateParam === void 0) { onUpdateParam = null; }
                this._optional.onUpdateFloatObject = onUpdate;
                this.hasUpdateCallback = true;
                if (onUpdateParam != null) {
                    this._optional.onUpdateParam = onUpdateParam;
                }
                return this;
            },
            /*LTDescr.setOnUpdate$4 end.*/

            /*LTDescr.setOnUpdate$6 start.*/
            setOnUpdate$6: function (onUpdate, onUpdateParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate$6", this ); }

                if (onUpdateParam === void 0) { onUpdateParam = null; }
                this._optional.onUpdateVector3Object = onUpdate;
                this.hasUpdateCallback = true;
                if (onUpdateParam != null) {
                    this._optional.onUpdateParam = onUpdateParam;
                }
                return this;
            },
            /*LTDescr.setOnUpdate$6 end.*/

            /*LTDescr.setOnUpdate$2 start.*/
            setOnUpdate$2: function (onUpdate, onUpdateParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate$2", this ); }

                if (onUpdateParam === void 0) { onUpdateParam = null; }
                this._optional.onUpdateVector2 = onUpdate;
                this.hasUpdateCallback = true;
                if (onUpdateParam != null) {
                    this._optional.onUpdateParam = onUpdateParam;
                }
                return this;
            },
            /*LTDescr.setOnUpdate$2 end.*/

            /*LTDescr.setOnUpdate$3 start.*/
            setOnUpdate$3: function (onUpdate, onUpdateParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdate$3", this ); }

                if (onUpdateParam === void 0) { onUpdateParam = null; }
                this._optional.onUpdateVector3 = onUpdate;
                this.hasUpdateCallback = true;
                if (onUpdateParam != null) {
                    this._optional.onUpdateParam = onUpdateParam;
                }
                return this;
            },
            /*LTDescr.setOnUpdate$3 end.*/

            /*LTDescr.setOnUpdateRatio start.*/
            setOnUpdateRatio: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateRatio", this ); }

                this._optional.onUpdateFloatRatio = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdateRatio end.*/

            /*LTDescr.setOnUpdateObject start.*/
            setOnUpdateObject: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateObject", this ); }

                this._optional.onUpdateFloatObject = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdateObject end.*/

            /*LTDescr.setOnUpdateVector2 start.*/
            setOnUpdateVector2: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateVector2", this ); }

                this._optional.onUpdateVector2 = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdateVector2 end.*/

            /*LTDescr.setOnUpdateVector3 start.*/
            setOnUpdateVector3: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateVector3", this ); }

                this._optional.onUpdateVector3 = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdateVector3 end.*/

            /*LTDescr.setOnUpdateColor start.*/
            setOnUpdateColor: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateColor", this ); }

                this._optional.onUpdateColor = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdateColor end.*/

            /*LTDescr.setOnUpdateColor$1 start.*/
            setOnUpdateColor$1: function (onUpdate) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateColor$1", this ); }

                this._optional.onUpdateColorObject = onUpdate;
                this.hasUpdateCallback = true;
                return this;
            },
            /*LTDescr.setOnUpdateColor$1 end.*/

            /*LTDescr.setOnUpdateParam start.*/
            setOnUpdateParam: function (onUpdateParam) {
if ( TRACE ) { TRACE( "LTDescr#setOnUpdateParam", this ); }

                this._optional.onUpdateParam = onUpdateParam;
                return this;
            },
            /*LTDescr.setOnUpdateParam end.*/

            /*LTDescr.setOrientToPath start.*/
            setOrientToPath: function (doesOrient) {
if ( TRACE ) { TRACE( "LTDescr#setOrientToPath", this ); }

                if (this.type === TweenAction.MOVE_CURVED || this.type === TweenAction.MOVE_CURVED_LOCAL) {
                    if (this._optional.path == null) {
                        this._optional.path = new LTBezierPath.ctor();
                    }
                    this._optional.path.orientToPath = doesOrient;
                } else {
                    this._optional.spline.orientToPath = doesOrient;
                }
                return this;
            },
            /*LTDescr.setOrientToPath end.*/

            /*LTDescr.setOrientToPath2d start.*/
            setOrientToPath2d: function (doesOrient2d) {
if ( TRACE ) { TRACE( "LTDescr#setOrientToPath2d", this ); }

                this.setOrientToPath(doesOrient2d);
                if (this.type === TweenAction.MOVE_CURVED || this.type === TweenAction.MOVE_CURVED_LOCAL) {
                    this._optional.path.orientToPath2d = doesOrient2d;
                } else {
                    this._optional.spline.orientToPath2d = doesOrient2d;
                }
                return this;
            },
            /*LTDescr.setOrientToPath2d end.*/

            /*LTDescr.setRect start.*/
            setRect: function (rect) {
if ( TRACE ) { TRACE( "LTDescr#setRect", this ); }

                this._optional.ltRect = rect;
                return this;
            },
            /*LTDescr.setRect end.*/

            /*LTDescr.setRect$1 start.*/
            setRect$1: function (rect) {
if ( TRACE ) { TRACE( "LTDescr#setRect$1", this ); }

                this._optional.ltRect = new LTRect.$ctor4(rect.$clone());
                return this;
            },
            /*LTDescr.setRect$1 end.*/

            /*LTDescr.setRect$2 start.*/
            setRect$2: function (rect) {
if ( TRACE ) { TRACE( "LTDescr#setRect$2", this ); }

                this.rectTransform = rect;
                return this;
            },
            /*LTDescr.setRect$2 end.*/

            /*LTDescr.setPath start.*/
            setPath: function (path) {
if ( TRACE ) { TRACE( "LTDescr#setPath", this ); }

                this._optional.path = path;
                return this;
            },
            /*LTDescr.setPath end.*/

            /*LTDescr.setPoint start.*/
            setPoint: function (point) {
if ( TRACE ) { TRACE( "LTDescr#setPoint", this ); }

                this._optional.point = point.$clone();
                return this;
            },
            /*LTDescr.setPoint end.*/

            /*LTDescr.setDestroyOnComplete start.*/
            setDestroyOnComplete: function (doesDestroy) {
if ( TRACE ) { TRACE( "LTDescr#setDestroyOnComplete", this ); }

                this.destroyOnComplete = doesDestroy;
                return this;
            },
            /*LTDescr.setDestroyOnComplete end.*/

            /*LTDescr.setAudio start.*/
            setAudio: function (audio) {
if ( TRACE ) { TRACE( "LTDescr#setAudio", this ); }

                this._optional.onCompleteParam = audio;
                return this;
            },
            /*LTDescr.setAudio end.*/

            /*LTDescr.setOnCompleteOnRepeat start.*/
            setOnCompleteOnRepeat: function (isOn) {
if ( TRACE ) { TRACE( "LTDescr#setOnCompleteOnRepeat", this ); }

                this.onCompleteOnRepeat = isOn;
                return this;
            },
            /*LTDescr.setOnCompleteOnRepeat end.*/

            /*LTDescr.setOnCompleteOnStart start.*/
            setOnCompleteOnStart: function (isOn) {
if ( TRACE ) { TRACE( "LTDescr#setOnCompleteOnStart", this ); }

                this.onCompleteOnStart = isOn;
                return this;
            },
            /*LTDescr.setOnCompleteOnStart end.*/

            /*LTDescr.setSprites start.*/
            setSprites: function (sprites) {
if ( TRACE ) { TRACE( "LTDescr#setSprites", this ); }

                this.sprites = sprites;
                return this;
            },
            /*LTDescr.setSprites end.*/

            /*LTDescr.setFrameRate start.*/
            setFrameRate: function (frameRate) {
if ( TRACE ) { TRACE( "LTDescr#setFrameRate", this ); }

                this.time = this.sprites.length / frameRate;
                return this;
            },
            /*LTDescr.setFrameRate end.*/

            /*LTDescr.setOnStart start.*/
            setOnStart: function (onStart) {
if ( TRACE ) { TRACE( "LTDescr#setOnStart", this ); }

                this._optional.onStart = onStart;
                return this;
            },
            /*LTDescr.setOnStart end.*/

            /*LTDescr.setDirection start.*/
            setDirection: function (direction) {
if ( TRACE ) { TRACE( "LTDescr#setDirection", this ); }

                if (this.direction !== -1.0 && this.direction !== 1.0) {
                    UnityEngine.Debug.LogWarning$1("You have passed an incorrect direction of '" + System.Single.format(direction) + "', direction must be -1f or 1f");
                    return this;
                }

                if (this.direction !== direction) {
                    // Debug.Log("reverse path:"+this.path+" spline:"+this._optional.spline+" hasInitiliazed:"+this.hasInitiliazed);
                    if (this.hasInitiliazed) {
                        this.direction = direction;
                    } else {
                        if (this._optional.path != null) {
                            this._optional.path = new LTBezierPath.$ctor1(LTUtility.reverse(this._optional.path.pts));
                        } else if (this._optional.spline != null) {
                            this._optional.spline = new LTSpline.ctor(LTUtility.reverse(this._optional.spline.pts));
                        }
                        // this.passed = this.time - this.passed;
                    }
                }

                return this;
            },
            /*LTDescr.setDirection end.*/

            /*LTDescr.setRecursive start.*/
            setRecursive: function (useRecursion) {
if ( TRACE ) { TRACE( "LTDescr#setRecursive", this ); }

                this.useRecursion = useRecursion;

                return this;
            },
            /*LTDescr.setRecursive end.*/


        },
        overloads: {
            "ToString()": "toString",
            "setScale(float)": "setScale$1",
            "setEase(AnimationCurve)": "setEase$1",
            "setTo(Vector3)": "setTo$1",
            "setFrom(Vector3)": "setFrom$1",
            "setLoopClamp(int)": "setLoopClamp$1",
            "setLoopPingPong(int)": "setLoopPingPong$1",
            "setOnComplete(Action<object>)": "setOnComplete$1",
            "setOnComplete(Action<object>, object)": "setOnComplete$2",
            "setOnUpdate(Action<Color>)": "setOnUpdate$1",
            "setOnUpdate(Action<Color, object>)": "setOnUpdate$5",
            "setOnUpdate(Action<float, object>, object)": "setOnUpdate$4",
            "setOnUpdate(Action<Vector3, object>, object)": "setOnUpdate$6",
            "setOnUpdate(Action<Vector2>, object)": "setOnUpdate$2",
            "setOnUpdate(Action<Vector3>, object)": "setOnUpdate$3",
            "setOnUpdateColor(Action<Color, object>)": "setOnUpdateColor$1",
            "setRect(Rect)": "setRect$1",
            "setRect(RectTransform)": "setRect$2"
        }
    });
    /*LTDescr end.*/

    /*LTDescrOptional start.*/
    Bridge.define("LTDescrOptional", {
        fields: {
            toTrans: null,
            point: null,
            axis: null,
            lastVal: 0,
            origRotation: null,
            path: null,
            spline: null,
            animationCurve: null,
            initFrameCount: 0,
            color: null,
            ltRect: null,
            onUpdateFloat: null,
            onUpdateFloatRatio: null,
            onUpdateFloatObject: null,
            onUpdateVector2: null,
            onUpdateVector3: null,
            onUpdateVector3Object: null,
            onUpdateColor: null,
            onUpdateColorObject: null,
            onComplete: null,
            onCompleteObject: null,
            onCompleteParam: null,
            onUpdateParam: null,
            onStart: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTDescrOptional#init", this ); }

                this.point = new UnityEngine.Vector3();
                this.axis = new UnityEngine.Vector3();
                this.origRotation = new UnityEngine.Quaternion();
                this.color = new UnityEngine.Color();
            }
        },
        methods: {
            /*LTDescrOptional.reset start.*/
            reset: function () {
if ( TRACE ) { TRACE( "LTDescrOptional#reset", this ); }

                this.animationCurve = null;

                this.onUpdateFloat = null;
                this.onUpdateFloatRatio = null;
                this.onUpdateVector2 = null;
                this.onUpdateVector3 = null;
                this.onUpdateFloatObject = null;
                this.onUpdateVector3Object = null;
                this.onUpdateColor = null;
                this.onComplete = null;
                this.onCompleteObject = null;
                this.onCompleteParam = null;
                this.onStart = null;

                this.point = pc.Vec3.ZERO.clone();
                this.initFrameCount = 0;
            },
            /*LTDescrOptional.reset end.*/

            /*LTDescrOptional.callOnUpdate start.*/
            callOnUpdate: function (val, ratioPassed) {
if ( TRACE ) { TRACE( "LTDescrOptional#callOnUpdate", this ); }

                if (!Bridge.staticEquals(this.onUpdateFloat, null)) {
                    this.onUpdateFloat(val);
                }

                if (!Bridge.staticEquals(this.onUpdateFloatRatio, null)) {
                    this.onUpdateFloatRatio(val, ratioPassed);
                } else if (!Bridge.staticEquals(this.onUpdateFloatObject, null)) {
                    this.onUpdateFloatObject(val, this.onUpdateParam);
                } else if (!Bridge.staticEquals(this.onUpdateVector3Object, null)) {
                    this.onUpdateVector3Object(LTDescr.newVect.$clone(), this.onUpdateParam);
                } else if (!Bridge.staticEquals(this.onUpdateVector3, null)) {
                    this.onUpdateVector3(LTDescr.newVect.$clone());
                } else if (!Bridge.staticEquals(this.onUpdateVector2, null)) {
                    this.onUpdateVector2(new pc.Vec2( LTDescr.newVect.x, LTDescr.newVect.y ));
                }
            },
            /*LTDescrOptional.callOnUpdate end.*/


        }
    });
    /*LTDescrOptional end.*/

    /*LTEvent start.*/
    Bridge.define("LTEvent", {
        fields: {
            id: 0,
            data: null
        },
        ctors: {
            ctor: function (id, data) {
if ( TRACE ) { TRACE( "LTEvent#ctor", this ); }

                this.$initialize();
                this.id = id;
                this.data = data;
            }
        }
    });
    /*LTEvent end.*/

    /*LTGUI start.*/
    Bridge.define("LTGUI", {
        statics: {
            fields: {
                RECT_LEVELS: 0,
                RECTS_PER_LEVEL: 0,
                BUTTONS_MAX: 0,
                levels: null,
                levelDepths: null,
                buttons: null,
                buttonLevels: null,
                buttonLastFrame: null,
                r: null,
                color: null,
                isGUIEnabled: false,
                global_counter: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "LTGUI#init", this ); }

                    this.color = new UnityEngine.Color();
                    this.RECT_LEVELS = 5;
                    this.RECTS_PER_LEVEL = 10;
                    this.BUTTONS_MAX = 24;
                    this.color = new pc.Color( 1, 1, 1, 1 );
                    this.isGUIEnabled = false;
                    this.global_counter = 0;
                }
            },
            methods: {
                /*LTGUI.init:static start.*/
                init: function () {
if ( TRACE ) { TRACE( "LTGUI#init", this ); }

                    if (LTGUI.levels == null) {
                        LTGUI.levels = System.Array.init(Bridge.Int.mul(LTGUI.RECT_LEVELS, LTGUI.RECTS_PER_LEVEL), null, LTRect);
                        LTGUI.levelDepths = System.Array.init(LTGUI.RECT_LEVELS, 0, System.Int32);
                    }
                },
                /*LTGUI.init:static end.*/

                /*LTGUI.initRectCheck:static start.*/
                initRectCheck: function () {
if ( TRACE ) { TRACE( "LTGUI#initRectCheck", this ); }

                    if (LTGUI.buttons == null) {
                        LTGUI.buttons = System.Array.init(LTGUI.BUTTONS_MAX, function (){
                            return new UnityEngine.Rect();
                        }, UnityEngine.Rect);
                        LTGUI.buttonLevels = System.Array.init(LTGUI.BUTTONS_MAX, 0, System.Int32);
                        LTGUI.buttonLastFrame = System.Array.init(LTGUI.BUTTONS_MAX, 0, System.Int32);
                        for (var i = 0; i < LTGUI.buttonLevels.length; i = (i + 1) | 0) {
                            LTGUI.buttonLevels[i] = -1;
                        }
                    }
                },
                /*LTGUI.initRectCheck:static end.*/

                /*LTGUI.reset:static start.*/
                reset: function () {
if ( TRACE ) { TRACE( "LTGUI#reset", this ); }

                    if (LTGUI.isGUIEnabled) {
                        LTGUI.isGUIEnabled = false;
                        for (var i = 0; i < LTGUI.levels.length; i = (i + 1) | 0) {
                            LTGUI.levels[i] = null;
                        }

                        for (var i1 = 0; i1 < LTGUI.levelDepths.length; i1 = (i1 + 1) | 0) {
                            LTGUI.levelDepths[i1] = 0;
                        }
                    }
                },
                /*LTGUI.reset:static end.*/

                /*LTGUI.update:static start.*/
                update: function (updateLevel) {
if ( TRACE ) { TRACE( "LTGUI#update", this ); }

                    if (LTGUI.isGUIEnabled) {
                        LTGUI.init();
                        if (LTGUI.levelDepths[updateLevel] > 0) {
                            LTGUI.color = UnityEngine.GUI.color.$clone();
                            var baseI = Bridge.Int.mul(updateLevel, LTGUI.RECTS_PER_LEVEL);
                            var maxLoop = (baseI + LTGUI.levelDepths[updateLevel]) | 0; // RECTS_PER_LEVEL;//;

                            for (var i = baseI; i < maxLoop; i = (i + 1) | 0) {
                                LTGUI.r = LTGUI.levels[i];
                                // Debug.Log("r:"+r+" i:"+i);
                                if (LTGUI.r != null) {
                                    //Debug.Log("label:"+r.labelStr+" textColor:"+r.style.normal.textColor);
                                    if (LTGUI.r.useColor) {
                                        UnityEngine.GUI.color = LTGUI.r.color.$clone();
                                    }
                                    if (LTGUI.r.type === LTGUI.Element_Type.Label) {
                                        if (LTGUI.r.style != null) {
                                            UnityEngine.GUI.skin.label = LTGUI.r.style;
                                        }
                                        if (LTGUI.r.useSimpleScale) {
                                            UnityEngine.GUI.Label(new UnityEngine.Rect.$ctor1((LTGUI.r.rect.x + LTGUI.r.margin.x + LTGUI.r.relativeRect.x) * LTGUI.r.relativeRect.width, (LTGUI.r.rect.y + LTGUI.r.margin.y + LTGUI.r.relativeRect.y) * LTGUI.r.relativeRect.height, LTGUI.r.rect.width * LTGUI.r.relativeRect.width, LTGUI.r.rect.height * LTGUI.r.relativeRect.height), LTGUI.r.labelStr);
                                        } else {
                                            UnityEngine.GUI.Label(new UnityEngine.Rect.$ctor1(LTGUI.r.rect.x + LTGUI.r.margin.x, LTGUI.r.rect.y + LTGUI.r.margin.y, LTGUI.r.rect.width, LTGUI.r.rect.height), LTGUI.r.labelStr);
                                        }
                                    } else if (LTGUI.r.type === LTGUI.Element_Type.Texture && LTGUI.r.texture != null) {
                                        var size = LTGUI.r.useSimpleScale ? new pc.Vec2( 0.0, LTGUI.r.rect.height * LTGUI.r.relativeRect.height ) : new pc.Vec2( LTGUI.r.rect.width, LTGUI.r.rect.height );
                                        if (LTGUI.r.sizeByHeight) {
                                            size.x = LTGUI.r.texture.width / LTGUI.r.texture.height * size.y;
                                        }
                                        if (LTGUI.r.useSimpleScale) {
                                            UnityEngine.GUI.DrawTexture(new UnityEngine.Rect.$ctor1((LTGUI.r.rect.x + LTGUI.r.margin.x + LTGUI.r.relativeRect.x) * LTGUI.r.relativeRect.width, (LTGUI.r.rect.y + LTGUI.r.margin.y + LTGUI.r.relativeRect.y) * LTGUI.r.relativeRect.height, size.x, size.y), LTGUI.r.texture);
                                        } else {
                                            UnityEngine.GUI.DrawTexture(new UnityEngine.Rect.$ctor1(LTGUI.r.rect.x + LTGUI.r.margin.x, LTGUI.r.rect.y + LTGUI.r.margin.y, size.x, size.y), LTGUI.r.texture);
                                        }
                                    }
                                }
                            }
                            UnityEngine.GUI.color = LTGUI.color.$clone();
                        }
                    }
                },
                /*LTGUI.update:static end.*/

                /*LTGUI.checkOnScreen:static start.*/
                checkOnScreen: function (rect) {
if ( TRACE ) { TRACE( "LTGUI#checkOnScreen", this ); }

                    var offLeft = rect.x + rect.width < 0.0;
                    var offRight = rect.x > UnityEngine.Screen.width;
                    var offBottom = rect.y > UnityEngine.Screen.height;
                    var offTop = rect.y + rect.height < 0.0;

                    return !(offLeft || offRight || offBottom || offTop);
                },
                /*LTGUI.checkOnScreen:static end.*/

                /*LTGUI.destroy:static start.*/
                destroy: function (id) {
if ( TRACE ) { TRACE( "LTGUI#destroy", this ); }

                    var backId = id & 65535;
                    var backCounter = id >> 16;
                    if (id >= 0 && LTGUI.levels[backId] != null && LTGUI.levels[backId].hasInitiliazed && LTGUI.levels[backId].counter === backCounter) {
                        LTGUI.levels[backId] = null;
                    }
                },
                /*LTGUI.destroy:static end.*/

                /*LTGUI.destroyAll:static start.*/
                destroyAll: function (depth) {
if ( TRACE ) { TRACE( "LTGUI#destroyAll", this ); }
 // clears all gui elements on depth
                    var maxLoop = (Bridge.Int.mul(depth, LTGUI.RECTS_PER_LEVEL) + LTGUI.RECTS_PER_LEVEL) | 0;
                    for (var i = Bridge.Int.mul(depth, LTGUI.RECTS_PER_LEVEL); LTGUI.levels != null && i < maxLoop; i = (i + 1) | 0) {
                        LTGUI.levels[i] = null;
                    }
                },
                /*LTGUI.destroyAll:static end.*/

                /*LTGUI.label$1:static start.*/
                label$1: function (rect, label, depth) {
if ( TRACE ) { TRACE( "LTGUI#label$1", this ); }

                    return LTGUI.label(new LTRect.$ctor4(rect.$clone()), label, depth);
                },
                /*LTGUI.label$1:static end.*/

                /*LTGUI.label:static start.*/
                label: function (rect, label, depth) {
if ( TRACE ) { TRACE( "LTGUI#label", this ); }

                    rect.type = LTGUI.Element_Type.Label;
                    rect.labelStr = label;
                    return LTGUI.element(rect, depth);
                },
                /*LTGUI.label:static end.*/

                /*LTGUI.texture$1:static start.*/
                texture$1: function (rect, texture, depth) {
if ( TRACE ) { TRACE( "LTGUI#texture$1", this ); }

                    return LTGUI.texture(new LTRect.$ctor4(rect.$clone()), texture, depth);
                },
                /*LTGUI.texture$1:static end.*/

                /*LTGUI.texture:static start.*/
                texture: function (rect, texture, depth) {
if ( TRACE ) { TRACE( "LTGUI#texture", this ); }

                    rect.type = LTGUI.Element_Type.Texture;
                    rect.texture = texture;
                    return LTGUI.element(rect, depth);
                },
                /*LTGUI.texture:static end.*/

                /*LTGUI.element:static start.*/
                element: function (rect, depth) {
if ( TRACE ) { TRACE( "LTGUI#element", this ); }

                    LTGUI.isGUIEnabled = true;
                    LTGUI.init();
                    var maxLoop = (Bridge.Int.mul(depth, LTGUI.RECTS_PER_LEVEL) + LTGUI.RECTS_PER_LEVEL) | 0;
                    var k = 0;
                    if (rect != null) {
                        LTGUI.destroy(rect.id);
                    }
                    if (rect.type === LTGUI.Element_Type.Label && rect.style != null) {
                        if (rect.style.reportProperty( 'UnityEngine.GUIStyle.normal', null ).reportProperty( 'UnityEngine.GUIStyleState.textColor', null ).a <= 0.0) {
                            UnityEngine.Debug.LogWarning$1("Your GUI normal color has an alpha of zero, and will not be rendered.");
                        }
                    }
                    if (rect.relativeRect.width === Number.POSITIVE_INFINITY) {
                        rect.relativeRect = new UnityEngine.Rect.$ctor1(0.0, 0.0, UnityEngine.Screen.width, UnityEngine.Screen.height);
                    }
                    for (var i = Bridge.Int.mul(depth, LTGUI.RECTS_PER_LEVEL); i < maxLoop; i = (i + 1) | 0) {
                        LTGUI.r = LTGUI.levels[i];
                        if (LTGUI.r == null) {
                            LTGUI.r = rect;
                            LTGUI.r.rotateEnabled = true;
                            LTGUI.r.alphaEnabled = true;
                            LTGUI.r.setId(i, LTGUI.global_counter);
                            LTGUI.levels[i] = LTGUI.r;
                            // Debug.Log("k:"+k+ " maxDepth:"+levelDepths[depth]);
                            if (k >= LTGUI.levelDepths[depth]) {
                                LTGUI.levelDepths[depth] = (k + 1) | 0;
                            }
                            LTGUI.global_counter = (LTGUI.global_counter + 1) | 0;
                            return LTGUI.r;
                        }
                        k = (k + 1) | 0;
                    }

                    UnityEngine.Debug.LogError$2("You ran out of GUI Element spaces");

                    return null;
                },
                /*LTGUI.element:static end.*/

                /*LTGUI.hasNoOverlap:static start.*/
                hasNoOverlap: function (rect, depth) {
if ( TRACE ) { TRACE( "LTGUI#hasNoOverlap", this ); }

                    LTGUI.initRectCheck();
                    var hasNoOverlap = true;
                    var wasAddedToList = false;
                    for (var i = 0; i < LTGUI.buttonLevels.length; i = (i + 1) | 0) {
                        // Debug.Log("buttonLastFrame["+i+"]:"+buttonLastFrame[i]);
                        //Debug.Log("buttonLevels["+i+"]:"+buttonLevels[i]);
                        if (LTGUI.buttonLevels[i] >= 0) {
                            //Debug.Log("buttonLastFrame["+i+"]:"+buttonLastFrame[i]+" Time.frameCount:"+Time.frameCount);
                            if (((LTGUI.buttonLastFrame[i] + 1) | 0) < UnityEngine.Time.frameCount) { // It has to have been visible within the current, or
                                LTGUI.buttonLevels[i] = -1;
                                // Debug.Log("resetting i:"+i);
                            } else {
                                //if(buttonLevels[i]>=0)
                                //   Debug.Log("buttonLevels["+i+"]:"+buttonLevels[i]);
                                if (LTGUI.buttonLevels[i] > depth) {
                                    /* if(firstTouch().x > 0){
                                       Debug.Log("buttons["+i+"]:"+buttons[i] + " firstTouch:");
                                       Debug.Log(firstTouch());
                                       Debug.Log(buttonLevels[i]);
                                    }*/
                                    if (LTGUI.pressedWithinRect(LTGUI.buttons[i])) {
                                        hasNoOverlap = false; // there is an overlapping button that is higher
                                    }
                                }
                            }
                        }

                        if (wasAddedToList === false && LTGUI.buttonLevels[i] < 0) {
                            wasAddedToList = true;
                            LTGUI.buttonLevels[i] = depth;
                            LTGUI.buttons[i] = rect.$clone();
                            LTGUI.buttonLastFrame[i] = UnityEngine.Time.frameCount;
                        }
                    }

                    return hasNoOverlap;
                },
                /*LTGUI.hasNoOverlap:static end.*/

                /*LTGUI.pressedWithinRect:static start.*/
                pressedWithinRect: function (rect) {
if ( TRACE ) { TRACE( "LTGUI#pressedWithinRect", this ); }

                    var vec2 = LTGUI.firstTouch();
                    if (vec2.x < 0.0) {
                        return false;
                    }
                    var vecY = UnityEngine.Screen.height - vec2.y;
                    return (vec2.x > rect.x && vec2.x < rect.x + rect.width && vecY > rect.y && vecY < rect.y + rect.height);
                },
                /*LTGUI.pressedWithinRect:static end.*/

                /*LTGUI.checkWithinRect:static start.*/
                checkWithinRect: function (vec2, rect) {
if ( TRACE ) { TRACE( "LTGUI#checkWithinRect", this ); }

                    vec2.y = UnityEngine.Screen.height - vec2.y;
                    return (vec2.x > rect.x && vec2.x < rect.x + rect.width && vec2.y > rect.y && vec2.y < rect.y + rect.height);
                },
                /*LTGUI.checkWithinRect:static end.*/

                /*LTGUI.firstTouch:static start.*/
                firstTouch: function () {
if ( TRACE ) { TRACE( "LTGUI#firstTouch", this ); }

                    var $t;
                    if (UnityEngine.Input.touchCount > 0) {
                        return ($t = UnityEngine.Input.touches)[0].position.$clone();
                    } else if (UnityEngine.Input.GetMouseButton(0)) {
                        return UnityEngine.Vector2.FromVector3(UnityEngine.Input.mousePosition.$clone());
                    }

                    return new pc.Vec2( (-window.Infinity), (-window.Infinity) );
                },
                /*LTGUI.firstTouch:static end.*/


            }
        }
    });
    /*LTGUI end.*/

    /*LTGUI+Element_Type start.*/
    Bridge.define("LTGUI.Element_Type", {
        $kind: 1006,
        statics: {
            fields: {
                Texture: 0,
                Label: 1
            }
        }
    });
    /*LTGUI+Element_Type end.*/

    /*LTRect start.*/
    Bridge.define("LTRect", {
        statics: {
            fields: {
                colorTouched: false
            }
        },
        fields: {
            _rect: null,
            alpha: 0,
            rotation: 0,
            pivot: null,
            margin: null,
            relativeRect: null,
            rotateEnabled: false,
            rotateFinished: false,
            alphaEnabled: false,
            labelStr: null,
            type: 0,
            style: null,
            useColor: false,
            color: null,
            fontScaleToFit: false,
            useSimpleScale: false,
            sizeByHeight: false,
            texture: null,
            _id: 0,
            counter: 0
        },
        props: {
            hasInitiliazed: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#hasInitiliazed#get", this ); }

                    return this._id !== -1;
                }
            },
            id: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#id#get", this ); }

                    var toId = this._id | this.counter << 16;

                    /* uint backId = toId & 0xFFFF;
                    uint backCounter = toId >> 16;
                    if(_id!=backId || backCounter!=counter){
                       Debug.LogError("BAD CONVERSION toId:"+_id);
                    }*/

                    return toId;
                }
            },
            x: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#x#get", this ); }

                    return this._rect.x;
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTRect#x#set", this ); }

                    this._rect.x = value;
                }
            },
            y: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#y#get", this ); }

                    return this._rect.y;
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTRect#y#set", this ); }

                    this._rect.y = value;
                }
            },
            width: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#width#get", this ); }

                    return this._rect.width;
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTRect#width#set", this ); }

                    this._rect.width = value;
                }
            },
            height: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#height#get", this ); }

                    return this._rect.height;
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTRect#height#set", this ); }

                    this._rect.height = value;
                }
            },
            rect: {
                get: function () {
if ( TRACE ) { TRACE( "LTRect#rect#get", this ); }

                    if (LTRect.colorTouched) {
                        LTRect.colorTouched = false;
                        UnityEngine.GUI.color = new pc.Color( UnityEngine.GUI.color.r, UnityEngine.GUI.color.g, UnityEngine.GUI.color.b, 1.0 );
                    }
                    if (this.rotateEnabled) {
                        if (this.rotateFinished) {
                            this.rotateFinished = false;
                            this.rotateEnabled = false;
                            //this.rotation = 0.0f;
                            this.pivot = pc.Vec2.ZERO.clone();
                        } else {
                            pc.stubProxy.reportMethod( 'UnityEngine.GUIUtility.RotateAroundPivot', null );
                        }
                    }
                    if (this.alphaEnabled) {
                        UnityEngine.GUI.color = new pc.Color( UnityEngine.GUI.color.r, UnityEngine.GUI.color.g, UnityEngine.GUI.color.b, this.alpha );
                        LTRect.colorTouched = true;
                    }
                    if (this.fontScaleToFit) {
                        if (this.useSimpleScale) {
                            this.style.fontSize = Bridge.Int.clip32(this._rect.height * this.relativeRect.height);
                        } else {
                            this.style.fontSize = Bridge.Int.clip32(this._rect.height);
                        }
                    }
                    return this._rect.$clone();
                },
                set: function (value) {
if ( TRACE ) { TRACE( "LTRect#rect#set", this ); }

                    this._rect = value.$clone();
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTRect#init", this ); }

                this._rect = new UnityEngine.Rect();
                this.pivot = new UnityEngine.Vector2();
                this.margin = new UnityEngine.Vector2();
                this.relativeRect = new UnityEngine.Rect();
                this.color = new UnityEngine.Color();
                this.alpha = 1.0;
                this.relativeRect = new UnityEngine.Rect.$ctor1(0.0, 0.0, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
                this.useColor = false;
                this.color = new pc.Color( 1, 1, 1, 1 );
                this._id = -1;
            },
            ctor: function () {
if ( TRACE ) { TRACE( "LTRect#ctor", this ); }

                this.$initialize();
                this.reset();
                this.rotateEnabled = (this.alphaEnabled = true);
                this._rect = new UnityEngine.Rect.$ctor1(0.0, 0.0, 1.0, 1.0);
            },
            $ctor4: function (rect) {
if ( TRACE ) { TRACE( "LTRect#$ctor4", this ); }

                this.$initialize();
                this._rect = rect.$clone();
                this.reset();
            },
            $ctor1: function (x, y, width, height) {
if ( TRACE ) { TRACE( "LTRect#$ctor1", this ); }

                this.$initialize();
                this._rect = new UnityEngine.Rect.$ctor1(x, y, width, height);
                this.alpha = 1.0;
                this.rotation = 0.0;
                this.rotateEnabled = (this.alphaEnabled = false);
            },
            $ctor2: function (x, y, width, height, alpha) {
if ( TRACE ) { TRACE( "LTRect#$ctor2", this ); }

                this.$initialize();
                this._rect = new UnityEngine.Rect.$ctor1(x, y, width, height);
                this.alpha = alpha;
                this.rotation = 0.0;
                this.rotateEnabled = (this.alphaEnabled = false);
            },
            $ctor3: function (x, y, width, height, alpha, rotation) {
if ( TRACE ) { TRACE( "LTRect#$ctor3", this ); }

                this.$initialize();
                this._rect = new UnityEngine.Rect.$ctor1(x, y, width, height);
                this.alpha = alpha;
                this.rotation = rotation;
                this.rotateEnabled = (this.alphaEnabled = false);
                if (rotation !== 0.0) {
                    this.rotateEnabled = true;
                    this.resetForRotation();
                }
            }
        },
        methods: {
            /*LTRect.setId start.*/
            setId: function (id, counter) {
if ( TRACE ) { TRACE( "LTRect#setId", this ); }

                this._id = id;
                this.counter = counter;
            },
            /*LTRect.setId end.*/

            /*LTRect.reset start.*/
            reset: function () {
if ( TRACE ) { TRACE( "LTRect#reset", this ); }

                this.alpha = 1.0;
                this.rotation = 0.0;
                this.rotateEnabled = (this.alphaEnabled = false);
                this.margin = pc.Vec2.ZERO.clone();
                this.sizeByHeight = false;
                this.useColor = false;
            },
            /*LTRect.reset end.*/

            /*LTRect.resetForRotation start.*/
            resetForRotation: function () {
if ( TRACE ) { TRACE( "LTRect#resetForRotation", this ); }

                var scale = new pc.Vec3( UnityEngine.GUI.matrix.getitem$1(0, 0), UnityEngine.GUI.matrix.getitem$1(1, 1), UnityEngine.GUI.matrix.getitem$1(2, 2) );
                if (pc.Vec2.equals( this.pivot, pc.Vec2.ZERO.clone() )) {
                    this.pivot = new pc.Vec2( (this._rect.x + ((this._rect.width) * 0.5)) * scale.x + UnityEngine.GUI.matrix.getitem$1(0, 3), (this._rect.y + ((this._rect.height) * 0.5)) * scale.y + UnityEngine.GUI.matrix.getitem$1(1, 3) );
                }
            },
            /*LTRect.resetForRotation end.*/

            /*LTRect.setStyle start.*/
            setStyle: function (style) {
if ( TRACE ) { TRACE( "LTRect#setStyle", this ); }

                this.style = style;
                return this;
            },
            /*LTRect.setStyle end.*/

            /*LTRect.setFontScaleToFit start.*/
            setFontScaleToFit: function (fontScaleToFit) {
if ( TRACE ) { TRACE( "LTRect#setFontScaleToFit", this ); }

                this.fontScaleToFit = fontScaleToFit;
                return this;
            },
            /*LTRect.setFontScaleToFit end.*/

            /*LTRect.setColor start.*/
            setColor: function (color) {
if ( TRACE ) { TRACE( "LTRect#setColor", this ); }

                this.color = color.$clone();
                this.useColor = true;
                return this;
            },
            /*LTRect.setColor end.*/

            /*LTRect.setAlpha start.*/
            setAlpha: function (alpha) {
if ( TRACE ) { TRACE( "LTRect#setAlpha", this ); }

                this.alpha = alpha;
                return this;
            },
            /*LTRect.setAlpha end.*/

            /*LTRect.setLabel start.*/
            setLabel: function (str) {
if ( TRACE ) { TRACE( "LTRect#setLabel", this ); }

                this.labelStr = str;
                return this;
            },
            /*LTRect.setLabel end.*/

            /*LTRect.setUseSimpleScale$1 start.*/
            setUseSimpleScale$1: function (useSimpleScale, relativeRect) {
if ( TRACE ) { TRACE( "LTRect#setUseSimpleScale$1", this ); }

                this.useSimpleScale = useSimpleScale;
                this.relativeRect = relativeRect.$clone();
                return this;
            },
            /*LTRect.setUseSimpleScale$1 end.*/

            /*LTRect.setUseSimpleScale start.*/
            setUseSimpleScale: function (useSimpleScale) {
if ( TRACE ) { TRACE( "LTRect#setUseSimpleScale", this ); }

                this.useSimpleScale = useSimpleScale;
                this.relativeRect = new UnityEngine.Rect.$ctor1(0.0, 0.0, UnityEngine.Screen.width, UnityEngine.Screen.height);
                return this;
            },
            /*LTRect.setUseSimpleScale end.*/

            /*LTRect.setSizeByHeight start.*/
            setSizeByHeight: function (sizeByHeight) {
if ( TRACE ) { TRACE( "LTRect#setSizeByHeight", this ); }

                this.sizeByHeight = sizeByHeight;
                return this;
            },
            /*LTRect.setSizeByHeight end.*/

            /*LTRect.toString start.*/
            toString: function () {
if ( TRACE ) { TRACE( "LTRect#toString", this ); }

                return "x:" + System.Single.format(this._rect.x) + " y:" + System.Single.format(this._rect.y) + " width:" + System.Single.format(this._rect.width) + " height:" + System.Single.format(this._rect.height);
            },
            /*LTRect.toString end.*/


        },
        overloads: {
            "setUseSimpleScale(bool, Rect)": "setUseSimpleScale$1",
            "ToString()": "toString"
        }
    });
    /*LTRect end.*/

    /*LTSeq start.*/
    Bridge.define("LTSeq", {
        fields: {
            previous: null,
            current: null,
            tween: null,
            totalDelay: 0,
            timeScale: 0,
            debugIter: 0,
            counter: 0,
            toggle: false,
            _id: 0
        },
        props: {
            id: {
                get: function () {
if ( TRACE ) { TRACE( "LTSeq#id#get", this ); }

                    var toId = (this._id | ((this.counter << 16) >>> 0)) >>> 0;

                    /* uint backId = toId & 0xFFFF;
                    			uint backCounter = toId >> 16;
                    			if(_id!=backId || backCounter!=counter){
                    				Debug.LogError("BAD CONVERSION toId:"+_id);
                    			}*/

                    return (toId | 0);
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTSeq#init", this ); }

                this.toggle = false;
            }
        },
        methods: {
            /*LTSeq.reset start.*/
            reset: function () {
if ( TRACE ) { TRACE( "LTSeq#reset", this ); }

                this.previous = null;
                this.tween = null;
                this.totalDelay = 0.0;
            },
            /*LTSeq.reset end.*/

            /*LTSeq.init start.*/
            init: function (id, global_counter) {
if ( TRACE ) { TRACE( "LTSeq#init", this ); }

                this.reset();
                this._id = id;

                this.counter = global_counter;

                this.current = this;
            },
            /*LTSeq.init end.*/

            /*LTSeq.addOn start.*/
            addOn: function () {
if ( TRACE ) { TRACE( "LTSeq#addOn", this ); }

                this.current.toggle = true;
                var lastCurrent = this.current;
                this.current = LeanTween.sequence(true);
                // Debug.Log("this.current:" + this.current.id + " lastCurrent:" + lastCurrent.id);
                this.current.previous = lastCurrent;
                lastCurrent.toggle = false;
                this.current.totalDelay = lastCurrent.totalDelay;
                this.current.debugIter = (lastCurrent.debugIter + 1) | 0;
                return this.current;
            },
            /*LTSeq.addOn end.*/

            /*LTSeq.addPreviousDelays start.*/
            addPreviousDelays: function () {
if ( TRACE ) { TRACE( "LTSeq#addPreviousDelays", this ); }

                //		Debug.Log("delay:"+delay+" count:"+this.current.count+" this.current.totalDelay:"+this.current.totalDelay);

                var prev = this.current.previous;

                if (prev != null && prev.tween != null) {
                    return this.current.totalDelay + prev.tween.time;
                }
                return this.current.totalDelay;
            },
            /*LTSeq.addPreviousDelays end.*/

            /*LTSeq.append$3 start.*/
            append$3: function (delay) {
if ( TRACE ) { TRACE( "LTSeq#append$3", this ); }

                this.current.totalDelay += delay;

                return this.current;
            },
            /*LTSeq.append$3 end.*/

            /*LTSeq.append$1 start.*/
            append$1: function (callback) {
if ( TRACE ) { TRACE( "LTSeq#append$1", this ); }

                var newTween = LeanTween.delayedCall(0.0, callback);
                //		Debug.Log("newTween:" + newTween);
                return this.append(newTween);
            },
            /*LTSeq.append$1 end.*/

            /*LTSeq.append$2 start.*/
            append$2: function (callback, obj) {
if ( TRACE ) { TRACE( "LTSeq#append$2", this ); }

                this.append(LeanTween.delayedCall$1(0.0, callback).setOnCompleteParam(obj));

                return this.addOn();
            },
            /*LTSeq.append$2 end.*/

            /*LTSeq.append$4 start.*/
            append$4: function (gameObject, callback) {
if ( TRACE ) { TRACE( "LTSeq#append$4", this ); }

                this.append(LeanTween.delayedCall$2(gameObject, 0.0, callback));

                return this.addOn();
            },
            /*LTSeq.append$4 end.*/

            /*LTSeq.append$5 start.*/
            append$5: function (gameObject, callback, obj) {
if ( TRACE ) { TRACE( "LTSeq#append$5", this ); }

                this.append(LeanTween.delayedCall$3(gameObject, 0.0, callback).setOnCompleteParam(obj));

                return this.addOn();
            },
            /*LTSeq.append$5 end.*/

            /*LTSeq.append start.*/
            append: function (tween) {
if ( TRACE ) { TRACE( "LTSeq#append", this ); }

                this.current.tween = tween;

                //		Debug.Log("tween:" + tween + " delay:" + this.current.totalDelay);

                this.current.totalDelay = this.addPreviousDelays();

                tween.setDelay(this.current.totalDelay);

                return this.addOn();
            },
            /*LTSeq.append end.*/

            /*LTSeq.insert start.*/
            insert: function (tween) {
if ( TRACE ) { TRACE( "LTSeq#insert", this ); }

                this.current.tween = tween;

                tween.setDelay(this.addPreviousDelays());

                return this.addOn();
            },
            /*LTSeq.insert end.*/

            /*LTSeq.setScale start.*/
            setScale: function (timeScale) {
if ( TRACE ) { TRACE( "LTSeq#setScale", this ); }

                //		Debug.Log("this.current:" + this.current.previous.debugIter+" tween:"+this.current.previous.tween);
                this.setScaleRecursive(this.current, timeScale, 500);

                return this.addOn();
            },
            /*LTSeq.setScale end.*/

            /*LTSeq.setScaleRecursive start.*/
            setScaleRecursive: function (seq, timeScale, count) {
if ( TRACE ) { TRACE( "LTSeq#setScaleRecursive", this ); }

                if (count > 0) {
                    this.timeScale = timeScale;

                    //			Debug.Log("seq.count:" + count + " seq.tween:" + seq.tween);
                    seq.totalDelay *= timeScale;
                    if (seq.tween != null) {
                        //			Debug.Log("seq.tween.time * timeScale:" + seq.tween.time * timeScale + " seq.totalDelay:"+seq.totalDelay +" time:"+seq.tween.time+" seq.tween.delay:"+seq.tween.delay);
                        if (seq.tween.time !== 0.0) {
                            seq.tween.setTime(seq.tween.time * timeScale);
                        }
                        seq.tween.setDelay(seq.tween.delay * timeScale);
                    }

                    if (seq.previous != null) {
                        this.setScaleRecursive(seq.previous, timeScale, ((count - 1) | 0));
                    }
                }
            },
            /*LTSeq.setScaleRecursive end.*/

            /*LTSeq.reverse start.*/
            reverse: function () {
if ( TRACE ) { TRACE( "LTSeq#reverse", this ); }


                return this.addOn();
            },
            /*LTSeq.reverse end.*/


        },
        overloads: {
            "append(float)": "append$3",
            "append(System.Action)": "append$1",
            "append(System.Action<object>, object)": "append$2",
            "append(GameObject, System.Action)": "append$4",
            "append(GameObject, System.Action<object>, object)": "append$5"
        }
    });
    /*LTSeq end.*/

    /*LTSpline start.*/
    Bridge.define("LTSpline", {
        statics: {
            fields: {
                DISTANCE_COUNT: 0,
                SUBLINE_COUNT: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "LTSpline#init", this ); }

                    this.DISTANCE_COUNT = 3;
                    this.SUBLINE_COUNT = 20;
                }
            },
            methods: {
                /*LTSpline.drawGizmo:static start.*/
                drawGizmo: function (arr, color) {
if ( TRACE ) { TRACE( "LTSpline#drawGizmo", this ); }

                    if (arr.length >= 4) {
                        var vec3s = System.Array.init(arr.length, function (){
                            return new UnityEngine.Vector3();
                        }, UnityEngine.Vector3);
                        for (var i = 0; i < arr.length; i = (i + 1) | 0) {
                            vec3s[i] = arr[i].position.$clone();
                        }
                        var spline = new LTSpline.ctor(vec3s);
                        var prevPt = spline.ptsAdj[0].$clone();

                        var colorBefore = pc.generateStubProxy( 'UnityEngine.Gizmos', true ).reportProperty( 'UnityEngine.Gizmos.color', null );
                        pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = color.$clone();
                        for (var i1 = 0; i1 < spline.ptsAdjLength; i1 = (i1 + 1) | 0) {
                            var currPt2 = spline.ptsAdj[i1].$clone();
                            // Debug.Log("currPt2:"+currPt2);

                            pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                            prevPt = currPt2.$clone();
                        }
                        pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = colorBefore.$clone();
                    }
                },
                /*LTSpline.drawGizmo:static end.*/

                /*LTSpline.drawLine:static start.*/
                drawLine: function (arr, width, color) {
if ( TRACE ) { TRACE( "LTSpline#drawLine", this ); }

                    if (arr.length >= 4) {

                    }
                },
                /*LTSpline.drawLine:static end.*/


            }
        },
        fields: {
            distance: 0,
            constantSpeed: false,
            pts: null,
            ptsAdj: null,
            ptsAdjLength: 0,
            orientToPath: false,
            orientToPath2d: false,
            numSections: 0,
            currPt: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "LTSpline#init", this ); }

                this.distance = 0.0;
                this.constantSpeed = true;
            },
            ctor: function (pts) {
if ( TRACE ) { TRACE( "LTSpline#ctor", this ); }

                this.$initialize();
                this.init(pts, true);
            },
            $ctor1: function (pts, constantSpeed) {
if ( TRACE ) { TRACE( "LTSpline#$ctor1", this ); }

                this.$initialize();
                this.constantSpeed = constantSpeed;
                this.init(pts, constantSpeed);
            }
        },
        methods: {
            /*LTSpline.init start.*/
            init: function (pts, constantSpeed) {
if ( TRACE ) { TRACE( "LTSpline#init", this ); }

                if (pts.length < 4) {
                    LeanTween.logError("LeanTween - When passing values for a spline path, you must pass four or more values!");
                    return;
                }

                this.pts = System.Array.init(pts.length, function (){
                    return new UnityEngine.Vector3();
                }, UnityEngine.Vector3);
                System.Array.copy(pts, 0, this.pts, 0, pts.length);

                this.numSections = (pts.length - 3) | 0;

                var minSegment = Number.POSITIVE_INFINITY;
                var earlierPoint = this.pts[1].$clone();
                var totalDistance = 0.0;
                for (var i = 1; i < ((this.pts.length - 1) | 0); i = (i + 1) | 0) {
                    // float pointDistance = (this.pts[i]-earlierPoint).sqrMagnitude;
                    var pointDistance = pc.Vec3.distance( this.pts[i], earlierPoint );
                    //Debug.Log("pointDist:"+pointDistance);
                    if (pointDistance < minSegment) {
                        minSegment = pointDistance;
                    }

                    totalDistance += pointDistance;
                }

                if (constantSpeed) {
                    minSegment = totalDistance / (Bridge.Int.mul(this.numSections, LTSpline.SUBLINE_COUNT));
                    //Debug.Log("minSegment:"+minSegment+" numSections:"+numSections);

                    var minPrecision = minSegment / LTSpline.SUBLINE_COUNT; // number of subdivisions in each segment
                    var precision = Bridge.Int.mul(Math.ceil(totalDistance / minPrecision), LTSpline.DISTANCE_COUNT);
                    // Debug.Log("precision:"+precision);
                    if (precision <= 1) {
                        precision = 2;
                    }

                    this.ptsAdj = System.Array.init(precision, function (){
                        return new UnityEngine.Vector3();
                    }, UnityEngine.Vector3);
                    earlierPoint = this.interp(0.0);
                    var num = 1;
                    this.ptsAdj[0] = earlierPoint.$clone();
                    this.distance = 0.0;
                    for (var i1 = 0; i1 < ((precision + 1) | 0); i1 = (i1 + 1) | 0) {
                        var fract = i1 / precision;
                        // Debug.Log("fract:"+fract);
                        var point = this.interp(fract);
                        var dist = pc.Vec3.distance( point, earlierPoint );

                        // float dist = (point-earlierPoint).sqrMagnitude;
                        if (dist >= minPrecision || fract >= 1.0) {
                            this.ptsAdj[num] = point.$clone();
                            this.distance += dist; // only add it to the total distance once we know we are adding it as an adjusted point

                            earlierPoint = point.$clone();
                            // Debug.Log("fract:"+fract+" point:"+point);
                            num = (num + 1) | 0;
                        }
                    }
                    // make sure there is a point at the very end
                    /* num++;
                    Vector3 endPoint = interp( 1f );
                    ptsAdj[num] = endPoint;*/
                    // Debug.Log("fract 1f endPoint:"+endPoint);

                    this.ptsAdjLength = num;
                }
                // Debug.Log("map 1f:"+map(1f)+" end:"+ptsAdj[ ptsAdjLength-1 ]);

                // Debug.Log("ptsAdjLength:"+ptsAdjLength+" minPrecision:"+minPrecision+" precision:"+precision);
            },
            /*LTSpline.init end.*/

            /*LTSpline.map start.*/
            map: function (u) {
if ( TRACE ) { TRACE( "LTSpline#map", this ); }

                if (u >= 1.0) {
                    return this.pts[((this.pts.length - 2) | 0)].$clone();
                }
                var t = u * (((this.ptsAdjLength - 1) | 0));
                var first = Math.floor(t);
                var next = Math.ceil(t);

                if (first < 0) {
                    first = 0;
                }

                var val = this.ptsAdj[first].$clone();


                var nextVal = this.ptsAdj[next].$clone();
                var diff = t - first;

                // Debug.Log("u:"+u+" val:"+val +" nextVal:"+nextVal+" diff:"+diff+" first:"+first+" next:"+next);

                val = val.$clone().add( (nextVal.$clone().sub( val )).clone().scale( diff ) );

                return val.$clone();
            },
            /*LTSpline.map end.*/

            /*LTSpline.interp start.*/
            interp: function (t) {
if ( TRACE ) { TRACE( "LTSpline#interp", this ); }

                this.currPt = UnityEngine.Mathf.Min(Math.floor(t * this.numSections), ((this.numSections - 1) | 0));
                var u = t * this.numSections - this.currPt;

                //Debug.Log("currPt:"+currPt+" numSections:"+numSections+" pts.Length :"+pts.Length );
                var a = this.pts[this.currPt].$clone();
                var b = this.pts[((this.currPt + 1) | 0)].$clone();
                var c = this.pts[((this.currPt + 2) | 0)].$clone();
                var d = this.pts[((this.currPt + 3) | 0)].$clone();

                var val = (((a.$clone().scale( -1 ).add( b.clone().scale( 3.0 ) ).sub( c.clone().scale( 3.0 ) ).add( d )).clone().scale( (u * u * u) ).add( (a.clone().scale( 2.0 ).sub( b.clone().scale( 5.0 ) ).add( c.clone().scale( 4.0 ) ).sub( d )).clone().scale( (u * u) ) ).add( (a.$clone().scale( -1 ).add( c )).clone().scale( u ) ).add( b.clone().scale( 2.0 ) )).clone().scale( 0.5 ));
                // Debug.Log("currPt:"+currPt+" t:"+t+" val.x"+val.x+" y:"+val.y+" z:"+val.z);

                return val.$clone();
            },
            /*LTSpline.interp end.*/

            /*LTSpline.ratioAtPoint start.*/
            ratioAtPoint: function (pt) {
if ( TRACE ) { TRACE( "LTSpline#ratioAtPoint", this ); }

                var closestDist = 3.40282347E+38;
                var closestI = 0;
                for (var i = 0; i < this.ptsAdjLength; i = (i + 1) | 0) {
                    var dist = pc.Vec3.distance( pt, this.ptsAdj[i] );
                    // Debug.Log("i:"+i+" dist:"+dist);
                    if (dist < closestDist) {
                        closestDist = dist;
                        closestI = i;
                    }
                }
                // Debug.Log("closestI:"+closestI+" ptsAdjLength:"+ptsAdjLength);
                return closestI / (((this.ptsAdjLength - 1) | 0));
            },
            /*LTSpline.ratioAtPoint end.*/

            /*LTSpline.point start.*/
            point: function (ratio) {
if ( TRACE ) { TRACE( "LTSpline#point", this ); }

                var t = ratio > 1.0 ? 1.0 : ratio;
                return this.constantSpeed ? this.map(t) : this.interp(t);
            },
            /*LTSpline.point end.*/

            /*LTSpline.place2d start.*/
            place2d: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTSpline#place2d", this ); }

                transform.position = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    var v3Dir = this.point(ratio).sub( transform.position );
                    var angle = Math.atan2(v3Dir.y, v3Dir.x) * UnityEngine.Mathf.Rad2Deg;
                    transform.eulerAngles = new pc.Vec3( 0, 0, angle );
                }
            },
            /*LTSpline.place2d end.*/

            /*LTSpline.placeLocal2d start.*/
            placeLocal2d: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTSpline#placeLocal2d", this ); }

                var trans = transform.parent;
                if (UnityEngine.Component.op_Equality(trans, null)) { // this has no parent, just do a regular transform
                    this.place2d(transform, ratio);
                    return;
                }
                transform.localPosition = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    var ptAhead = this.point(ratio); //trans.TransformPoint(  );
                    var v3Dir = ptAhead.$clone().sub( transform.localPosition );
                    var angle = Math.atan2(v3Dir.y, v3Dir.x) * UnityEngine.Mathf.Rad2Deg;
                    transform.localEulerAngles = new pc.Vec3( 0, 0, angle );
                }
            },
            /*LTSpline.placeLocal2d end.*/

            /*LTSpline.place start.*/
            place: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTSpline#place", this ); }

                this.place$1(transform, ratio, pc.Vec3.UP.clone());
            },
            /*LTSpline.place end.*/

            /*LTSpline.place$1 start.*/
            place$1: function (transform, ratio, worldUp) {
if ( TRACE ) { TRACE( "LTSpline#place$1", this ); }

                // ratio = Mathf.Repeat(ratio, 1.0f); // make sure ratio is always between 0-1
                transform.position = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    transform.LookAt$3(this.point(ratio), worldUp);
                }

            },
            /*LTSpline.place$1 end.*/

            /*LTSpline.placeLocal start.*/
            placeLocal: function (transform, ratio) {
if ( TRACE ) { TRACE( "LTSpline#placeLocal", this ); }

                this.placeLocal$1(transform, ratio, pc.Vec3.UP.clone());
            },
            /*LTSpline.placeLocal end.*/

            /*LTSpline.placeLocal$1 start.*/
            placeLocal$1: function (transform, ratio, worldUp) {
if ( TRACE ) { TRACE( "LTSpline#placeLocal$1", this ); }

                transform.localPosition = this.point(ratio);
                ratio += 0.001;
                if (ratio <= 1.0) {
                    transform.LookAt$3(transform.parent.TransformPoint$1(this.point(ratio)), worldUp);
                }
            },
            /*LTSpline.placeLocal$1 end.*/

            /*LTSpline.gizmoDraw start.*/
            gizmoDraw: function (t) {
if ( TRACE ) { TRACE( "LTSpline#gizmoDraw", this ); }

                if (t === void 0) { t = -1.0; }
                if (this.ptsAdj == null || this.ptsAdj.length <= 0) {
                    return;
                }

                var prevPt = this.ptsAdj[0].$clone();

                for (var i = 0; i < this.ptsAdjLength; i = (i + 1) | 0) {
                    var currPt2 = this.ptsAdj[i].$clone();
                    // Debug.Log("currPt2:"+currPt2);
                    //Gizmos.color = new Color(UnityEngine.Random.Range(0f,1f),UnityEngine.Random.Range(0f,1f),UnityEngine.Random.Range(0f,1f),1);
                    pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                    prevPt = currPt2.$clone();
                }
            },
            /*LTSpline.gizmoDraw end.*/

            /*LTSpline.drawGizmo start.*/
            drawGizmo: function (color) {
if ( TRACE ) { TRACE( "LTSpline#drawGizmo", this ); }

                if (this.ptsAdjLength >= 4) {

                    var prevPt = this.ptsAdj[0].$clone();

                    var colorBefore = pc.generateStubProxy( 'UnityEngine.Gizmos', true ).reportProperty( 'UnityEngine.Gizmos.color', null );
                    pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = color.$clone();
                    for (var i = 0; i < this.ptsAdjLength; i = (i + 1) | 0) {
                        var currPt2 = this.ptsAdj[i].$clone();
                        // Debug.Log("currPt2:"+currPt2);

                        pc.stubProxy.reportMethod( 'UnityEngine.Gizmos.DrawLine', null );
                        prevPt = currPt2.$clone();
                    }
                    pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = colorBefore.$clone();
                }
            },
            /*LTSpline.drawGizmo end.*/

            /*LTSpline.generateVectors start.*/
            generateVectors: function () {
if ( TRACE ) { TRACE( "LTSpline#generateVectors", this ); }

                if (this.pts.length >= 4) {
                    var meshPoints = new (System.Collections.Generic.List$1(UnityEngine.Vector3)).ctor();
                    var prevPt = this.pts[0].$clone();
                    meshPoints.add(prevPt.$clone());

                    var split = 1.0 / (this.pts.length * 10.0);

                    var iter = 0.0;
                    while (iter < 1.0) {
                        var at = iter / 1.0;
                        var currPt2 = this.interp(at);
                        //                Debug.Log("currPt2:"+currPt2);

                        //                GL.Vertex(prevPt);
                        //                GL.Vertex(currPt2);
                        meshPoints.add(currPt2.$clone());

                        //                prevPt = currPt2;

                        iter += split;
                    }

                    meshPoints.ToArray();
                }
                return null;
            },
            /*LTSpline.generateVectors end.*/


        },
        overloads: {
            "place(Transform, float, Vector3)": "place$1",
            "placeLocal(Transform, float, Vector3)": "placeLocal$1"
        }
    });
    /*LTSpline end.*/

    /*LTUtility start.*/
    Bridge.define("LTUtility", {
        statics: {
            methods: {
                /*LTUtility.reverse:static start.*/
                reverse: function (arr) {
if ( TRACE ) { TRACE( "LTUtility#reverse", this ); }

                    var length = arr.length;
                    var left = 0;
                    var right = (length - 1) | 0;

                    for (; left < right; left = (left + 1) | 0, right = (right - 1) | 0) {
                        var temporary = arr[left].$clone();
                        arr[left] = arr[right].$clone();
                        arr[right] = temporary.$clone();
                    }
                    return arr;
                },
                /*LTUtility.reverse:static end.*/


            }
        }
    });
    /*LTUtility end.*/

    /*MyExtensions start.*/
    Bridge.define("MyExtensions", {
        statics: {
            methods: {
                /*MyExtensions.Shuffle:static start.*/
                Shuffle: function (T, list) {
if ( TRACE ) { TRACE( "MyExtensions#Shuffle", this ); }

                    var rng = new System.Random.ctor();
                    var n = System.Array.getCount(list, T);
                    while (n > 1) {
                        n = (n - 1) | 0;
                        var k = rng.Next$1(((n + 1) | 0));
                        var value = Bridge.rValue(System.Array.getItem(list, k, T));
                        System.Array.setItem(list, k, Bridge.rValue(System.Array.getItem(list, n, T)), T);
                        System.Array.setItem(list, n, Bridge.rValue(value), T);
                    }
                },
                /*MyExtensions.Shuffle:static end.*/


            }
        }
    });
    /*MyExtensions end.*/

    /*OrientationManager start.*/
    Bridge.define("OrientationManager", {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            fields: {
                Instance: null
            },
            events: {
                OrientationChangeEvent: null,
                OrientationUpdateEvent: null
            }
        },
        fields: {
            lastScreenRatio: 0,
            isCurrentlyPortrait: false
        },
        props: {
            IsCurrentlyPortrait: {
                get: function () {
if ( TRACE ) { TRACE( "OrientationManager#IsCurrentlyPortrait#get", this ); }

                    this.CheckIfPortrait();
                    return this.isCurrentlyPortrait;
                }
            }
        },
        methods: {
            /*OrientationManager.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "OrientationManager#Awake", this ); }

                if (UnityEngine.MonoBehaviour.op_Inequality(OrientationManager.Instance, null) && UnityEngine.MonoBehaviour.op_Inequality(OrientationManager.Instance, this)) {
                    UnityEngine.Object.Destroy(this);
                } else {
                    OrientationManager.Instance = this;
                }

            },
            /*OrientationManager.Awake end.*/

            /*OrientationManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "OrientationManager#Start", this ); }

                this.StartCoroutine$1(this.InitializeOrientation());

                var analytic = this.isCurrentlyPortrait ? "Portrait" : "Landscape";
                Luna.Unity.Analytics.LogEvent$1(analytic, 0);
            },
            /*OrientationManager.Start end.*/

            /*OrientationManager.InitializeOrientation start.*/
            InitializeOrientation: function () {
if ( TRACE ) { TRACE( "OrientationManager#InitializeOrientation", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = null;
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    this.CheckIfPortrait();
                                        this.UpdateOrientation(this.isCurrentlyPortrait);

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*OrientationManager.InitializeOrientation end.*/

            /*OrientationManager.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "OrientationManager#Update", this ); }

                this.HandleScreenOrientationChange();
            },
            /*OrientationManager.Update end.*/

            /*OrientationManager.UpdateOrientation start.*/
            UpdateOrientation: function (portrait) {
if ( TRACE ) { TRACE( "OrientationManager#UpdateOrientation", this ); }

                !Bridge.staticEquals(OrientationManager.OrientationChangeEvent, null) ? OrientationManager.OrientationChangeEvent(portrait) : null;
                //One frame after the orientation changes, update cached positions
                //The one frame is for a proper update of parent/child transforms who change with the orientation change event
                this.StartCoroutine$1(this.OrientationUpdate());
            },
            /*OrientationManager.UpdateOrientation end.*/

            /*OrientationManager.OrientationUpdate start.*/
            OrientationUpdate: function () {
if ( TRACE ) { TRACE( "OrientationManager#OrientationUpdate", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    !Bridge.staticEquals(OrientationManager.OrientationUpdateEvent, null) ? OrientationManager.OrientationUpdateEvent() : null;
                                        $enumerator.current = null;
                                        $step = 1;
                                        return true;
                                }
                                case 1: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*OrientationManager.OrientationUpdate end.*/

            /*OrientationManager.HandleScreenOrientationChange start.*/
            HandleScreenOrientationChange: function () {
if ( TRACE ) { TRACE( "OrientationManager#HandleScreenOrientationChange", this ); }

                if (this.CheckIfPortrait()) {
                    this.UpdateOrientation(this.isCurrentlyPortrait);
                }
            },
            /*OrientationManager.HandleScreenOrientationChange end.*/

            /*OrientationManager.CheckIfPortrait start.*/
            CheckIfPortrait: function () {
if ( TRACE ) { TRACE( "OrientationManager#CheckIfPortrait", this ); }

                var changedOrientation = false;
                var screenRatio = (UnityEngine.Screen.width / UnityEngine.Screen.height);

                if (screenRatio !== this.lastScreenRatio) {
                    changedOrientation = true;

                    if (screenRatio >= 1) {
                        this.isCurrentlyPortrait = false;
                    } else {
                        if (screenRatio < 1) {
                            this.isCurrentlyPortrait = true;
                        }
                    }
                }

                this.lastScreenRatio = screenRatio;

                return changedOrientation;
            },
            /*OrientationManager.CheckIfPortrait end.*/

            /*OrientationManager.OnDestroy start.*/
            OnDestroy: function () {
if ( TRACE ) { TRACE( "OrientationManager#OnDestroy", this ); }

                OrientationManager.OrientationChangeEvent = null;
                OrientationManager.OrientationUpdateEvent = null;
            },
            /*OrientationManager.OnDestroy end.*/


        }
    });
    /*OrientationManager end.*/

    /*PathBezier2d start.*/
    Bridge.define("PathBezier2d", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            cubes: null,
            dude1: null,
            dude2: null,
            visualizePath: null
        },
        methods: {
            /*PathBezier2d.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PathBezier2d#Start", this ); }

                // move 
                var path = System.Array.init([this.cubes[0].position.$clone(), this.cubes[1].position.$clone(), this.cubes[2].position.$clone(), this.cubes[3].position.$clone()], UnityEngine.Vector3);
                // 90 degree test
                // path = new Vector3[] {new Vector3(7.5f, 0f, 0f), new Vector3(0f, 0f, 2.5f), new Vector3(2.5f, 0f, 0f), new Vector3(0f, 0f, 7.5f)};
                this.visualizePath = new LTBezierPath.$ctor1(path);
                LeanTween.move$6(this.dude1, path, 10.0).setOrientToPath2d(true);

                // move local
                LeanTween.moveLocal$3(this.dude2, path, 10.0).setOrientToPath2d(true);
            },
            /*PathBezier2d.Start end.*/

            /*PathBezier2d.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "PathBezier2d#OnDrawGizmos", this ); }

                // Debug.Log("drwaing");
                pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = new pc.Color( 1, 0, 0, 1 );
                if (this.visualizePath != null) {
                    this.visualizePath.gizmoDraw();
                } // To Visualize the path, use this method
            },
            /*PathBezier2d.OnDrawGizmos end.*/


        }
    });
    /*PathBezier2d end.*/

    /*PathSpline2d start.*/
    Bridge.define("PathSpline2d", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            cubes: null,
            dude1: null,
            dude2: null,
            visualizePath: null
        },
        methods: {
            /*PathSpline2d.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PathSpline2d#Start", this ); }

                var path = System.Array.init([this.cubes[0].position.$clone(), this.cubes[1].position.$clone(), this.cubes[2].position.$clone(), this.cubes[3].position.$clone(), this.cubes[4].position.$clone()], UnityEngine.Vector3);

                this.visualizePath = new LTSpline.ctor(path);
                // move
                LeanTween.moveSpline$1(this.dude1, path, 10.0).setOrientToPath2d(true).setSpeed(2.0);

                // move Local
                LeanTween.moveSplineLocal(this.dude2, path, 10.0).setOrientToPath2d(true).setSpeed(2.0);
            },
            /*PathSpline2d.Start end.*/

            /*PathSpline2d.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "PathSpline2d#OnDrawGizmos", this ); }

                pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = new pc.Color( 1, 0, 0, 1 );
                if (this.visualizePath != null) {
                    this.visualizePath.gizmoDraw();
                }
            },
            /*PathSpline2d.OnDrawGizmos end.*/


        }
    });
    /*PathSpline2d end.*/

    /*PathSplineEndless start.*/
    Bridge.define("PathSplineEndless", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            trackTrailRenderers: null,
            car: null,
            carInternal: null,
            cubes: null,
            cubesIter: 0,
            trees: null,
            treesIter: 0,
            randomIterWidth: 0,
            track: null,
            trackPts: null,
            zIter: 0,
            carIter: 0,
            carAdd: 0,
            trackMaxItems: 0,
            trackIter: 0,
            pushTrackAhead: 0,
            randomIter: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PathSplineEndless#init", this ); }

                this.randomIterWidth = 0.1;
                this.trackPts = new (System.Collections.Generic.List$1(UnityEngine.Vector3)).ctor();
                this.zIter = 0;
                this.carIter = 0.0;
                this.trackMaxItems = 15;
                this.trackIter = 1;
                this.pushTrackAhead = 0.0;
                this.randomIter = 0.0;
            }
        },
        methods: {
            /*PathSplineEndless.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PathSplineEndless#Start", this ); }


                // Setup initial track points
                for (var i = 0; i < 4; i = (i + 1) | 0) {
                    this.addRandomTrackPoint();
                }
                this.refreshSpline();

                // Animate in track ahead of the car
                LeanTween.value$8(this.gameObject, 0, 0.3, 2.0).setOnUpdate(Bridge.fn.bind(this, function (val) {
                    this.pushTrackAhead = val;
                }));
            },
            /*PathSplineEndless.Start end.*/

            /*PathSplineEndless.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "PathSplineEndless#Update", this ); }


                var zLastDist = (this.trackPts.getItem(((this.trackPts.Count - 1) | 0)).$clone().z - this.transform.position.z);
                if (zLastDist < 200.0) { // if the last node is too close we'll add in a new point and refresh the spline
                    this.addRandomTrackPoint();
                    this.refreshSpline();
                }

                // Update avatar's position on correct track
                this.track.place(this.car.transform, this.carIter);
                this.carIter += this.carAdd * UnityEngine.Time.deltaTime;

                // we'll place the trail renders always a bit in front of the car
                this.track.place(this.trackTrailRenderers.transform, this.carIter + this.pushTrackAhead);


                // Switch tracks on keyboard input
                var turn = UnityEngine.Input.GetAxis("Horizontal");
                if (UnityEngine.Input.anyKeyDown) {
                    if (turn < 0.0 && this.trackIter > 0) {
                        this.trackIter = (this.trackIter - 1) | 0;
                        this.playSwish();
                    } else if (turn > 0.0 && this.trackIter < 2) { // We have three track "rails" so stopping it from going above 3
                        this.trackIter = (this.trackIter + 1) | 0;
                        this.playSwish();
                    }
                    // Move the internal local x of the car to simulate changing tracks
                    LeanTween.moveLocalX(this.carInternal, (((this.trackIter - 1) | 0)) * 6.0, 0.3).setEase(LeanTweenType.easeOutBack);
                }
            },
            /*PathSplineEndless.Update end.*/

            /*PathSplineEndless.objectQueue start.*/
            objectQueue: function (arr, lastIter) {
if ( TRACE ) { TRACE( "PathSplineEndless#objectQueue", this ); }

                lastIter.v = lastIter.v >= ((arr.length - 1) | 0) ? 0 : ((lastIter.v + 1) | 0);

                // Reset scale and rotation for a new animation
                arr[lastIter.v].transform.localScale = new pc.Vec3( 1, 1, 1 );
                arr[lastIter.v].transform.rotation = pc.Quat.IDENTITY.clone();
                return arr[lastIter.v];
            },
            /*PathSplineEndless.objectQueue end.*/

            /*PathSplineEndless.addRandomTrackPoint start.*/
            addRandomTrackPoint: function () {
if ( TRACE ) { TRACE( "PathSplineEndless#addRandomTrackPoint", this ); }

                var randX = pc.noise.perlin2(0.0, this.randomIter);
                this.randomIter += this.randomIterWidth;

                var randomInFrontPosition = new pc.Vec3( (randX - 0.5) * 20.0, 0.0, this.zIter * 40.0 );

                // placing the box is just to visualize how the paths get created
                var box = this.objectQueue(this.cubes, Bridge.ref(this, "cubesIter"));
                box.transform.position = randomInFrontPosition.$clone();

                // Line the roads with trees
                var tree = this.objectQueue(this.trees, Bridge.ref(this, "treesIter"));
                var treeX = this.zIter % 2 === 0 ? -15.0 : 15.0;
                tree.transform.position = new pc.Vec3( randomInFrontPosition.x + treeX, 0.0, this.zIter * 40.0 );

                // Animate in new tree (just for fun)
                LeanTween.rotateAround(tree, new pc.Vec3( 0, 0, 1 ), 0.0, 1.0).setFrom(this.zIter % 2 === 0 ? 180.0 : -180.0).setEase(LeanTweenType.easeOutBack);

                this.trackPts.add(randomInFrontPosition.$clone()); // Add a future spline node
                if (this.trackPts.Count > this.trackMaxItems) {
                    this.trackPts.removeAt(0);
                } // Remove the trailing spline node

                this.zIter = (this.zIter + 1) | 0;
            },
            /*PathSplineEndless.addRandomTrackPoint end.*/

            /*PathSplineEndless.refreshSpline start.*/
            refreshSpline: function () {
if ( TRACE ) { TRACE( "PathSplineEndless#refreshSpline", this ); }

                this.track = new LTSpline.ctor(this.trackPts.ToArray());
                this.carIter = this.track.ratioAtPoint(this.car.transform.position); // we created a new spline so we need to update the cars iteration point on this new spline
                // Debug.Log("distance:"+track.distance+" carIter:"+carIter);
                this.carAdd = 40.0 / this.track.distance; // we want to make sure the speed is based on the distance of the spline for a more constant speed
            },
            /*PathSplineEndless.refreshSpline end.*/

            /*PathSplineEndless.playSwish start.*/
            playSwish: function () {
if ( TRACE ) { TRACE( "PathSplineEndless#playSwish", this ); }

                var volumeCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.005464481, 1.83897, 0.0), new pc.Keyframe(0.1114856, 2.281785, 0.0, 0.0), new pc.Keyframe(0.2482903, 2.271654, 0.0, 0.0), new pc.Keyframe(0.3, 0.01670286, 0.0, 0.0) ]});
                var frequencyCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.00136725, 0.0, 0.0), new pc.Keyframe(0.1482391, 0.005405405, 0.0, 0.0), new pc.Keyframe(0.2650336, 0.002480127, 0.0, 0.0) ]});

                // AudioClip audioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.2f,0.5f,0f)} ).setWaveNoise().setWaveNoiseScale(1000));
                //
                // LeanAudio.play( audioClip ); //a:fvb:8,,.00136725,,,.1482391,.005405405,,,.2650336,.002480127,,,8~8,,.005464481,1.83897,,.1114856,2.281785,,,.2482903,2.271654,,,.3,.01670286,,,8~.2,.5,,~~0~~3,1000,1
            },
            /*PathSplineEndless.playSwish end.*/


        }
    });
    /*PathSplineEndless end.*/

    /*PathSplinePerformance start.*/
    Bridge.define("PathSplinePerformance", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            trackTrailRenderers: null,
            car: null,
            carInternal: null,
            circleLength: 0,
            randomRange: 0,
            trackNodes: 0,
            carSpeed: 0,
            tracerSpeed: 0,
            track: null,
            trackIter: 0,
            carAdd: 0,
            trackPosition: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PathSplinePerformance#init", this ); }

                this.circleLength = 10.0;
                this.randomRange = 1.0;
                this.trackNodes = 30;
                this.carSpeed = 30.0;
                this.tracerSpeed = 2.0;
                this.trackIter = 1;
            }
        },
        methods: {
            /*PathSplinePerformance.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PathSplinePerformance#Start", this ); }

                UnityEngine.Application.targetFrameRate = 240;

                // Make the track from the provided transforms
                var randList = new (System.Collections.Generic.List$1(UnityEngine.Vector3)).ctor();
                var degree = 0.0;
                var nodeLength = (this.trackNodes + 1) | 0; // We need to add some extra because the first and last nodes just act as *guides* to the first and last curvature
                for (var i = 0; i < nodeLength; i = (i + 1) | 0) {
                    var x = Math.cos(degree * UnityEngine.Mathf.Deg2Rad) * this.circleLength + UnityEngine.Random.Range$1(0.0, this.randomRange);
                    var z = Math.sin(degree * UnityEngine.Mathf.Deg2Rad) * this.circleLength + UnityEngine.Random.Range$1(0.0, this.randomRange);
                    randList.add(new pc.Vec3( x, 1.0, z ));

                    degree += 360.0 / this.trackNodes;
                }
                randList.setItem(0, randList.getItem(((randList.Count - 1) | 0)).$clone()); // set the zero-ith one as the last position so it will flow smoothly into the first curve
                randList.add(randList.getItem(1).$clone()); // Add the first and second one in, so the circle connects to itself
                randList.add(randList.getItem(2).$clone());

                this.track = new LTSpline.ctor(randList.ToArray());

                this.carAdd = this.carSpeed / this.track.distance;

                this.tracerSpeed = this.track.distance / (this.carSpeed * 1.2);

                // Optional technique to show the trails in game
                LeanTween.moveSpline(this.trackTrailRenderers, this.track, this.tracerSpeed).setOrientToPath(true).setRepeat(-1);
            },
            /*PathSplinePerformance.Start end.*/

            /*PathSplinePerformance.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "PathSplinePerformance#Update", this ); }

                // Switch tracks on keyboard input
                var turn = UnityEngine.Input.GetAxis("Horizontal");
                if (UnityEngine.Input.anyKeyDown) {
                    if (turn < 0.0 && this.trackIter > 0) {
                        this.trackIter = (this.trackIter - 1) | 0;
                        this.playSwish();
                    } else if (turn > 0.0 && this.trackIter < 2) { // We have three track "rails" so stopping it from going above 3
                        this.trackIter = (this.trackIter + 1) | 0;
                        this.playSwish();
                    }
                    // Move the internal local x of the car to simulate changing tracks
                    LeanTween.moveLocalX(this.carInternal, (((this.trackIter - 1) | 0)) * 6.0, 0.3).setEase(LeanTweenType.easeOutBack);

                }

                // Update avatar's position on correct track
                this.track.place(this.car.transform, this.trackPosition);

                this.trackPosition += UnityEngine.Time.deltaTime * this.carAdd;

                if (this.trackPosition > 1.0) {
                    this.trackPosition = 0.0;
                } // We need to keep the ratio between 0-1 so after one we will loop back to the beginning of the track
            },
            /*PathSplinePerformance.Update end.*/

            /*PathSplinePerformance.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "PathSplinePerformance#OnDrawGizmos", this ); }

                if (this.track != null) {
                    this.track.drawGizmo(new pc.Color( 1, 0, 0, 1 ));
                }
            },
            /*PathSplinePerformance.OnDrawGizmos end.*/

            /*PathSplinePerformance.playSwish start.*/
            playSwish: function () {
if ( TRACE ) { TRACE( "PathSplinePerformance#playSwish", this ); }

                var volumeCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.005464481, 1.83897, 0.0), new pc.Keyframe(0.1114856, 2.281785, 0.0, 0.0), new pc.Keyframe(0.2482903, 2.271654, 0.0, 0.0), new pc.Keyframe(0.3, 0.01670286, 0.0, 0.0) ]});
                var frequencyCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.00136725, 0.0, 0.0), new pc.Keyframe(0.1482391, 0.005405405, 0.0, 0.0), new pc.Keyframe(0.2650336, 0.002480127, 0.0, 0.0) ]});

                //AudioClip audioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.2f,0.5f,0f)} ).setWaveNoise().setWaveNoiseScale(1000));

                //LeanAudio.play( audioClip ); //a:fvb:8,,.00136725,,,.1482391,.005405405,,,.2650336,.002480127,,,8~8,,.005464481,1.83897,,.1114856,2.281785,,,.2482903,2.271654,,,.3,.01670286,,,8~.2,.5,,~~0~~3,1000,1
            },
            /*PathSplinePerformance.playSwish end.*/


        }
    });
    /*PathSplinePerformance end.*/

    /*PathSplines start.*/
    Bridge.define("PathSplines", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            trans: null,
            cr: null,
            avatar1: null,
            iter: 0
        },
        methods: {
            /*PathSplines.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "PathSplines#OnEnable", this ); }

                // create the path
                this.cr = new LTSpline.ctor(System.Array.init([this.trans[0].position.$clone(), this.trans[1].position.$clone(), this.trans[2].position.$clone(), this.trans[3].position.$clone(), this.trans[4].position.$clone()], UnityEngine.Vector3));
                // cr = new LTSpline( new Vector3[] {new Vector3(-1f,0f,0f), new Vector3(0f,0f,0f), new Vector3(4f,0f,0f), new Vector3(20f,0f,0f), new Vector3(30f,0f,0f)} );
            },
            /*PathSplines.OnEnable end.*/

            /*PathSplines.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PathSplines#Start", this ); }

                this.avatar1 = UnityEngine.GameObject.Find("Avatar1");

                // Tween automatically
                LeanTween.move$2(this.avatar1, this.cr, 6.5).setOrientToPath(true).setRepeat(1).setOnComplete(Bridge.fn.bind(this, function () {
                    var next = System.Array.init([this.trans[4].position.$clone(), this.trans[3].position.$clone(), this.trans[2].position.$clone(), this.trans[1].position.$clone(), this.trans[0].position.$clone()], UnityEngine.Vector3);
                    LeanTween.moveSpline$1(this.avatar1, next, 6.5); // move it back to the start without an LTSpline
                })).setEase(LeanTweenType.easeOutQuad);
            },
            /*PathSplines.Start end.*/

            /*PathSplines.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "PathSplines#Update", this ); }

                // Or Update Manually
                // cr.place( avatar1.transform, iter );

                this.iter += UnityEngine.Time.deltaTime * 0.07;
                if (this.iter > 1.0) {
                    this.iter = 0.0;
                }
            },
            /*PathSplines.Update end.*/

            /*PathSplines.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "PathSplines#OnDrawGizmos", this ); }

                // Debug.Log("drwaing");
                if (this.cr == null) {
                    this.OnEnable();
                }
                pc.generateStubProxy( 'UnityEngine.Gizmos', true ).color = new pc.Color( 1, 0, 0, 1 );
                if (this.cr != null) {
                    this.cr.gizmoDraw();
                } // To Visualize the path, use this method
            },
            /*PathSplines.OnDrawGizmos end.*/


        }
    });
    /*PathSplines end.*/

    /*PathSplineTrack start.*/
    Bridge.define("PathSplineTrack", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            car: null,
            carInternal: null,
            trackTrailRenderers: null,
            trackOnePoints: null,
            track: null,
            trackIter: 0,
            trackPosition: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PathSplineTrack#init", this ); }

                this.trackIter = 1;
            }
        },
        methods: {
            /*PathSplineTrack.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PathSplineTrack#Start", this ); }

                // Make the track from the provided transforms
                this.track = new LTSpline.ctor(System.Array.init([this.trackOnePoints[0].position.$clone(), this.trackOnePoints[1].position.$clone(), this.trackOnePoints[2].position.$clone(), this.trackOnePoints[3].position.$clone(), this.trackOnePoints[4].position.$clone(), this.trackOnePoints[5].position.$clone(), this.trackOnePoints[6].position.$clone()], UnityEngine.Vector3));

                // Optional technique to show the trails in game
                LeanTween.moveSpline(this.trackTrailRenderers, this.track, 2.0).setOrientToPath(true).setRepeat(-1);
            },
            /*PathSplineTrack.Start end.*/

            /*PathSplineTrack.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "PathSplineTrack#Update", this ); }

                // Switch tracks on keyboard input
                var turn = UnityEngine.Input.GetAxis("Horizontal");
                if (UnityEngine.Input.anyKeyDown) {
                    if (turn < 0.0 && this.trackIter > 0) {
                        this.trackIter = (this.trackIter - 1) | 0;
                        this.playSwish();
                    } else if (turn > 0.0 && this.trackIter < 2) { // We have three track "rails" so stopping it from going above 3
                        this.trackIter = (this.trackIter + 1) | 0;
                        this.playSwish();
                    }
                    // Move the internal local x of the car to simulate changing tracks
                    LeanTween.moveLocalX(this.carInternal, (((this.trackIter - 1) | 0)) * 6.0, 0.3).setEase(LeanTweenType.easeOutBack);

                }

                // Update avatar's position on correct track
                this.track.place(this.car.transform, this.trackPosition);

                this.trackPosition += UnityEngine.Time.deltaTime * 0.03; // * Input.GetAxis("Vertical"); // Uncomment to have the forward and backwards controlled by the directional arrows

                if (this.trackPosition < 0.0) {
                    this.trackPosition = 1.0;
                } else {
                    if (this.trackPosition > 1.0) {
                        this.trackPosition = 0.0;
                    }
                }
            },
            /*PathSplineTrack.Update end.*/

            /*PathSplineTrack.OnDrawGizmos start.*/
            OnDrawGizmos: function () {
if ( TRACE ) { TRACE( "PathSplineTrack#OnDrawGizmos", this ); }

                LTSpline.drawGizmo(this.trackOnePoints, new pc.Color( 1, 0, 0, 1 ));
            },
            /*PathSplineTrack.OnDrawGizmos end.*/

            /*PathSplineTrack.playSwish start.*/
            playSwish: function () {
if ( TRACE ) { TRACE( "PathSplineTrack#playSwish", this ); }

                var volumeCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.005464481, 1.83897, 0.0), new pc.Keyframe(0.1114856, 2.281785, 0.0, 0.0), new pc.Keyframe(0.2482903, 2.271654, 0.0, 0.0), new pc.Keyframe(0.3, 0.01670286, 0.0, 0.0) ]});
                var frequencyCurve = new pc.AnimationCurve({keyframes: [ new pc.Keyframe(0.0, 0.00136725, 0.0, 0.0), new pc.Keyframe(0.1482391, 0.005405405, 0.0, 0.0), new pc.Keyframe(0.2650336, 0.002480127, 0.0, 0.0) ]});

                //AudioClip audioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.2f,0.5f,0f)} ).setWaveNoise().setWaveNoiseScale(1000));

                //LeanAudio.play( audioClip ); //a:fvb:8,,.00136725,,,.1482391,.005405405,,,.2650336,.002480127,,,8~8,,.005464481,1.83897,,.1114856,2.281785,,,.2482903,2.271654,,,.3,.01670286,,,8~.2,.5,,~~0~~3,1000,1
            },
            /*PathSplineTrack.playSwish end.*/


        }
    });
    /*PathSplineTrack end.*/

    /*PieceShape start.*/
    Bridge.define("PieceShape", {
        fields: {
            shapes: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PieceShape#init", this ); }

                this.shapes = System.Array.init(5, 0, System.Int32);
            }
        }
    });
    /*PieceShape end.*/

    /*PlayingManager+BlockContainer start.*/
    Bridge.define("PlayingManager.BlockContainer", {
        $kind: 1002,
        fields: {
            blocks: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PlayingManager.BlockContainer#init", this ); }

                this.blocks = new (System.Collections.Generic.List$1(BlockObj)).ctor();
            }
        }
    });
    /*PlayingManager+BlockContainer end.*/

    /*PopUpFrameWork.Popup+AnimType start.*/
    Bridge.define("PopUpFrameWork.Popup.AnimType", {
        $kind: 1006,
        statics: {
            fields: {
                Fade: 0,
                Zoom: 1
            }
        }
    });
    /*PopUpFrameWork.Popup+AnimType end.*/

    /*PopUpFrameWork.PopupManager start.*/
    Bridge.define("PopUpFrameWork.PopupManager", {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            fields: {
                instance: null
            }
        },
        fields: {
            popupInfos: null,
            activePopups: null
        },
        methods: {
            /*PopUpFrameWork.PopupManager.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#Awake", this ); }

                PopUpFrameWork.PopupManager.instance = this;

                this.activePopups = new (System.Collections.Generic.List$1(PopUpFrameWork.Popup)).ctor();

                for (var i = 0; i < this.popupInfos.Count; i = (i + 1) | 0) {
                    this.popupInfos.getItem(i).popup.Initialize();
                }
            },
            /*PopUpFrameWork.PopupManager.Awake end.*/

            /*PopUpFrameWork.PopupManager.Show start.*/
            Show: function (id) {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#Show", this ); }

                this.Show$2(id, null, null);
            },
            /*PopUpFrameWork.PopupManager.Show end.*/

            /*PopUpFrameWork.PopupManager.Show$1 start.*/
            Show$1: function (id, inData) {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#Show$1", this ); }

                this.Show$2(id, inData, null);
            },
            /*PopUpFrameWork.PopupManager.Show$1 end.*/

            /*PopUpFrameWork.PopupManager.Show$3 start.*/
            Show$3: function (id, callBack) {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#Show$3", this ); }

                var popup = this.GetPopupById(id);

                if (UnityEngine.MonoBehaviour.op_Inequality(popup, null)) {
                    this.activePopups.add(popup);

                    popup.Show$1(null, null, callBack);
                } else {
                    UnityEngine.Debug.LogErrorFormat("[PopupController] Popup with id {0} does not exist", [id]);
                }
            },
            /*PopUpFrameWork.PopupManager.Show$3 end.*/

            /*PopUpFrameWork.PopupManager.Show$2 start.*/
            Show$2: function (id, inData, popupClosed) {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#Show$2", this ); }

                var popup = this.GetPopupById(id);

                if (UnityEngine.MonoBehaviour.op_Inequality(popup, null)) {
                    this.activePopups.add(popup);

                    popup.Show$1(inData, popupClosed);
                } else {
                    UnityEngine.Debug.LogErrorFormat("[PopupController] Popup with id {0} does not exist", [id]);
                }
            },
            /*PopUpFrameWork.PopupManager.Show$2 end.*/

            /*PopUpFrameWork.PopupManager.CloseActivePopup start.*/
            CloseActivePopup: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#CloseActivePopup", this ); }

                if (this.activePopups.Count > 0) {
                    var index = (this.activePopups.Count - 1) | 0;

                    if (this.activePopups.getItem(index).CanAndroidBackClosePopup) {
                        this.activePopups.getItem(index).Hide(true);
                    }

                    return true;
                }

                return false;
            },
            /*PopUpFrameWork.PopupManager.CloseActivePopup end.*/

            /*PopUpFrameWork.PopupManager.OnPopupHiding start.*/
            OnPopupHiding: function (popup) {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#OnPopupHiding", this ); }

                for (var i = (this.activePopups.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                    if (UnityEngine.MonoBehaviour.op_Equality(popup, this.activePopups.getItem(i))) {
                        this.activePopups.removeAt(i);

                        break;
                    }
                }
            },
            /*PopUpFrameWork.PopupManager.OnPopupHiding end.*/

            /*PopUpFrameWork.PopupManager.GetPopupById start.*/
            GetPopupById: function (id) {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager#GetPopupById", this ); }

                for (var i = 0; i < this.popupInfos.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(id, this.popupInfos.getItem(i).popupId)) {
                        return this.popupInfos.getItem(i).popup;
                    }
                }

                return null;
            },
            /*PopUpFrameWork.PopupManager.GetPopupById end.*/


        },
        overloads: {
            "Show(string, object[])": "Show$1",
            "Show(string, UnityAction)": "Show$3",
            "Show(string, object[], Popup.PopupClosed)": "Show$2"
        }
    });
    /*PopUpFrameWork.PopupManager end.*/

    /*PopUpFrameWork.PopupManager+PopupInfo start.*/
    Bridge.define("PopUpFrameWork.PopupManager.PopupInfo", {
        $kind: 1002,
        fields: {
            popupId: null,
            popup: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.PopupManager.PopupInfo#init", this ); }

                this.popupId = "";
            }
        }
    });
    /*PopUpFrameWork.PopupManager+PopupInfo end.*/

    /*RatioResolution start.*/
    Bridge.define("RatioResolution", {
        statics: {
            methods: {
                /*RatioResolution.GetResolution:static start.*/
                GetResolution: function () {
if ( TRACE ) { TRACE( "RatioResolution#GetResolution", this ); }

                    var max = UnityEngine.Mathf.Max(UnityEngine.Screen.width, UnityEngine.Screen.height);
                    var min = UnityEngine.Mathf.Min(UnityEngine.Screen.width, UnityEngine.Screen.height);
                    return max / min;
                },
                /*RatioResolution.GetResolution:static end.*/

                /*RatioResolution.GetMainGameViewSize:static start.*/
                GetMainGameViewSize: function () {
if ( TRACE ) { TRACE( "RatioResolution#GetMainGameViewSize", this ); }

                    var T = Bridge.Reflection.getType("UnityEditor.GameView,UnityEditor");
                    var GetSizeOfMainGameView = Bridge.Reflection.getMembers(T, 8, 40 | 256, "GetSizeOfMainGameView");
                    var Res = Bridge.Reflection.midel(GetSizeOfMainGameView, null, null)(null);
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(Res, UnityEngine.Vector2), UnityEngine.Vector2));
                },
                /*RatioResolution.GetMainGameViewSize:static end.*/


            }
        }
    });
    /*RatioResolution end.*/

    /*RectTransformByOrientation start.*/
    Bridge.define("RectTransformByOrientation", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            portraitScale: null,
            landscapeScale: null,
            trans: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "RectTransformByOrientation#init", this ); }

                this.portraitScale = new UnityEngine.Vector3();
                this.landscapeScale = new UnityEngine.Vector3();
            }
        },
        methods: {
            /*RectTransformByOrientation.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "RectTransformByOrientation#Start", this ); }

                this.trans = this.GetComponent(UnityEngine.RectTransform);
                OrientationManager.addOrientationChangeEvent(Bridge.fn.cacheBind(this, this.UpdateRect));
                this.InitializeRect();
            },
            /*RectTransformByOrientation.Start end.*/

            /*RectTransformByOrientation.InitializeRect start.*/
            InitializeRect: function () {
if ( TRACE ) { TRACE( "RectTransformByOrientation#InitializeRect", this ); }

                var screenRatio = (((Bridge.Int.div(UnityEngine.Screen.width, UnityEngine.Screen.height)) | 0));
                var isPortrait = screenRatio < 1 ? true : false;
                this.UpdateRect(isPortrait);
            },
            /*RectTransformByOrientation.InitializeRect end.*/

            /*RectTransformByOrientation.UpdateRect start.*/
            UpdateRect: function (isPortrait) {
if ( TRACE ) { TRACE( "RectTransformByOrientation#UpdateRect", this ); }

                if (isPortrait) {
                    //UpdateRectPos(portraitLeftTopRightBottom);
                    this.trans.localScale = this.portraitScale.$clone();
                } else if (!isPortrait) {
                    //UpdateRectPos(landscapeLeftTopRightBottom);
                    this.trans.localScale = this.landscapeScale.$clone();
                }
            },
            /*RectTransformByOrientation.UpdateRect end.*/

            /*RectTransformByOrientation.UpdateRectPos start.*/
            UpdateRectPos: function (leftTopRightBottom) {
if ( TRACE ) { TRACE( "RectTransformByOrientation#UpdateRectPos", this ); }

                var left = leftTopRightBottom.x;
                var top = leftTopRightBottom.y;
                var right = leftTopRightBottom.z;
                var bottom = leftTopRightBottom.w;
                this.trans.offsetMin = new pc.Vec2( left, bottom );
                this.trans.offsetMax = new pc.Vec2( -right, -top );
            },
            /*RectTransformByOrientation.UpdateRectPos end.*/


        }
    });
    /*RectTransformByOrientation end.*/

    /*RestartStage start.*/
    Bridge.define("RestartStage", {
        inherits: [UnityEngine.MonoBehaviour],
        methods: {
            /*RestartStage.RestartCurrentStage start.*/
            RestartCurrentStage: function () {
if ( TRACE ) { TRACE( "RestartStage#RestartCurrentStage", this ); }

                UnityEngine.SceneManagement.SceneManager.LoadScene$2(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);
            },
            /*RestartStage.RestartCurrentStage end.*/

            /*RestartStage.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "RestartStage#Update", this ); }

                if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.R)) {
                    this.RestartCurrentStage();
                }
            },
            /*RestartStage.Update end.*/


        }
    });
    /*RestartStage end.*/

    /*ScreenFrameWork.Screen+OnTransitionEvent start.*/
    Bridge.define("ScreenFrameWork.Screen.OnTransitionEvent", {
        inherits: [UnityEngine.Events.UnityEvent],
        $kind: 1002
    });
    /*ScreenFrameWork.Screen+OnTransitionEvent end.*/

    /*ScreenFrameWork.Screen+TransitionInfo start.*/
    Bridge.define("ScreenFrameWork.Screen.TransitionInfo", {
        $kind: 1002,
        fields: {
            animate: false,
            animationType: 0,
            animationDuration: 0,
            animationStyle: 0,
            animationCurve: null,
            onTransition: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen.TransitionInfo#init", this ); }

                this.animate = false;
                this.animationType = ScreenFrameWork.Screen.TransitionInfo.Type.Fade;
                this.animationDuration = 0;
                this.animationStyle = UIAnimation.Style.Linear;
            }
        }
    });
    /*ScreenFrameWork.Screen+TransitionInfo end.*/

    /*ScreenFrameWork.Screen+TransitionInfo+Type start.*/
    Bridge.define("ScreenFrameWork.Screen.TransitionInfo.Type", {
        $kind: 1006,
        statics: {
            fields: {
                Fade: 0,
                Swipe: 1
            }
        }
    });
    /*ScreenFrameWork.Screen+TransitionInfo+Type end.*/

    /*ScreenFrameWork.ScreenBackButton start.*/
    Bridge.define("ScreenFrameWork.ScreenBackButton", {
        inherits: [UnityEngine.MonoBehaviour],
        fields: {
            fadeDuration: 0,
            scene: null,
            alphaStart: 0
        },
        props: {
            Button: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#Button#get", this ); }

                    return this.gameObject.GetComponent(UnityEngine.UI.Button);
                }
            },
            CanvasGroup: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#CanvasGroup#get", this ); }

                    return this.gameObject.GetComponent(UnityEngine.CanvasGroup);
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#init", this ); }

                this.fadeDuration = 0.5;
                this.alphaStart = 0;
            }
        },
        methods: {
            /*ScreenFrameWork.ScreenBackButton.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#Start", this ); }

                this.Button.onClick.AddListener(Bridge.fn.cacheBind(this, this.OnButtonClicked));

                this.CanvasGroup.alpha = this.alphaStart;

                ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.OnSwitchingScreens = Bridge.fn.combine(ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.OnSwitchingScreens, Bridge.fn.cacheBind(this, this.OnSwitchingScreens));
            },
            /*ScreenFrameWork.ScreenBackButton.Start end.*/

            /*ScreenFrameWork.ScreenBackButton.OnButtonClicked start.*/
            OnButtonClicked: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#OnButtonClicked", this ); }


                ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.Back(this.scene);
            },
            /*ScreenFrameWork.ScreenBackButton.OnButtonClicked end.*/

            /*ScreenFrameWork.ScreenBackButton.OnSwitchingScreens start.*/
            OnSwitchingScreens: function (fromScreenId, toScreenId) {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#OnSwitchingScreens", this ); }

                if (Bridge.referenceEquals(toScreenId, ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.HomeScreenId)) {
                    // Fade out the back button
                    this.PlayAnimation(UIAnimation.Alpha$1(this.gameObject, 1.0, 0.0, this.fadeDuration));
                    this.Button.interactable = false;
                } else if (Bridge.referenceEquals(fromScreenId, ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.HomeScreenId)) {
                    // Fade in the back button
                    this.PlayAnimation(UIAnimation.Alpha$1(this.gameObject, 0.0, 1.0, this.fadeDuration));
                    this.Button.interactable = true;
                }
            },
            /*ScreenFrameWork.ScreenBackButton.OnSwitchingScreens end.*/

            /*ScreenFrameWork.ScreenBackButton.PlayAnimation start.*/
            PlayAnimation: function (anim) {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenBackButton#PlayAnimation", this ); }

                anim.style = UIAnimation.Style.EaseOut;
                anim.startOnFirstFrame = true;
                anim.Play();
            },
            /*ScreenFrameWork.ScreenBackButton.PlayAnimation end.*/


        }
    });
    /*ScreenFrameWork.ScreenBackButton end.*/

    /*SoundButton start.*/
    Bridge.define("SoundButton", {
        inherits: [UnityEngine.MonoBehaviour,UnityEngine.EventSystems.IPointerDownHandler],
        alias: ["OnPointerDown", "UnityEngine$EventSystems$IPointerDownHandler$OnPointerDown"],
        methods: {
            /*SoundButton.OnPointerDown start.*/
            OnPointerDown: function (eventData) {
if ( TRACE ) { TRACE( "SoundButton#OnPointerDown", this ); }

                ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.ButtonClickedSound();
            },
            /*SoundButton.OnPointerDown end.*/


        }
    });
    /*SoundButton end.*/

    /*SoundClipInfor start.*/
    Bridge.define("SoundClipInfor", {
        fields: {
            id: null,
            audioClip: null,
            clipVolume: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SoundClipInfor#init", this ); }

                this.id = "";
                this.clipVolume = 1;
            }
        }
    });
    /*SoundClipInfor end.*/

    /*Timer start.*/
    Bridge.define("Timer", {
        statics: {
            fields: {
                behaviour: null
            },
            methods: {
                /*Timer.Schedule:static start.*/
                Schedule: function (_behaviour, delay, task) {
if ( TRACE ) { TRACE( "Timer#Schedule", this ); }

                    Timer.behaviour = _behaviour;
                    if (!Timer.behaviour.gameObject.activeInHierarchy) {
                        return;
                    }
                    Timer.behaviour.StartCoroutine$1(Timer.DoTask(task, delay));
                },
                /*Timer.Schedule:static end.*/

                /*Timer.StopSchedule:static start.*/
                StopSchedule: function (_behaviour) {
if ( TRACE ) { TRACE( "Timer#StopSchedule", this ); }

                    Timer.behaviour = _behaviour;
                    if (!Timer.behaviour.gameObject.activeInHierarchy) {
                        return;
                    }
                    Timer.behaviour.StopAllCoroutines();
                },
                /*Timer.StopSchedule:static end.*/

                /*Timer.DoTask:static start.*/
                DoTask: function (task, delay) {
if ( TRACE ) { TRACE( "Timer#DoTask", this ); }

                    var $step = 0,
                        $jumpFromFinally,
                        $returnValue,
                        $async_e;

                    var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                switch ($step) {
                                    case 0: {
                                        $enumerator.current = new UnityEngine.WaitForSeconds(delay);
                                            $step = 1;
                                            return true;
                                    }
                                    case 1: {
                                        task();

                                    }
                                    default: {
                                        return false;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            throw $async_e;
                        }
                    }));
                    return $enumerator;
                },
                /*Timer.DoTask:static end.*/


            }
        },
        fields: {
            alarmTime: 0,
            currentTime: 0
        },
        ctors: {
            ctor: function () {
if ( TRACE ) { TRACE( "Timer#ctor", this ); }

                this.$initialize();
            },
            $ctor1: function (time) {
if ( TRACE ) { TRACE( "Timer#$ctor1", this ); }

                this.$initialize();
                this.alarmTime = time;
                this.currentTime = 0.0;
            }
        },
        methods: {
            /*Timer.Tick start.*/
            Tick: function (time) {
if ( TRACE ) { TRACE( "Timer#Tick", this ); }

                this.currentTime += time;
                if (this.currentTime > this.alarmTime) {
                    this.currentTime = 0.0;
                    return true;
                }
                return false;
            },
            /*Timer.Tick end.*/

            /*Timer.Clear start.*/
            Clear: function () {
if ( TRACE ) { TRACE( "Timer#Clear", this ); }

                this.currentTime = 0.0;
            },
            /*Timer.Clear end.*/


        }
    });
    /*Timer end.*/

    /*TweenAction start.*/
    Bridge.define("TweenAction", {
        $kind: 6,
        statics: {
            fields: {
                MOVE_X: 0,
                MOVE_Y: 1,
                MOVE_Z: 2,
                MOVE_LOCAL_X: 3,
                MOVE_LOCAL_Y: 4,
                MOVE_LOCAL_Z: 5,
                MOVE_CURVED: 6,
                MOVE_CURVED_LOCAL: 7,
                MOVE_SPLINE: 8,
                MOVE_SPLINE_LOCAL: 9,
                SCALE_X: 10,
                SCALE_Y: 11,
                SCALE_Z: 12,
                ROTATE_X: 13,
                ROTATE_Y: 14,
                ROTATE_Z: 15,
                ROTATE_AROUND: 16,
                ROTATE_AROUND_LOCAL: 17,
                CANVAS_ROTATEAROUND: 18,
                CANVAS_ROTATEAROUND_LOCAL: 19,
                CANVAS_PLAYSPRITE: 20,
                ALPHA: 21,
                TEXT_ALPHA: 22,
                CANVAS_ALPHA: 23,
                CANVASGROUP_ALPHA: 24,
                ALPHA_VERTEX: 25,
                COLOR: 26,
                CALLBACK_COLOR: 27,
                TEXT_COLOR: 28,
                CANVAS_COLOR: 29,
                CANVAS_MOVE_X: 30,
                CANVAS_MOVE_Y: 31,
                CANVAS_MOVE_Z: 32,
                CALLBACK: 33,
                MOVE: 34,
                MOVE_LOCAL: 35,
                MOVE_TO_TRANSFORM: 36,
                ROTATE: 37,
                ROTATE_LOCAL: 38,
                SCALE: 39,
                VALUE3: 40,
                GUI_MOVE: 41,
                GUI_MOVE_MARGIN: 42,
                GUI_SCALE: 43,
                GUI_ALPHA: 44,
                GUI_ROTATE: 45,
                DELAYED_SOUND: 46,
                CANVAS_MOVE: 47,
                CANVAS_SCALE: 48,
                CANVAS_SIZEDELTA: 49,
                FOLLOW: 50,
                NONE: 51
            }
        }
    });
    /*TweenAction end.*/

    /*UIAnimation start.*/
    Bridge.define("UIAnimation", {
        inherits: [UnityEngine.MonoBehaviour],
        statics: {
            methods: {
                /*UIAnimation.PlayAllById:static start.*/
                /**
                 * Plays all UIAnimations on the given GameObject with the given id
                 *
                 * @static
                 * @public
                 * @this UIAnimation
                 * @memberof UIAnimation
                 * @param   {UnityEngine.GameObject}    targetGameObject    
                 * @param   {string}                    animationId
                 * @return  {void}
                 */
                PlayAllById: function (targetGameObject, animationId) {
if ( TRACE ) { TRACE( "UIAnimation#PlayAllById", this ); }

                    var uiAnimations = targetGameObject.GetComponents(UIAnimation);

                    for (var i = 0; i < uiAnimations.length; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(uiAnimations[i].id, animationId)) {
                            uiAnimations[i].Play();
                        }
                    }
                },
                /*UIAnimation.PlayAllById:static end.*/

                /*UIAnimation.StopAllById:static start.*/
                /**
                 * Stops all UIAnimations on the given GameObject with the given id
                 *
                 * @static
                 * @public
                 * @this UIAnimation
                 * @memberof UIAnimation
                 * @param   {UnityEngine.GameObject}    targetGameObject    
                 * @param   {string}                    animationId
                 * @return  {void}
                 */
                StopAllById: function (targetGameObject, animationId) {
if ( TRACE ) { TRACE( "UIAnimation#StopAllById", this ); }

                    var uiAnimations = targetGameObject.GetComponents(UIAnimation);

                    for (var i = 0; i < uiAnimations.length; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(uiAnimations[i].id, animationId)) {
                            uiAnimations[i].Stop();
                        }
                    }
                },
                /*UIAnimation.StopAllById:static end.*/

                /*UIAnimation.GetAnimation:static start.*/
                GetAnimation: function (targetGameObject, animType) {
if ( TRACE ) { TRACE( "UIAnimation#GetAnimation", this ); }

                    var uiAnimations = targetGameObject.GetComponents(UIAnimation);

                    for (var i = 0; i < uiAnimations.length; i = (i + 1) | 0) {
                        if (uiAnimations[i].type === animType) {
                            return uiAnimations[i];
                        }
                    }

                    return null;
                },
                /*UIAnimation.GetAnimation:static end.*/

                /*UIAnimation.GetAnimationsById:static start.*/
                GetAnimationsById: function (targetGameObject, id) {
if ( TRACE ) { TRACE( "UIAnimation#GetAnimationsById", this ); }

                    var uiAnimations = targetGameObject.GetComponents(UIAnimation);
                    var returnAnimations = new (System.Collections.Generic.List$1(UIAnimation)).ctor();

                    for (var i = 0; i < uiAnimations.length; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(uiAnimations[i].id, id)) {
                            returnAnimations.add(uiAnimations[i]);
                        }
                    }

                    return returnAnimations;
                },
                /*UIAnimation.GetAnimationsById:static end.*/

                /*UIAnimation.DestroyAllAnimations:static start.*/
                DestroyAllAnimations: function (targetGameObject) {
if ( TRACE ) { TRACE( "UIAnimation#DestroyAllAnimations", this ); }

                    var uiAnimations = targetGameObject.GetComponents(UIAnimation);

                    for (var i = 0; i < uiAnimations.length; i = (i + 1) | 0) {
                        uiAnimations[i].DestroyAnimation();
                    }
                },
                /*UIAnimation.DestroyAllAnimations:static end.*/

                /*UIAnimation.PositionX:static start.*/
                PositionX: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#PositionX", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.PositionX, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.PositionX:static end.*/

                /*UIAnimation.PositionX$1:static start.*/
                PositionX$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#PositionX$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.PositionX, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.PositionX$1:static end.*/

                /*UIAnimation.PositionY:static start.*/
                PositionY: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#PositionY", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.PositionY, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.PositionY:static end.*/

                /*UIAnimation.PositionY$1:static start.*/
                PositionY$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#PositionY$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.PositionY, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.PositionY$1:static end.*/

                /*UIAnimation.ScaleX:static start.*/
                ScaleX: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#ScaleX", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.ScaleX, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.ScaleX:static end.*/

                /*UIAnimation.ScaleX$1:static start.*/
                ScaleX$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#ScaleX$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.ScaleX, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.ScaleX$1:static end.*/

                /*UIAnimation.ScaleY:static start.*/
                ScaleY: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#ScaleY", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.ScaleY, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.ScaleY:static end.*/

                /*UIAnimation.ScaleY$1:static start.*/
                ScaleY$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#ScaleY$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.ScaleY, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.ScaleY$1:static end.*/

                /*UIAnimation.RotationZ:static start.*/
                RotationZ: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#RotationZ", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.RotationZ, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.RotationZ:static end.*/

                /*UIAnimation.RotationZ$1:static start.*/
                RotationZ$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#RotationZ$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.RotationZ, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.RotationZ$1:static end.*/

                /*UIAnimation.Width$1:static start.*/
                Width$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Width$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.Width, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.Width$1:static end.*/

                /*UIAnimation.Width:static start.*/
                Width: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Width", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.Width, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.Width:static end.*/

                /*UIAnimation.Height$1:static start.*/
                Height$1: function (rectT, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Height$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.Height, rectT.gameObject, false, from, to, duration);
                },
                /*UIAnimation.Height$1:static end.*/

                /*UIAnimation.Height:static start.*/
                Height: function (rectT, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Height", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.Height, rectT.gameObject, true, 0, to, duration);
                },
                /*UIAnimation.Height:static end.*/

                /*UIAnimation.Alpha:static start.*/
                Alpha: function (gameObject, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Alpha", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.Alpha, gameObject, true, 0, to, duration);
                },
                /*UIAnimation.Alpha:static end.*/

                /*UIAnimation.Alpha$1:static start.*/
                Alpha$1: function (gameObject, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Alpha$1", this ); }

                    return UIAnimation.CreateAnimation(UIAnimation.Type.Alpha, gameObject, false, from, to, duration);
                },
                /*UIAnimation.Alpha$1:static end.*/

                /*UIAnimation.Color:static start.*/
                Color: function (graphic, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Color", this ); }

                    return UIAnimation.CreateColorAnimation(graphic.gameObject, true, new pc.Color( 1, 1, 1, 1 ), to, duration);
                },
                /*UIAnimation.Color:static end.*/

                /*UIAnimation.Color$1:static start.*/
                Color$1: function (graphic, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#Color$1", this ); }

                    return UIAnimation.CreateColorAnimation(graphic.gameObject, false, from, to, duration);
                },
                /*UIAnimation.Color$1:static end.*/

                /*UIAnimation.CreateAnimation:static start.*/
                CreateAnimation: function (type, gameObject, useCurrentFrom, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#CreateAnimation", this ); }

                    var uIAnimation = UIAnimation.CreateUIAnimation(gameObject, type, duration, useCurrentFrom);

                    if (!useCurrentFrom) {
                        uIAnimation.fromValue = from;
                    }

                    uIAnimation.toValue = to;

                    return uIAnimation;
                },
                /*UIAnimation.CreateAnimation:static end.*/

                /*UIAnimation.CreateColorAnimation:static start.*/
                CreateColorAnimation: function (gameObject, useCurrentFrom, from, to, duration) {
if ( TRACE ) { TRACE( "UIAnimation#CreateColorAnimation", this ); }

                    var uIAnimation = UIAnimation.CreateUIAnimation(gameObject, UIAnimation.Type.Color, duration, useCurrentFrom);

                    if (!useCurrentFrom) {
                        uIAnimation.fromColor = from.$clone();
                    }

                    uIAnimation.toColor = to.$clone();

                    return uIAnimation;
                },
                /*UIAnimation.CreateColorAnimation:static end.*/

                /*UIAnimation.CreateUIAnimation:static start.*/
                CreateUIAnimation: function (gameObject, type, duration, useCurrentFrom) {
if ( TRACE ) { TRACE( "UIAnimation#CreateUIAnimation", this ); }

                    var uIAnimation = UIAnimation.GetUIAnimation(gameObject, type);

                    uIAnimation.duration = duration;
                    uIAnimation.useCurrentFrom = useCurrentFrom;
                    uIAnimation.destroyOnFinish = true;

                    return uIAnimation;
                },
                /*UIAnimation.CreateUIAnimation:static end.*/

                /*UIAnimation.GetUIAnimation:static start.*/
                GetUIAnimation: function (gameObject, type) {
if ( TRACE ) { TRACE( "UIAnimation#GetUIAnimation", this ); }

                    var uIAnimations = gameObject.GetComponents(UIAnimation);
                    var uIAnimation = null;

                    for (var i = 0; i < uIAnimations.length; i = (i + 1) | 0) {
                        if (UnityEngine.MonoBehaviour.op_Inequality(uIAnimations[i], null) && !uIAnimations[i].isDestroyed && uIAnimations[i].type === type) {
                            uIAnimation = uIAnimations[i];

                            break;
                        }
                    }

                    if (UnityEngine.MonoBehaviour.op_Equality(uIAnimation, null)) {
                        uIAnimation = gameObject.AddComponent(UIAnimation);
                        uIAnimation.type = type;
                    }

                    return uIAnimation;
                },
                /*UIAnimation.GetUIAnimation:static end.*/


            }
        },
        fields: {
            id: null,
            type: 0,
            loopType: 0,
            style: 0,
            duration: 0,
            startDelay: 0,
            startOnFirstFrame: false,
            useCurrentFrom: false,
            playOnStart: false,
            animationCurve: null,
            elapsedTime: 0,
            fromValue: 0,
            toValue: 0,
            fromColor: null,
            toColor: null,
            isPlaying: false,
            destroyOnFinish: false,
            isDestroyed: false,
            rectT: null,
            graphic: null,
            canvasGroup: null,
            canvasGroupAdded: false,
            OnAnimationFinished: null
        },
        props: {
            IsPlaying: {
                get: function () {
if ( TRACE ) { TRACE( "UIAnimation#IsPlaying#get", this ); }

                    return this.isPlaying;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "UIAnimation#init", this ); }

                this.fromColor = new UnityEngine.Color();
                this.toColor = new UnityEngine.Color();
                this.fromColor = new pc.Color( 1, 1, 1, 1 );
                this.toColor = new pc.Color( 1, 1, 1, 1 );
            }
        },
        methods: {
            /*UIAnimation.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "UIAnimation#Start", this ); }

                if (this.playOnStart) {
                    this.Play();
                }

            },
            /*UIAnimation.Start end.*/

            /*UIAnimation.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "UIAnimation#Update", this ); }

                if (this.isPlaying) {
                    this.elapsedTime += UnityEngine.Time.deltaTime;

                    this.UpdateAnimation(this.elapsedTime);

                    // Check if the animation is over
                    if (this.elapsedTime >= this.duration) {
                        this.isPlaying = false;

                        if (this.loopType !== UIAnimation.LoopType.None) {
                            // If loop type is reverse then swap the from and to values
                            if (this.loopType === UIAnimation.LoopType.Reverse) {
                                this.useCurrentFrom = false;

                                Utilities.SwapValue(System.Single, Bridge.ref(this, "fromValue"), Bridge.ref(this, "toValue"));
                                Utilities.SwapValue(UnityEngine.Color, Bridge.ref(this, "fromColor"), Bridge.ref(this, "toColor"));
                            }

                            // Play the animation again
                            this.Play();
                        } else {
                            if (this.destroyOnFinish) {
                                // Destroy the UIAnimation component
                                this.DestroyAnimation();
                            }

                            if (!Bridge.staticEquals(this.OnAnimationFinished, null)) {
                                this.OnAnimationFinished(this.gameObject);
                            }
                        }
                    }
                }
            },
            /*UIAnimation.Update end.*/

            /*UIAnimation.Play start.*/
            Play: function () {
if ( TRACE ) { TRACE( "UIAnimation#Play", this ); }

                // Init the animation
                this.Init();

                // Check that the animation settings are valid
                if (!this.Check()) {
                    return;
                }

                // If using the current value for the from value then set it now
                if (this.useCurrentFrom) {
                    this.SetFromValue();
                }

                if (this.startOnFirstFrame) {
                    // Set the animation in the first frame
                    this.UpdateAnimation(0);
                }

                if (this.startDelay > 0) {
                    this.StartCoroutine$1(this.PlayAnimationAfterDelay(this.startDelay));
                } else {
                    this.PlayAnimation();
                }
            },
            /*UIAnimation.Play end.*/

            /*UIAnimation.Stop start.*/
            Stop: function () {
if ( TRACE ) { TRACE( "UIAnimation#Stop", this ); }

                this.isPlaying = false;
            },
            /*UIAnimation.Stop end.*/

            /*UIAnimation.Init start.*/
            Init: function () {
if ( TRACE ) { TRACE( "UIAnimation#Init", this ); }

                switch (this.type) {
                    case UIAnimation.Type.PositionX: 
                    case UIAnimation.Type.PositionY: 
                    case UIAnimation.Type.Width: 
                    case UIAnimation.Type.Height: 
                        this.rectT = Bridge.as(this.transform, UnityEngine.RectTransform);
                        break;
                    case UIAnimation.Type.Color: 
                        this.graphic = this.gameObject.GetComponent(UnityEngine.UI.Graphic);
                        break;
                    case UIAnimation.Type.Alpha: 
                        this.canvasGroup = this.gameObject.GetComponent(UnityEngine.CanvasGroup);
                        if (UnityEngine.MonoBehaviour.op_Equality(this.canvasGroup, null)) {
                            this.canvasGroup = this.gameObject.AddComponent(UnityEngine.CanvasGroup);
                            this.canvasGroup.blocksRaycasts = false;
                            this.canvasGroupAdded = true;
                        }
                        break;
                }
            },
            /*UIAnimation.Init end.*/

            /*UIAnimation.SetFromValue start.*/
            SetFromValue: function () {
if ( TRACE ) { TRACE( "UIAnimation#SetFromValue", this ); }

                switch (this.type) {
                    case UIAnimation.Type.PositionX: 
                        this.fromValue = this.rectT.anchoredPosition.x;
                        break;
                    case UIAnimation.Type.PositionY: 
                        this.fromValue = this.rectT.anchoredPosition.y;
                        break;
                    case UIAnimation.Type.RotationZ: 
                        this.fromValue = this.transform.localEulerAngles.z;
                        break;
                    case UIAnimation.Type.ScaleX: 
                        this.fromValue = this.transform.localScale.x;
                        break;
                    case UIAnimation.Type.ScaleY: 
                        this.fromValue = this.transform.localScale.y;
                        break;
                    case UIAnimation.Type.Width: 
                        this.fromValue = this.rectT.sizeDelta.x;
                        break;
                    case UIAnimation.Type.Height: 
                        this.fromValue = this.rectT.sizeDelta.y;
                        break;
                    case UIAnimation.Type.Alpha: 
                        this.fromValue = this.canvasGroup.alpha;
                        break;
                    case UIAnimation.Type.Color: 
                        this.fromColor = this.graphic.color.$clone();
                        break;
                }
            },
            /*UIAnimation.SetFromValue end.*/

            /*UIAnimation.Check start.*/
            Check: function () {
if ( TRACE ) { TRACE( "UIAnimation#Check", this ); }

                switch (this.type) {
                    case UIAnimation.Type.PositionX: 
                    case UIAnimation.Type.PositionY: 
                    case UIAnimation.Type.Width: 
                    case UIAnimation.Type.Height: 
                        if (UnityEngine.Component.op_Equality(this.rectT, null)) {
                            UnityEngine.Debug.LogErrorFormat("[UIAnimation] Cannot play {0} animation on GameObject {1}: There is no RectTransform component.", [Bridge.box(this.type, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type)), this.gameObject.name]);
                            return false;
                        }
                        break;
                    case UIAnimation.Type.Color: 
                        if (UnityEngine.MonoBehaviour.op_Equality(this.graphic, null)) {
                            UnityEngine.Debug.LogErrorFormat("[UIAnimation] Cannot play {0} animation on GameObject {1}: There is no Graphic component.", [Bridge.box(this.type, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type)), this.gameObject.name]);
                            return false;
                        }
                        break;
                    case UIAnimation.Type.Alpha: 
                        if (UnityEngine.MonoBehaviour.op_Equality(this.canvasGroup, null)) {
                            UnityEngine.Debug.LogErrorFormat("[UIAnimation] Cannot play {0} animation on GameObject {1}: There is no CanvasGroup component.", [Bridge.box(this.type, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type)), this.gameObject.name]);
                            return false;
                        }
                        break;
                }

                return true;
            },
            /*UIAnimation.Check end.*/

            /*UIAnimation.PlayAnimationAfterDelay start.*/
            PlayAnimationAfterDelay: function (delay) {
if ( TRACE ) { TRACE( "UIAnimation#PlayAnimationAfterDelay", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(delay);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    this.PlayAnimation();

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*UIAnimation.PlayAnimationAfterDelay end.*/

            /*UIAnimation.PlayAnimation start.*/
            PlayAnimation: function () {
if ( TRACE ) { TRACE( "UIAnimation#PlayAnimation", this ); }

                // Set as playing
                this.isPlaying = true;
                this.elapsedTime = 0;
            },
            /*UIAnimation.PlayAnimation end.*/

            /*UIAnimation.UpdateAnimation start.*/
            UpdateAnimation: function (time) {
if ( TRACE ) { TRACE( "UIAnimation#UpdateAnimation", this ); }

                var t = this.GetLerpT(time);
                var val = this.GetValue(t);

                this.SetValue(val);
            },
            /*UIAnimation.UpdateAnimation end.*/

            /*UIAnimation.GetLerpT start.*/
            GetLerpT: function (time) {
if ( TRACE ) { TRACE( "UIAnimation#GetLerpT", this ); }

                var timeValue = (time > this.duration) ? this.duration : time;

                var t = (this.duration === 0) ? 1 : timeValue / this.duration;

                switch (this.style) {
                    case UIAnimation.Style.EaseIn: 
                        t = Utilities.EaseIn(t);
                        break;
                    case UIAnimation.Style.EaseOut: 
                        t = Utilities.EaseOut(t);
                        break;
                    case UIAnimation.Style.Custom: 
                        t = this.animationCurve.value(t);
                        break;
                }

                return t;
            },
            /*UIAnimation.GetLerpT end.*/

            /*UIAnimation.GetValue start.*/
            GetValue: function (t) {
if ( TRACE ) { TRACE( "UIAnimation#GetValue", this ); }

                switch (this.type) {
                    case UIAnimation.Type.PositionX: 
                    case UIAnimation.Type.PositionY: 
                    case UIAnimation.Type.ScaleX: 
                    case UIAnimation.Type.ScaleY: 
                    case UIAnimation.Type.RotationZ: 
                    case UIAnimation.Type.Width: 
                    case UIAnimation.Type.Height: 
                    case UIAnimation.Type.Alpha: 
                        return Bridge.box(UnityEngine.Mathf.LerpUnclamped(this.fromValue, this.toValue, t), System.Single, System.Single.format, System.Single.getHashCode);
                    case UIAnimation.Type.Color: 
                        return pc.Color.lerp( this.fromColor, this.toColor, t ).$clone();
                }

                return null;
            },
            /*UIAnimation.GetValue end.*/

            /*UIAnimation.SetValue start.*/
            SetValue: function (val) {
if ( TRACE ) { TRACE( "UIAnimation#SetValue", this ); }

                switch (this.type) {
                    case UIAnimation.Type.PositionX: 
                        this.rectT.anchoredPosition = new pc.Vec2( System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)), this.rectT.anchoredPosition.y );
                        break;
                    case UIAnimation.Type.PositionY: 
                        this.rectT.anchoredPosition = new pc.Vec2( this.rectT.anchoredPosition.x, System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)) );
                        break;
                    case UIAnimation.Type.RotationZ: 
                        this.transform.localEulerAngles = new pc.Vec3( this.transform.localEulerAngles.x, this.transform.localEulerAngles.y, System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)) );
                        break;
                    case UIAnimation.Type.ScaleX: 
                        this.transform.localScale = new pc.Vec3( System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)), this.transform.localScale.y, this.transform.localScale.z );
                        break;
                    case UIAnimation.Type.ScaleY: 
                        this.transform.localScale = new pc.Vec3( this.transform.localScale.x, System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)), this.transform.localScale.z );
                        break;
                    case UIAnimation.Type.Width: 
                        this.rectT.sizeDelta = new pc.Vec2( System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)), this.rectT.sizeDelta.y );
                        break;
                    case UIAnimation.Type.Height: 
                        this.rectT.sizeDelta = new pc.Vec2( this.rectT.sizeDelta.x, System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single)) );
                        break;
                    case UIAnimation.Type.Alpha: 
                        if (UnityEngine.MonoBehaviour.op_Equality(this.canvasGroup, null)) {
                            UnityEngine.Debug.LogError$2("Canvas Group Null: " + (this.gameObject.name || ""));
                        }
                        this.canvasGroup.alpha = System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, System.Single), System.Single));
                        break;
                    case UIAnimation.Type.Color: 
                        this.graphic.color = System.Nullable.getValue(Bridge.cast(Bridge.unbox(val, UnityEngine.Color), UnityEngine.Color));
                        break;
                }
            },
            /*UIAnimation.SetValue end.*/

            /*UIAnimation.DestroyAnimation start.*/
            DestroyAnimation: function () {
if ( TRACE ) { TRACE( "UIAnimation#DestroyAnimation", this ); }

                this.isDestroyed = true;

                UnityEngine.Object.Destroy(this);

                if (this.canvasGroupAdded) {
                    UnityEngine.Object.Destroy(this.canvasGroup);
                }
            },
            /*UIAnimation.DestroyAnimation end.*/


        }
    });
    /*UIAnimation end.*/

    /*UIAnimation+LoopType start.*/
    Bridge.define("UIAnimation.LoopType", {
        $kind: 1006,
        statics: {
            fields: {
                None: 0,
                Repeat: 1,
                Reverse: 2
            }
        }
    });
    /*UIAnimation+LoopType end.*/

    /*UIAnimation+Style start.*/
    Bridge.define("UIAnimation.Style", {
        $kind: 1006,
        statics: {
            fields: {
                Linear: 0,
                EaseIn: 1,
                EaseOut: 2,
                Custom: 3
            }
        }
    });
    /*UIAnimation+Style end.*/

    /*UIAnimation+Type start.*/
    Bridge.define("UIAnimation.Type", {
        $kind: 1006,
        statics: {
            fields: {
                PositionX: 0,
                PositionY: 1,
                ScaleX: 2,
                ScaleY: 3,
                RotationZ: 4,
                Width: 5,
                Height: 6,
                Color: 7,
                Alpha: 8
            }
        }
    });
    /*UIAnimation+Type end.*/

    /*Utilities start.*/
    Bridge.define("Utilities", {
        statics: {
            props: {
                SystemTimeInMilliseconds: {
                    get: function () {
if ( TRACE ) { TRACE( "Utilities#SystemTimeInMilliseconds#get", this ); }

                        return (System.DateTime.subdd(System.DateTime.getUtcNow(), System.DateTime.create(1970, 1, 1))).getTotalMilliseconds();
                    }
                },
                WorldWidth: {
                    get: function () {
if ( TRACE ) { TRACE( "Utilities#WorldWidth#get", this ); }

                        return 2.0 * UnityEngine.Camera.main.orthographicSize * UnityEngine.Camera.main.aspect;
                    }
                },
                WorldHeight: {
                    get: function () {
if ( TRACE ) { TRACE( "Utilities#WorldHeight#get", this ); }

                        return 2.0 * UnityEngine.Camera.main.orthographicSize;
                    }
                },
                XScale: {
                    get: function () {
if ( TRACE ) { TRACE( "Utilities#XScale#get", this ); }

                        return UnityEngine.Screen.width / 1080.0;
                    }
                },
                YScale: {
                    get: function () {
if ( TRACE ) { TRACE( "Utilities#YScale#get", this ); }

                        return UnityEngine.Screen.height / 1920.0;
                    }
                }
            },
            methods: {
                /*Utilities.Map:static start.*/
                Map: function (TIn, TOut, list, func) {
if ( TRACE ) { TRACE( "Utilities#Map", this ); }

                    var newList = new (System.Collections.Generic.List$1(TOut)).$ctor2(list.Count);

                    for (var i = 0; i < list.Count; i = (i + 1) | 0) {
                        newList.add(Bridge.rValue(func(Bridge.rValue(list.getItem(i)))));
                    }

                    return newList;
                },
                /*Utilities.Map:static end.*/

                /*Utilities.Filter:static start.*/
                Filter: function (T, list, func) {
if ( TRACE ) { TRACE( "Utilities#Filter", this ); }

                    for (var i = (list.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        if (func(Bridge.rValue(list.getItem(i)))) {
                            list.removeAt(i);
                        }
                    }
                },
                /*Utilities.Filter:static end.*/

                /*Utilities.SwapValue:static start.*/
                SwapValue: function (T, value1, value2) {
if ( TRACE ) { TRACE( "Utilities#SwapValue", this ); }

                    var temp = Bridge.rValue(value1.v);
                    value1.v = Bridge.rValue(value2.v);
                    value2.v = Bridge.rValue(temp);
                },
                /*Utilities.SwapValue:static end.*/

                /*Utilities.EaseOut:static start.*/
                EaseOut: function (t) {
if ( TRACE ) { TRACE( "Utilities#EaseOut", this ); }

                    return 1.0 - (1.0 - t) * (1.0 - t) * (1.0 - t);
                },
                /*Utilities.EaseOut:static end.*/

                /*Utilities.EaseIn:static start.*/
                EaseIn: function (t) {
if ( TRACE ) { TRACE( "Utilities#EaseIn", this ); }

                    return t * t * t;
                },
                /*Utilities.EaseIn:static end.*/

                /*Utilities.MousePosition:static start.*/
                /**
                 * Returns to mouse position
                 *
                 * @static
                 * @public
                 * @this Utilities
                 * @memberof Utilities
                 * @return  {UnityEngine.Vector2}
                 */
                MousePosition: function () {
if ( TRACE ) { TRACE( "Utilities#MousePosition", this ); }

                    var $t;
                    if (UnityEngine.Input.touchCount > 0) {
                        return ($t = UnityEngine.Input.touches)[0].position.$clone();
                    }

                    return pc.Vec2.ZERO.clone();
                },
                /*Utilities.MousePosition:static end.*/

                /*Utilities.MouseDown:static start.*/
                /**
                 * Returns true if a mouse down event happened, false otherwise
                 *
                 * @static
                 * @public
                 * @this Utilities
                 * @memberof Utilities
                 * @return  {boolean}
                 */
                MouseDown: function () {
if ( TRACE ) { TRACE( "Utilities#MouseDown", this ); }

                    var $t;
                    return UnityEngine.Input.GetMouseButtonDown(0) || (UnityEngine.Input.touchCount > 0 && ($t = UnityEngine.Input.touches)[0].phase === UnityEngine.TouchPhase.Began);
                },
                /*Utilities.MouseDown:static end.*/

                /*Utilities.MouseUp:static start.*/
                /**
                 * Returns true if a mouse up event happened, false otherwise
                 *
                 * @static
                 * @public
                 * @this Utilities
                 * @memberof Utilities
                 * @return  {boolean}
                 */
                MouseUp: function () {
if ( TRACE ) { TRACE( "Utilities#MouseUp", this ); }

                    var $t;
                    return (UnityEngine.Input.GetMouseButtonUp(0) || (UnityEngine.Input.touchCount > 0 && ($t = UnityEngine.Input.touches)[0].phase === UnityEngine.TouchPhase.Ended));
                },
                /*Utilities.MouseUp:static end.*/

                /*Utilities.MouseNone:static start.*/
                /**
                 * Returns true if no mouse events are happening, false otherwise
                 *
                 * @static
                 * @public
                 * @this Utilities
                 * @memberof Utilities
                 * @return  {boolean}
                 */
                MouseNone: function () {
if ( TRACE ) { TRACE( "Utilities#MouseNone", this ); }

                    return (!UnityEngine.Input.GetMouseButton(0) && UnityEngine.Input.touchCount === 0);
                },
                /*Utilities.MouseNone:static end.*/

                /*Utilities.CharToLower:static start.*/
                CharToLower: function (c) {
if ( TRACE ) { TRACE( "Utilities#CharToLower", this ); }

                    return (c >= 65 && c <= 90) ? ((((c + (32)) | 0)) & 65535) : c;
                },
                /*Utilities.CharToLower:static end.*/

                /*Utilities.GCD:static start.*/
                GCD: function (a, b) {
if ( TRACE ) { TRACE( "Utilities#GCD", this ); }

                    var start = UnityEngine.Mathf.Min(a, b);

                    for (var i = start; i > 1; i = (i - 1) | 0) {
                        if (a % i === 0 && b % i === 0) {
                            return i;
                        }
                    }

                    return 1;
                },
                /*Utilities.GCD:static end.*/

                /*Utilities.GetCanvas:static start.*/
                GetCanvas: function (transform) {
if ( TRACE ) { TRACE( "Utilities#GetCanvas", this ); }

                    if (UnityEngine.Component.op_Equality(transform, null)) {
                        return null;
                    }

                    var canvas = transform.GetComponent(UnityEngine.Canvas);

                    if (UnityEngine.Component.op_Inequality(canvas, null)) {
                        return canvas;
                    }

                    return Utilities.GetCanvas(transform.parent);
                },
                /*Utilities.GetCanvas:static end.*/

                /*Utilities.CallExternalAndroid$1:static start.*/
                CallExternalAndroid$1: function (methodname, args) {
if ( TRACE ) { TRACE( "Utilities#CallExternalAndroid$1", this ); }

                    if (args === void 0) { args = []; }
                },
                /*Utilities.CallExternalAndroid$1:static end.*/

                /*Utilities.CallExternalAndroid:static start.*/
                CallExternalAndroid: function (T, methodname, args) {
if ( TRACE ) { TRACE( "Utilities#CallExternalAndroid", this ); }

                    if (args === void 0) { args = []; }
                    return Bridge.getDefaultValue(T);
                },
                /*Utilities.CallExternalAndroid:static end.*/

                /*Utilities.ConvertToJsonString:static start.*/
                ConvertToJsonString: function (data, addQuoteEscapes) {
if ( TRACE ) { TRACE( "Utilities#ConvertToJsonString", this ); }

                    if (addQuoteEscapes === void 0) { addQuoteEscapes = false; }
                    var jsonString = "";

                    if (Bridge.is(data, System.Collections.IDictionary)) {
                        var dic = Bridge.as(data, System.Collections.Generic.Dictionary$2(System.String,System.Object));

                        jsonString = (jsonString || "") + "{";

                        var keys = new (System.Collections.Generic.List$1(System.String)).$ctor1(dic.Keys);

                        for (var i = 0; i < keys.Count; i = (i + 1) | 0) {
                            if (i !== 0) {
                                jsonString = (jsonString || "") + ",";
                            }

                            if (addQuoteEscapes) {
                                jsonString = (jsonString || "") + ((System.String.format("\\\"{0}\\\":{1}", keys.getItem(i), Utilities.ConvertToJsonString(dic.getItem(keys.getItem(i)), addQuoteEscapes))) || "");
                            } else {
                                jsonString = (jsonString || "") + ((System.String.format("\"{0}\":{1}", keys.getItem(i), Utilities.ConvertToJsonString(dic.getItem(keys.getItem(i)), addQuoteEscapes))) || "");
                            }
                        }

                        jsonString = (jsonString || "") + "}";
                    } else if (Bridge.is(data, System.Collections.IList)) {
                        var list = Bridge.as(data, System.Collections.IList);

                        jsonString = (jsonString || "") + "[";

                        for (var i1 = 0; i1 < System.Array.getCount(list); i1 = (i1 + 1) | 0) {
                            if (i1 !== 0) {
                                jsonString = (jsonString || "") + ",";
                            }

                            jsonString = (jsonString || "") + ((Utilities.ConvertToJsonString(System.Array.getItem(list, i1), addQuoteEscapes)) || "");
                        }

                        jsonString = (jsonString || "") + "]";
                    } else if (Bridge.is(data, System.String)) {
                        // If the data is a string then we need to inclose it in quotation marks
                        if (addQuoteEscapes) {
                            jsonString = (jsonString || "") + ((System.String.concat("\\\"", data) + "\\\"") || "");
                        } else {
                            jsonString = (jsonString || "") + ((System.String.concat("\"", data) + "\"") || "");
                        }
                    } else if (Bridge.is(data, System.Boolean)) {
                        jsonString = (jsonString || "") + ((System.Nullable.getValue(Bridge.cast(Bridge.unbox(data, System.Boolean), System.Boolean)) ? "true" : "false") || "");
                    } else {
                        // Else just return what ever data is as a string
                        jsonString = (jsonString || "") + ((Bridge.toString(data)) || "");
                    }

                    return jsonString;
                },
                /*Utilities.ConvertToJsonString:static end.*/

                /*Utilities.SetLayer:static start.*/
                SetLayer: function (gameObject, layer, applyToChildren) {
if ( TRACE ) { TRACE( "Utilities#SetLayer", this ); }

                    if (applyToChildren === void 0) { applyToChildren = false; }
                    gameObject.layer = layer;

                    if (applyToChildren) {
                        for (var i = 0; i < gameObject.transform.childCount; i = (i + 1) | 0) {
                            Utilities.SetLayer(gameObject.transform.GetChild(i).gameObject, layer, true);
                        }
                    }
                },
                /*Utilities.SetLayer:static end.*/

                /*Utilities.ParseCSVFile:static start.*/
                ParseCSVFile: function (fileContents, delimiter) {
if ( TRACE ) { TRACE( "Utilities#ParseCSVFile", this ); }

                    var csvText = new (System.Collections.Generic.List$1(System.Array.type(System.String))).ctor();
                    var lines = System.String.split(fileContents, [10].map(function (i) {{ return String.fromCharCode(i); }}));

                    for (var i = 0; i < lines.length; i = (i + 1) | 0) {
                        csvText.add(System.String.split(lines[i], [delimiter].map(function (i) {{ return String.fromCharCode(i); }})));
                    }

                    return csvText;
                },
                /*Utilities.ParseCSVFile:static end.*/

                /*Utilities.DestroyAllChildren:static start.*/
                DestroyAllChildren: function (parent) {
if ( TRACE ) { TRACE( "Utilities#DestroyAllChildren", this ); }

                    for (var i = (parent.childCount - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        UnityEngine.Object.Destroy(parent.GetChild(i).gameObject);
                    }
                },
                /*Utilities.DestroyAllChildren:static end.*/

                /*Utilities.FindFile:static start.*/
                FindFile: function (fileName, directory) {
if ( TRACE ) { TRACE( "Utilities#FindFile", this ); }

                    var files = new (System.Collections.Generic.List$1(System.String)).$ctor1(System.IO.Directory.GetFiles(directory));
                    var directories = System.IO.Directory.GetDirectories(directory);

                    for (var i = 0; i < files.Count; i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(fileName, System.IO.Path.GetFileNameWithoutExtension(files.getItem(i)))) {
                            return files.getItem(i);
                        }
                    }

                    for (var i1 = 0; i1 < directories.length; i1 = (i1 + 1) | 0) {
                        var path = Utilities.FindFile(fileName, directories[i1]);

                        if (!System.String.isNullOrEmpty(path)) {
                            return path;
                        }
                    }

                    return null;
                },
                /*Utilities.FindFile:static end.*/

                /*Utilities.CalculateMD5Hash:static start.*/
                CalculateMD5Hash: function (input) {
if ( TRACE ) { TRACE( "Utilities#CalculateMD5Hash", this ); }

                    var md5 = System.Security.Cryptography.MD5.Create();
                    var inputBytes = System.Text.Encoding.ASCII.GetBytes$2(input);
                    var hash = md5.ComputeHash(inputBytes);
                    var sb = new System.Text.StringBuilder();

                    for (var i = 0; i < hash.length; i = (i + 1) | 0) {
                        sb.append(System.Byte.format(hash[i], "x2"));
                    }

                    return sb.toString();
                },
                /*Utilities.CalculateMD5Hash:static end.*/

                /*Utilities.CompareLists:static start.*/
                CompareLists: function (T, list1, list2) {
if ( TRACE ) { TRACE( "Utilities#CompareLists", this ); }

                    if (list1.Count !== list2.Count) {
                        return false;
                    }

                    for (var i = (list1.Count - 1) | 0; i >= 0; i = (i - 1) | 0) {
                        var found = false;

                        for (var j = 0; j < list2.Count; j = (j + 1) | 0) {
                            if (Bridge.equals(Bridge.rValue(list1.getItem(i)), list2.getItem(j))) {
                                found = true;
                                list1.removeAt(i);
                                list2.removeAt(j);
                                break;
                            }
                        }

                        if (!found) {
                            return false;
                        }
                    }

                    return true;
                },
                /*Utilities.CompareLists:static end.*/

                /*Utilities.PrintList:static start.*/
                PrintList: function (T, list) {
if ( TRACE ) { TRACE( "Utilities#PrintList", this ); }

                    var str = "";

                    for (var i = 0; i < list.Count; i = (i + 1) | 0) {
                        if (i !== 0) {
                            str = (str || "") + ", ";
                        }

                        str = (str || "") + ((Bridge.toString(Bridge.rValue(list.getItem(i)))) || "");
                    }

                    //Debug.Log(str);
                },
                /*Utilities.PrintList:static end.*/

                /*Utilities.Rotate:static start.*/
                Rotate: function (v, degrees) {
if ( TRACE ) { TRACE( "Utilities#Rotate", this ); }

                    var sin = Math.sin(degrees * UnityEngine.Mathf.Deg2Rad);
                    var cos = Math.cos(degrees * UnityEngine.Mathf.Deg2Rad);

                    var tx = v.x;
                    var ty = v.y;

                    v.x = (cos * tx) - (sin * ty);
                    v.y = (sin * tx) + (cos * ty);

                    return v.$clone();
                },
                /*Utilities.Rotate:static end.*/

                /*Utilities.CreateTexture:static start.*/
                /**
                 * Creates a new texture with the given width, height, and base color
                 *
                 * @static
                 * @public
                 * @this Utilities
                 * @memberof Utilities
                 * @param   {number}                   width     
                 * @param   {number}                   height    
                 * @param   {UnityEngine.Color}        color
                 * @return  {UnityEngine.Texture2D}
                 */
                CreateTexture: function (width, height, color) {
if ( TRACE ) { TRACE( "Utilities#CreateTexture", this ); }

                    var texture = new UnityEngine.Texture2D.$ctor2(width, height, UnityEngine.TextureFormat.ARGB32, false);

                    texture.filterMode = UnityEngine.FilterMode.Point;

                    for (var x = 0; x < width; x = (x + 1) | 0) {
                        for (var y = 0; y < height; y = (y + 1) | 0) {
                            texture.SetPixel(x, y, color);
                        }
                    }

                    texture.Apply();

                    return texture;
                },
                /*Utilities.CreateTexture:static end.*/

                /*Utilities.GetFilesRecursively:static start.*/
                GetFilesRecursively: function (path, searchPatter) {
if ( TRACE ) { TRACE( "Utilities#GetFilesRecursively", this ); }

                    var files = new (System.Collections.Generic.List$1(System.String)).ctor();

                    if (!System.IO.Directory.Exists(path)) {
                        return files;
                    }

                    var directories = function (_o1) {
                            _o1.add(path);
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());

                    while (directories.Count > 0) {
                        var directory = directories.getItem(0);

                        directories.removeAt(0);

                        files.AddRange(System.IO.Directory.GetFiles$1(directory, searchPatter));
                        directories.AddRange(System.IO.Directory.GetDirectories(directory));
                    }

                    return files;
                },
                /*Utilities.GetFilesRecursively:static end.*/

                /*Utilities.SwitchToRectTransform:static start.*/
                SwitchToRectTransform: function (from, to) {
if ( TRACE ) { TRACE( "Utilities#SwitchToRectTransform", this ); }

                    var localPoint = { v : new UnityEngine.Vector2() };
                    var fromPivotDerivedOffset = new pc.Vec2( from.rect.width * from.pivot.x + from.rect.xMin, from.rect.height * from.pivot.y + from.rect.yMin );
                    var screenP = UnityEngine.RectTransformUtility.WorldToScreenPoint(null, from.position);

                    screenP = screenP.$clone().add( fromPivotDerivedOffset.$clone() );

                    UnityEngine.RectTransformUtility.ScreenPointToLocalPointInRectangle(to, screenP, null, localPoint);

                    var pivotDerivedOffset = new pc.Vec2( to.rect.width * to.pivot.x + to.rect.xMin, to.rect.height * to.pivot.y + to.rect.yMin );

                    return localPoint.v.$clone().sub( pivotDerivedOffset );
                },
                /*Utilities.SwitchToRectTransform:static end.*/

                /*Utilities.GetCanvasCamera:static start.*/
                GetCanvasCamera: function (canvasChild) {
if ( TRACE ) { TRACE( "Utilities#GetCanvasCamera", this ); }

                    var canvas = Utilities.GetCanvas(canvasChild);

                    if (UnityEngine.Component.op_Inequality(canvas, null) && canvas.renderMode !== UnityEngine.RenderMode.ScreenSpaceOverlay) {
                        return canvas.worldCamera;
                    }

                    return null;
                },
                /*Utilities.GetCanvasCamera:static end.*/

                /*Utilities.SetAlpha:static start.*/
                SetAlpha: function (graphic, alpha) {
if ( TRACE ) { TRACE( "Utilities#SetAlpha", this ); }

                    var color = graphic.color.$clone();

                    color.a = alpha;

                    graphic.color = color.$clone();
                },
                /*Utilities.SetAlpha:static end.*/


            }
        }
    });
    /*Utilities end.*/

    /*AdjustRectTransformForSafeArea start.*/
    Bridge.define("AdjustRectTransformForSafeArea", {
        inherits: [MonoHandler],
        statics: {
            methods: {
                /*AdjustRectTransformForSafeArea.GetMainGameViewSize:static start.*/
                GetMainGameViewSize: function () {
if ( TRACE ) { TRACE( "AdjustRectTransformForSafeArea#GetMainGameViewSize", this ); }

                    var T = Bridge.Reflection.getType("UnityEditor.GameView,UnityEditor");
                    var GetSizeOfMainGameView = Bridge.Reflection.getMembers(T, 8, 40 | 256, "GetSizeOfMainGameView");
                    var Res = Bridge.Reflection.midel(GetSizeOfMainGameView, null, null)(null);
                    return System.Nullable.getValue(Bridge.cast(Bridge.unbox(Res, UnityEngine.Vector2), UnityEngine.Vector2));
                },
                /*AdjustRectTransformForSafeArea.GetMainGameViewSize:static end.*/


            }
        },
        fields: {
            rectT: null,
            widthScreenSafe: 0,
            heightScreenSafe: 0,
            adjustForBannerAd: false,
            bannerHeightMobile: 0,
            bannerHeightLarge2: 0,
            bannerHeightTable: 0,
            ratio: 0,
            widthTestSafe: 0,
            heightTestSafe: 0,
            originOffSetMax: null,
            originOffSetMin: null,
            addWidthScreenNormal: 0,
            addHeightScreenNormal: 0,
            addWidthScreenRatioLarge2: 0,
            addHeightcreenRatioLarge2: 0,
            addOffSetMaxLarge2: null,
            addOffSetMinLarge2: null,
            addWidthScreenRatioEqual2: 0,
            addHeightcreenRatioEqual2: 0,
            addOffSetMaxEqual2: null,
            addOffSetMinEqual2: null,
            addWidthScreenRatioTablet: 0,
            addHeightcreenRatioTablet: 0,
            addOffSetMaxTablet: null,
            addOffSetMinTablet: null,
            widthSafe: 0,
            heightSafe: 0,
            resolution: 0,
            bannerHeight: 0,
            ratioTablet: 0,
            offSetMax: null,
            offSetMin: null,
            originWidthRatioLarge2: 0,
            originHeightRatioLarge2: 0,
            cutouts: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "AdjustRectTransformForSafeArea#init", this ); }

                this.originOffSetMax = new UnityEngine.Vector2();
                this.originOffSetMin = new UnityEngine.Vector2();
                this.addOffSetMaxLarge2 = new UnityEngine.Vector2();
                this.addOffSetMinLarge2 = new UnityEngine.Vector2();
                this.addOffSetMaxEqual2 = new UnityEngine.Vector2();
                this.addOffSetMinEqual2 = new UnityEngine.Vector2();
                this.addOffSetMaxTablet = new UnityEngine.Vector2();
                this.addOffSetMinTablet = new UnityEngine.Vector2();
                this.offSetMax = new UnityEngine.Vector2();
                this.offSetMin = new UnityEngine.Vector2();
                this.bannerHeightMobile = 100;
                this.bannerHeightLarge2 = 100;
                this.bannerHeightTable = 100;
                this.ratio = 2;
                this.addWidthScreenNormal = 0;
                this.addHeightScreenNormal = 0;
                this.addWidthScreenRatioLarge2 = 0;
                this.addHeightcreenRatioLarge2 = 0;
                this.addWidthScreenRatioEqual2 = 0;
                this.addHeightcreenRatioEqual2 = 0;
                this.addWidthScreenRatioTablet = 0;
                this.addHeightcreenRatioTablet = 0;
                this.resolution = -1;
                this.bannerHeight = 0;
                this.ratioTablet = 1.5;
            }
        },
        methods: {
            /*AdjustRectTransformForSafeArea.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "AdjustRectTransformForSafeArea#Start", this ); }


                this.rectT = this.GetComponent(UnityEngine.RectTransform);
            },
            /*AdjustRectTransformForSafeArea.Start end.*/

            /*AdjustRectTransformForSafeArea.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "AdjustRectTransformForSafeArea#Update", this ); }

                //#if !UNITY_EDITOR
                this.UpdateUI();
                //#else
                //ConvertResolution();
                //#endif

            },
            /*AdjustRectTransformForSafeArea.Update end.*/

            /*AdjustRectTransformForSafeArea.UpdateUI start.*/
            UpdateUI: function () {
if ( TRACE ) { TRACE( "AdjustRectTransformForSafeArea#UpdateUI", this ); }


                var width = UnityEngine.Screen.width;
                var height = UnityEngine.Screen.height;

                if (this.ratio <= 0) {
                    return;
                }

                if (width > height) {
                    this.rectT.offsetMax = new pc.Vec2( -this.widthSafe / this.ratio, this.offSetMax.y );

                    this.rectT.offsetMin = new pc.Vec2( this.heightSafe / this.ratio, this.offSetMin.y + this.bannerHeight );

                } else {
                    this.rectT.offsetMax = new pc.Vec2( this.offSetMax.x, -this.widthSafe / this.ratio );

                    this.rectT.offsetMin = new pc.Vec2( this.offSetMin.x, (this.heightSafe / this.ratio) + this.bannerHeight );

                }
            },
            /*AdjustRectTransformForSafeArea.UpdateUI end.*/


        }
    });
    /*AdjustRectTransformForSafeArea end.*/

    /*BlockBoard start.*/
    Bridge.define("BlockBoard", {
        inherits: [MonoHandler],
        fields: {
            block: null,
            blockHightLight: null,
            emptyBlock: null,
            gemSR: null,
            blocksBoardCross1: null,
            blocksBoardCross2: null,
            blocksDestroy: null,
            BlockObj: null,
            BombItem: null,
            blockIndex: 0,
            color: 0,
            gemColor: 0,
            x: 0,
            y: 0,
            blockEmpty: null
        },
        props: {
            CanPlace: {
                get: function () {
if ( TRACE ) { TRACE( "BlockBoard#CanPlace#get", this ); }

                    return !this.block.gameObject.activeInHierarchy;
                }
            },
            HighLight: {
                get: function () {
if ( TRACE ) { TRACE( "BlockBoard#HighLight#get", this ); }

                    return this.blockHightLight.gameObject.activeInHierarchy;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BlockBoard#init", this ); }

                this.blocksBoardCross1 = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.blocksBoardCross2 = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.blocksDestroy = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.blockIndex = 0;
                this.gemColor = BlockGemColor.Empty;
            }
        },
        methods: {
            /*BlockBoard.SetBlockImage start.*/
            SetBlockImage: function (image) {
if ( TRACE ) { TRACE( "BlockBoard#SetBlockImage", this ); }

                this.block.sprite = image;
            },
            /*BlockBoard.SetBlockImage end.*/

            /*BlockBoard.SetBlockGem start.*/
            SetBlockGem: function (gemCol) {
if ( TRACE ) { TRACE( "BlockBoard#SetBlockGem", this ); }

                this.gemColor = gemCol;

                if (gemCol !== BlockGemColor.Empty) {
                    this.gemSR.gameObject.SetActive(true);
                    this.gemColor = gemCol;
                    this.gemSR.sprite = ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetGemSpriteByColor(gemCol);
                } else {
                    this.gemSR.gameObject.SetActive(false);
                }

            },
            /*BlockBoard.SetBlockGem end.*/

            /*BlockBoard.SetLayer start.*/
            SetLayer: function (tutorial) {
if ( TRACE ) { TRACE( "BlockBoard#SetLayer", this ); }

                var addLayer = 5;
                var blockLayer = this.block.sortingOrder * ((tutorial) ? 2 : (0.5));
                //  Debug.Log(block.sortingOrder+"__" + blockLayer+"__"+ addLayer+"__"+ ((tutorial) ? addLayer : (1f / addLayer)));
                if (blockLayer < 5) {
                    blockLayer = 5;
                }
                this.block.sortingOrder = Math.floor(blockLayer);


                if (UnityEngine.Component.op_Equality(this.blockEmpty, null)) {
                    this.blockEmpty = this.GetComponent(UnityEngine.SpriteRenderer);
                }

                var blockEmptyLayer = this.blockEmpty.sortingOrder * ((tutorial) ? addLayer : (1.0 / addLayer));
                if (blockEmptyLayer < 4) {
                    blockEmptyLayer = 4;
                }
                this.blockEmpty.sortingOrder = Math.floor(blockEmptyLayer);

            },
            /*BlockBoard.SetLayer end.*/

            /*BlockBoard.ToggleActiveBlockGFX start.*/
            ToggleActiveBlockGFX: function (on) {
if ( TRACE ) { TRACE( "BlockBoard#ToggleActiveBlockGFX", this ); }

                var col = on ? new pc.Color( 1, 1, 1, 1 ) : new pc.Color( 0.5, 0.5, 0.5, 1 );

                //emptyBlock.color = col;
                this.block.color = col.$clone();
                this.gemSR.color = col.$clone();
            },
            /*BlockBoard.ToggleActiveBlockGFX end.*/

            /*BlockBoard.ShowPlaceBlock start.*/
            ShowPlaceBlock: function (place) {
if ( TRACE ) { TRACE( "BlockBoard#ShowPlaceBlock", this ); }


                if (place) {
                    this.block.color = new pc.Color( 1, 1, 1, 1 );
                } else {
                    var color = this.block.color.$clone();
                    color.a = 0.5;
                    this.block.color = color.$clone();
                }
            },
            /*BlockBoard.ShowPlaceBlock end.*/

            /*BlockBoard.DestroyAnimation start.*/
            DestroyAnimation: function (destroy) {
if ( TRACE ) { TRACE( "BlockBoard#DestroyAnimation", this ); }


                if (UnityEngine.MonoBehaviour.op_Inequality(this.BombItem, null)) {
                    this.BombItem.DestroyBomb(destroy);
                    this.BombItem = null;
                }


                this.VisibleBlock(false);

            },
            /*BlockBoard.DestroyAnimation end.*/

            /*BlockBoard.VisibleBlock start.*/
            VisibleBlock: function (visible) {
if ( TRACE ) { TRACE( "BlockBoard#VisibleBlock", this ); }


                // #if UNITY_EDITOR
                //
                //         if (!visible)
                //             Debug.Log("[BlockBoard][VisibleBlock] " + gameObject.name + "__" + visible);
                //
                // #endif
                this.block.gameObject.SetActive(visible);
                if (!visible) {
                    this.VisibleHightLight(false);
                }
            },
            /*BlockBoard.VisibleBlock end.*/

            /*BlockBoard.VisibleHightLight start.*/
            VisibleHightLight: function (visible) {
if ( TRACE ) { TRACE( "BlockBoard#VisibleHightLight", this ); }

                if (visible) {
                    if (UnityEngine.MonoBehaviour.op_Inequality(this.BlockObj, null)) {

                        this.BlockObj.VisibleBlockDestroyLine(visible);
                        if (!visible) {
                            this.BlockObj = null;
                        }
                    }
                }


                this.blockHightLight.gameObject.SetActive(visible);
            },
            /*BlockBoard.VisibleHightLight end.*/

            /*BlockBoard.MultiplySortingOrder start.*/
            MultiplySortingOrder: function (amount) {
if ( TRACE ) { TRACE( "BlockBoard#MultiplySortingOrder", this ); }

                this.block.sortingOrder = Bridge.Int.clip32(this.block.sortingOrder * amount);
                this.gemSR.sortingOrder = Bridge.Int.clip32(this.gemSR.sortingOrder * amount);
            },
            /*BlockBoard.MultiplySortingOrder end.*/

            /*BlockBoard.ShowBlocksCrossCanDestroy start.*/
            ShowBlocksCrossCanDestroy: function (blocksDestroy) {
if ( TRACE ) { TRACE( "BlockBoard#ShowBlocksCrossCanDestroy", this ); }


                var fullBlock1 = this.FullBlockCross1();
                var fullBlock2 = this.FullBlockCross2();
                for (var i = 0; i < this.blocksBoardCross1.Count; i = (i + 1) | 0) {

                    if (blocksDestroy.contains(this.blocksBoardCross1.getItem(i))) {
                        continue;
                    }
                    this.blocksBoardCross1.getItem(i).VisibleHightLight(fullBlock1);
                }

                for (var i1 = 0; i1 < this.blocksBoardCross2.Count; i1 = (i1 + 1) | 0) {

                    if (blocksDestroy.contains(this.blocksBoardCross2.getItem(i1))) {
                        continue;
                    }
                    this.blocksBoardCross2.getItem(i1).VisibleHightLight(fullBlock2);
                }
                return fullBlock1 || fullBlock2;
            },
            /*BlockBoard.ShowBlocksCrossCanDestroy end.*/

            /*BlockBoard.GetBlocksCrossDestroy start.*/
            GetBlocksCrossDestroy: function () {
if ( TRACE ) { TRACE( "BlockBoard#GetBlocksCrossDestroy", this ); }

                this.blocksDestroy.clear();
                var fullBlock1 = this.FullBlockCross1();
                var fullBlock2 = this.FullBlockCross2();

                if (fullBlock1) {
                    this.blocksDestroy.AddRange(this.blocksBoardCross1);
                }

                if (fullBlock2) {
                    this.blocksDestroy.AddRange(this.blocksBoardCross2);
                }

                return this.blocksDestroy;
            },
            /*BlockBoard.GetBlocksCrossDestroy end.*/

            /*BlockBoard.FullBlockCross1 start.*/
            FullBlockCross1: function () {
if ( TRACE ) { TRACE( "BlockBoard#FullBlockCross1", this ); }

                for (var i = 0; i < this.blocksBoardCross1.Count; i = (i + 1) | 0) {
                    if (this.blocksBoardCross1.getItem(i).CanPlace) {
                        return false;
                    }
                }
                return true;
            },
            /*BlockBoard.FullBlockCross1 end.*/

            /*BlockBoard.FullBlockCross2 start.*/
            FullBlockCross2: function () {
if ( TRACE ) { TRACE( "BlockBoard#FullBlockCross2", this ); }

                for (var i = 0; i < this.blocksBoardCross2.Count; i = (i + 1) | 0) {
                    if (this.blocksBoardCross2.getItem(i).CanPlace) {
                        return false;
                    }
                }
                return true;
            },
            /*BlockBoard.FullBlockCross2 end.*/


        }
    });
    /*BlockBoard end.*/

    /*BoardContainer start.*/
    Bridge.define("BoardContainer", {
        inherits: [MonoHandler],
        statics: {
            methods: {
                /*BoardContainer.SortInSpiralOrder:static start.*/
                SortInSpiralOrder: function (blocks) {
if ( TRACE ) { TRACE( "BoardContainer#SortInSpiralOrder", this ); }

                    var $t, $t1;
                    // Find the bounds of the grid
                    var minX = 2147483647, minY = 2147483647;
                    var maxX = -2147483648, maxY = -2147483648;

                    $t = Bridge.getEnumerator(blocks);
                    try {
                        while ($t.moveNext()) {
                            var block = $t.Current;
                            if (block.x < minX) {
                                minX = block.x;
                            }
                            if (block.x > maxX) {
                                maxX = block.x;
                            }
                            if (block.y < minY) {
                                minY = block.y;
                            }
                            if (block.y > maxY) {
                                maxY = block.y;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    // Create a 2D array to place blocks more conveniently
                    var grid = System.Array.create(null, null, BlockBoard, ((((maxX - minX) | 0) + 1) | 0), ((((maxY - minY) | 0) + 1) | 0));
                    $t1 = Bridge.getEnumerator(blocks);
                    try {
                        while ($t1.moveNext()) {
                            var block1 = $t1.Current;
                            grid.set([((block1.x - minX) | 0), ((block1.y - minY) | 0)], block1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    var sortedBlocks = new (System.Collections.Generic.List$1(BlockBoard)).ctor();

                    var startX = 0;
                    var startY = 0;
                    var endX = (maxX - minX) | 0;
                    var endY = (maxY - minY) | 0;

                    while (startX <= endX && startY <= endY) {
                        // Traverse from left to right
                        for (var i = startX; i <= endX; i = (i + 1) | 0) {
                            sortedBlocks.add(grid.get([i, startY]));
                        }
                        startY = (startY + 1) | 0;

                        // Traverse from top to bottom
                        for (var i1 = startY; i1 <= endY; i1 = (i1 + 1) | 0) {
                            sortedBlocks.add(grid.get([endX, i1]));
                        }
                        endX = (endX - 1) | 0;

                        // Traverse from right to left
                        if (startY <= endY) {
                            for (var i2 = endX; i2 >= startX; i2 = (i2 - 1) | 0) {
                                sortedBlocks.add(grid.get([i2, endY]));
                            }
                            endY = (endY - 1) | 0;
                        }

                        // Traverse from bottom to top
                        if (startX <= endX) {
                            for (var i3 = endY; i3 >= startY; i3 = (i3 - 1) | 0) {
                                sortedBlocks.add(grid.get([startX, i3]));
                            }
                            startX = (startX + 1) | 0;
                        }
                    }

                    return sortedBlocks; // Return the sorted spiral order list
                },
                /*BoardContainer.SortInSpiralOrder:static end.*/


            }
        },
        fields: {
            width: 0,
            height: 0,
            blocks: null,
            allBlocksInBoard: null,
            blockScale: 0,
            placeBlockPoint: null,
            blockPrefab: null,
            shake: null,
            gemCounters: null,
            gridSizeSteps: null,
            currentGridSizeIndex: 0,
            AnimateBoardGrow: false,
            blockRiseTime: 0,
            totalBlockAnimationTimes: null,
            currentBlockAnimationTimeIndex: 0,
            blockLandAnimCurve: null,
            resizeInProgress: false,
            cameraController: null,
            border: null,
            borderSizePerUnit: 0,
            borderSizeOffset: 0,
            boardOffsetPerStep: 0,
            duration: 0,
            strength: null,
            vibrato: 0,
            nextBlockWidth: null,
            nextBlockHeight: null
        },
        props: {
            GetWidth: {
                get: function () {
if ( TRACE ) { TRACE( "BoardContainer#GetWidth#get", this ); }

                    return this.width;
                }
            },
            GetHeight: {
                get: function () {
if ( TRACE ) { TRACE( "BoardContainer#GetHeight#get", this ); }

                    return this.height;
                }
            },
            GetBlocks: {
                get: function () {
if ( TRACE ) { TRACE( "BoardContainer#GetBlocks#get", this ); }

                    return this.blocks;
                }
            },
            GetAllBlocks: {
                get: function () {
if ( TRACE ) { TRACE( "BoardContainer#GetAllBlocks#get", this ); }

                    return this.allBlocksInBoard;
                }
            },
            GetBlockScale: {
                get: function () {
if ( TRACE ) { TRACE( "BoardContainer#GetBlockScale#get", this ); }

                    return this.blockScale;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BoardContainer#init", this ); }

                this.strength = new UnityEngine.Vector3();
                this.width = 8;
                this.height = 12;
                this.blocks = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.allBlocksInBoard = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.blockScale = 0;
                this.currentBlockAnimationTimeIndex = 0;
                this.borderSizePerUnit = 1.02;
                this.borderSizeOffset = 0.18;
                this.boardOffsetPerStep = 0.1;
                this.duration = 0.25;
                this.strength = new pc.Vec3( 1, 1, 1 );
                this.vibrato = 10;
            }
        },
        methods: {
            /*BoardContainer.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "BoardContainer#Start", this ); }

                if (this.gridSizeSteps.length > 0) {
                    this.ChangeGridSize(this.gridSizeSteps[0]);
                }
            },
            /*BoardContainer.Start end.*/

            /*BoardContainer.NextGridSize start.*/
            NextGridSize: function () {
if ( TRACE ) { TRACE( "BoardContainer#NextGridSize", this ); }

                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    nextBlockPos, 
                    animDuration, 
                    animScale, 
                    i, 
                    blocksToAnimate, 
                    $t, 
                    block, 
                    newPos, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        if (this.resizeInProgress) {
                                            $tcs.setResult(null);
                                            return;
                                        }

                                        this.currentGridSizeIndex = (this.currentGridSizeIndex + 1) | 0;
                                        if (this.currentGridSizeIndex < this.gridSizeSteps.length) {
                                            $step = 1;
                                            continue;
                                        } 
                                        $step = 10;
                                        continue;
                                    }
                                    case 1: {
                                        if (!this.AnimateBoardGrow) {
                                            $step = 2;
                                            continue;
                                        } else  {
                                            $step = 3;
                                            continue;
                                        }
                                    }
                                    case 2: {
                                        this.ChangeGridSize(this.gridSizeSteps[this.currentGridSizeIndex]);
                                        $step = 9;
                                        continue;
                                    }
                                    case 3: {
                                        this.resizeInProgress = true;
                                        nextBlockPos = this.GetNextBlockPos();
                                        animDuration = this.blockRiseTime * 2.0;
                                        animScale = 1.25;

                                        i = (this.gridSizeSteps[((this.currentGridSizeIndex - 1) | 0)] + 2) | 0;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if ( i <= this.gridSizeSteps[this.currentGridSizeIndex] ) {
                                            $step = 5;
                                            continue;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 5: {
                                        blocksToAnimate = this.GetBlocks;
                                        this.ChangeGridSize(i);
                                        blocksToAnimate = System.Linq.Enumerable.from(this.GetBlocks, BlockBoard).except(blocksToAnimate).toList(BlockBoard);

                                        $t = Bridge.getEnumerator(blocksToAnimate);
                                        try {
                                            while ($t.moveNext()) {
                                                block = $t.Current;
                                                DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOScale(block.transform, animScale, animDuration / 2.0), DG.Tweening.Ease.OutBack), 2, DG.Tweening.LoopType.Yoyo);
                                                newPos = this.GetBlockPosition(block.x, block.y, nextBlockPos);
                                                newPos = new pc.Vec3().mul2( newPos, new pc.Vec3( 1, 1, 1 ).clone().scale( animScale ) );
                                                DG.Tweening.TweenSettingsExtensions.OnComplete(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.TweenSettingsExtensions.SetLoops$1(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOLocalMove(block.transform, newPos.$clone(), animDuration / 2.0), DG.Tweening.Ease.OutBack), 2, DG.Tweening.LoopType.Yoyo), Bridge.fn.bind(this, function () {
                                                    this.CameraShake();
                                                }));
                                                block.MultiplySortingOrder(2);
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }
                                        $task1 = System.Threading.Tasks.Task.delay(Bridge.Int.clip32(1000 * animDuration / 2.0));
                                        $step = 6;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 6: {
                                        $task1.getAwaitedResult();
                                        UnityEngine.MonoBehaviour.print(System.String.format("change to size {0}", [Bridge.box(i, System.Int32)]));
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        i = (i + 2) | 0;
                                        $step = 4;
                                        continue;
                                    }
                                    case 8: {
                                        this.resizeInProgress = false;
                                        $step = 9;
                                        continue;
                                    }

                                    case 10: {
                                        $task2 = System.Threading.Tasks.Task.delay(10);
                                        $step = 11;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 11: {
                                        $task2.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            /*BoardContainer.NextGridSize end.*/

            /*BoardContainer.SetBlockScale start.*/
            SetBlockScale: function () {
if ( TRACE ) { TRACE( "BoardContainer#SetBlockScale", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(0.04);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    this.blockPrefab.transform.SetParent(this.placeBlockPoint, true);
                                        this.blockScale = this.blockPrefab.transform.localScale.x * this.transform.localScale.x;

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*BoardContainer.SetBlockScale end.*/

            /*BoardContainer.ChangeGridSize start.*/
            ChangeGridSize: function (newSize) {
if ( TRACE ) { TRACE( "BoardContainer#ChangeGridSize", this ); }

                var $t, $t1;
                $t = Bridge.getEnumerator(this.allBlocksInBoard);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        b.ToggleActiveBlockGFX(false);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                this.blocks = this.MinimizeGrid(this.allBlocksInBoard, newSize);

                $t1 = Bridge.getEnumerator(this.blocks);
                try {
                    while ($t1.moveNext()) {
                        var b1 = $t1.Current;
                        b1.ToggleActiveBlockGFX(true);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                this.ScaleBorder(newSize);
            },
            /*BoardContainer.ChangeGridSize end.*/

            /*BoardContainer.MinimizeGrid start.*/
            MinimizeGrid: function (originalGrid, newGridSize) {
if ( TRACE ) { TRACE( "BoardContainer#MinimizeGrid", this ); }

                var centerBlocks = new (System.Collections.Generic.List$1(BlockBoard)).ctor();

                // Find the starting index for the center 3x3 grid
                var gridSize = 15;
                var startX = (Bridge.Int.div((((gridSize - newGridSize) | 0)), 2)) | 0;
                var startY = (Bridge.Int.div((((gridSize - newGridSize) | 0)), 2)) | 0;

                for (var y = startY; y < ((startY + newGridSize) | 0); y = (y + 1) | 0) {
                    for (var x = startX; x < ((startX + newGridSize) | 0); x = (x + 1) | 0) {
                        var index = (Bridge.Int.mul(y, gridSize) + x) | 0;
                        centerBlocks.add(originalGrid.getItem(index));
                    }
                }

                return centerBlocks;
            },
            /*BoardContainer.MinimizeGrid end.*/

            /*BoardContainer.ScaleBorder start.*/
            ScaleBorder: function (blockAmount) {
if ( TRACE ) { TRACE( "BoardContainer#ScaleBorder", this ); }

                var borderSize = this.borderSizePerUnit * blockAmount + this.borderSizeOffset + (this.boardOffsetPerStep * this.currentGridSizeIndex);
                this.border.size = pc.Vec2.ONE.clone().scale( borderSize );
            },
            /*BoardContainer.ScaleBorder end.*/

            /*BoardContainer.BlocksFall start.*/
            BlocksFall: function () {
if ( TRACE ) { TRACE( "BoardContainer#BlocksFall", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    step,
                    i,
                    blockBoard,
                    h,
                    blockBoard1,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(0.4);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    step = 0;
                                        i = 0;
                                        $step = 2;
                                        continue;
                                }
                                case 2: {
                                    if ( i < this.width ) {
                                            $step = 3;
                                            continue;
                                        }
                                    $step = 10;
                                    continue;
                                }
                                case 3: {
                                    for (var j = 0; j < this.width; j = (j + 1) | 0) {
                                            if (!this.blocks.getItem((((Bridge.Int.mul(this.width, j)) + i) | 0)).CanPlace) {
                                                step = (step + 1) | 0;

                                            }
                                            blockBoard = this.blocks.getItem((((Bridge.Int.mul(this.width, j)) + i) | 0));
                                            UnityEngine.Debug.Log$1("Hide 2");
                                            blockBoard.VisibleBlock(false);
                                            ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([blockBoard.x, blockBoard.y], null);
                                        }

                                        h = 0;
                                        $step = 4;
                                        continue;
                                }
                                case 4: {
                                    if ( h < step ) {
                                            $step = 5;
                                            continue;
                                        }
                                    $step = 8;
                                    continue;
                                }
                                case 5: {
                                    blockBoard1 = this.blocks.getItem((((Bridge.Int.mul(this.width, h)) + i) | 0));
                                        blockBoard1.VisibleBlock(true);
                                        blockBoard1.ShowPlaceBlock(true);
                                        ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([blockBoard1.x, blockBoard1.y], blockBoard1);
                                        $enumerator.current = new UnityEngine.WaitForSeconds(0.01);
                                        $step = 6;
                                        return true;
                                }
                                case 6: {
                                    $step = 7;
                                    continue;
                                }
                                case 7: {
                                    h = (h + 1) | 0;
                                    $step = 4;
                                    continue;
                                }
                                case 8: {
                                    step = 0;
                                    $step = 9;
                                    continue;
                                }
                                case 9: {
                                    i = (i + 1) | 0;
                                    $step = 2;
                                    continue;
                                }
                                case 10: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(0.1);
                                        $step = 11;
                                        return true;
                                }
                                case 11: {
                                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.DestroyBlocksFall();

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*BoardContainer.BlocksFall end.*/

            /*BoardContainer.ShakeBoard start.*/
            ShakeBoard: function () {
if ( TRACE ) { TRACE( "BoardContainer#ShakeBoard", this ); }

                if (UnityEngine.Component.op_Inequality(this.shake, null)) {
                    this.shake.Play();
                }
            },
            /*BoardContainer.ShakeBoard end.*/

            /*BoardContainer.Reset start.*/
            Reset: function () {
if ( TRACE ) { TRACE( "BoardContainer#Reset", this ); }

                this.StartCoroutine$1(this.SetBlockScale());

                UnityEngine.Debug.Log$1("Hide 3");
                for (var i = 0; i < this.blocks.Count; i = (i + 1) | 0) {
                    //blocks[i].VisibleBlock(false);

                    this.blocks.getItem(i).VisibleHightLight(false);
                    //blocks[i].SetBlockImage(SpriteManager.Instance.GetBlockShow2D[0]);
                    this.blocks.getItem(i).SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetSpriteByColor(this.blocks.getItem(i).color));
                }
            },
            /*BoardContainer.Reset end.*/

            /*BoardContainer.BoardGrowBlockAnimation start.*/
            BoardGrowBlockAnimation: function () {
if ( TRACE ) { TRACE( "BoardContainer#BoardGrowBlockAnimation", this ); }

                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    nextBlockPos, 
                    spiralBlocks, 
                    totalBlockAnimationTime, 
                    delayBetweenBlocks, 
                    animDelay, 
                    block, 
                    newPos, 
                    $t, 
                    block1, 
                    newPos1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = this.cameraController.UpdateCameraZoom();
                                        $step = 1;
                                        if ($task1.isCompleted()) {
                                            continue;
                                        }
                                        $task1.continue($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        nextBlockPos = this.GetNextBlockPos();
                                        spiralBlocks = this.GetBlocks;
                                        spiralBlocks = BoardContainer.SortInSpiralOrder(spiralBlocks);

                                        totalBlockAnimationTime = this.totalBlockAnimationTimes[this.currentBlockAnimationTimeIndex];
                                        this.currentBlockAnimationTimeIndex = (this.currentBlockAnimationTimeIndex + 1) | 0;

                                        // Delay between blocks in milliseconds
                                        delayBetweenBlocks = totalBlockAnimationTime / spiralBlocks.Count;

                                        animDelay = delayBetweenBlocks;

                                        for (var index = 0; index < spiralBlocks.Count; index = (index + 1) | 0) {
                                            block = spiralBlocks.getItem(index);
                                            DG.Tweening.TweenSettingsExtensions.SetDelay(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.TweenSettingsExtensions.SetEase$2(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOScale(block.transform, 1.5, this.blockRiseTime), DG.Tweening.Ease.OutElastic), animDelay);
                                            newPos = this.GetBlockPosition(block.x, block.y, nextBlockPos);
                                            newPos = new pc.Vec3().mul2( newPos, new pc.Vec3( 1, 1, 1 ).clone().scale( 1.5 ) );
                                            DG.Tweening.TweenSettingsExtensions.SetDelay(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOLocalMove(block.transform, newPos.$clone(), this.blockRiseTime * 0.8), animDelay);
                                            block.MultiplySortingOrder(2);

                                            if (block.gemColor !== BlockGemColor.Empty) {
                                                this.CollectGem(block.gemSR, animDelay);
                                                block.SetBlockGem(BlockGemColor.Empty);
                                            }

                                            animDelay += delayBetweenBlocks;
                                        }

                                        $task2 = System.Threading.Tasks.Task.delay(Bridge.Int.clip32((totalBlockAnimationTime + delayBetweenBlocks) * 1000));
                                        $step = 2;
                                        if ($task2.isCompleted()) {
                                            continue;
                                        }
                                        $task2.continue($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task2.getAwaitedResult();
                                        $t = Bridge.getEnumerator(spiralBlocks);
                                        try {
                                            while ($t.moveNext()) {
                                                block1 = { v : $t.Current };
                                                DG.Tweening.TweenSettingsExtensions.SetEase(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOScale(block1.v.transform, 1.0, this.blockRiseTime), this.blockLandAnimCurve);
                                                newPos1 = this.GetBlockPosition(block1.v.x, block1.v.y, nextBlockPos);
                                                DG.Tweening.TweenSettingsExtensions.OnComplete(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.TweenSettingsExtensions.SetEase(DG.Tweening.Core.TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions), DG.Tweening.ShortcutExtensions.DOLocalMove(block1.v.transform, newPos1.$clone(), this.blockRiseTime), this.blockLandAnimCurve), (function ($me, block1) {
                                                    return function () {
                                                        block1.v.MultiplySortingOrder(0.5);
                                                    };
                                                })(this, block1));
                                            }
                                        } finally {
                                            if (Bridge.is($t, System.IDisposable)) {
                                                $t.System$IDisposable$Dispose();
                                            }
                                        }

                                        $task3 = System.Threading.Tasks.Task.delay(Bridge.Int.clip32((this.blockRiseTime * 0.7) * 1000));
                                        $step = 3;
                                        if ($task3.isCompleted()) {
                                            continue;
                                        }
                                        $task3.continue($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task3.getAwaitedResult();
                                        this.CameraShake();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);

                $asyncBody();
                return $tcs.task;
            },
            /*BoardContainer.BoardGrowBlockAnimation end.*/

            /*BoardContainer.CollectGem start.*/
            CollectGem: function (gem, delay) {
if ( TRACE ) { TRACE( "BoardContainer#CollectGem", this ); }

                var $t;
                var collected = false;
                $t = Bridge.getEnumerator(this.gemCounters);
                try {
                    while ($t.moveNext()) {
                        var gemCollector = $t.Current;
                        if (gemCollector.CheckMatch(gem.sprite)) {
                            collected = true;
                            gemCollector.ReceiveGem(gem.gameObject, delay, gem.sortingOrder);
                        }

                        if (collected) {
                            break;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /*BoardContainer.CollectGem end.*/

            /*BoardContainer.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "BoardContainer#Update", this ); }

                if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.H)) {
                    this.CameraShake();
                }
            },
            /*BoardContainer.Update end.*/

            /*BoardContainer.CameraShake start.*/
            CameraShake: function () {
if ( TRACE ) { TRACE( "BoardContainer#CameraShake", this ); }

                DG.Tweening.ShortcutExtensions.DOKill(UnityEngine.Camera.main);
                DG.Tweening.ShortcutExtensions.DOShakePosition$1(UnityEngine.Camera.main, this.duration, this.strength.$clone(), this.vibrato);
            },
            /*BoardContainer.CameraShake end.*/

            /*BoardContainer.BlocksHasChild start.*/
            BlocksHasChild: function () {
if ( TRACE ) { TRACE( "BoardContainer#BlocksHasChild", this ); }

                var blockBoards = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                for (var i = 0; i < this.blocks.Count; i = (i + 1) | 0) {
                    if (!this.blocks.getItem(i).CanPlace) {
                        blockBoards.add(this.blocks.getItem(i));
                    }
                }
                return blockBoards;
            },
            /*BoardContainer.BlocksHasChild end.*/

            /*BoardContainer.SetBlockImage start.*/
            SetBlockImage: function (image) {
if ( TRACE ) { TRACE( "BoardContainer#SetBlockImage", this ); }

                for (var i = 0; i < this.blocks.Count; i = (i + 1) | 0) {
                    if (this.blocks.getItem(i).CanPlace) {
                        continue;
                    }
                    this.blocks.getItem(i).SetBlockImage(image);
                }
            },
            /*BoardContainer.SetBlockImage end.*/

            /*BoardContainer.VisibleBlock start.*/
            VisibleBlock: function (index, visible) {
if ( TRACE ) { TRACE( "BoardContainer#VisibleBlock", this ); }


                this.allBlocksInBoard.getItem(index).VisibleBlock(visible);
                if (visible) {
                    this.allBlocksInBoard.getItem(index).ShowPlaceBlock(true);
                } else {
                    UnityEngine.Debug.Log$1("Hide 4");
                }
                return this.allBlocksInBoard.getItem(index);
            },
            /*BoardContainer.VisibleBlock end.*/

            /*BoardContainer.GameOver start.*/
            GameOver: function () {
if ( TRACE ) { TRACE( "BoardContainer#GameOver", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    temp,
                    i,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    temp = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                                        temp.AddRange(this.blocks);
                                        MyExtensions.Shuffle(BlockBoard, temp);
                                        ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(false);
                                        i = 0;
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( i < temp.Count ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 5;
                                    continue;
                                }
                                case 2: {
                                    if (temp.getItem(i).CanPlace) {
                                            $step = 4;
                                            continue;
                                        }
                                        temp.getItem(i).SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetBlockShow2D.getItem(1));
                                        $enumerator.current = new UnityEngine.WaitForSeconds(0.02);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    i = (i + 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 5: {
                                    Timer.Schedule(this, 0.2, function () {

                                            //Show Game Over
                                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GameOverProccess();
                                        });

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*BoardContainer.GameOver end.*/

            /*BoardContainer.GetBlockPosition start.*/
            GetBlockPosition: function (x, y, nextBlock) {
if ( TRACE ) { TRACE( "BoardContainer#GetBlockPosition", this ); }

                var pos = new pc.Vec3( this.blockPrefab.transform.position.x + (nextBlock.x * y), this.blockPrefab.transform.position.y + (nextBlock.y * x), 0 );

                return pos.$clone();
            },
            /*BoardContainer.GetBlockPosition end.*/

            /*BoardContainer.GetNextBlockPos start.*/
            GetNextBlockPos: function () {
if ( TRACE ) { TRACE( "BoardContainer#GetNextBlockPos", this ); }

                var xNextBlock = this.nextBlockWidth.position.x - this.blockPrefab.transform.position.x;
                var yNextBlock = this.nextBlockHeight.position.y - this.blockPrefab.transform.position.y;
                var NextBlockPos = new pc.Vec2( xNextBlock, yNextBlock );

                return NextBlockPos.$clone();
            },
            /*BoardContainer.GetNextBlockPos end.*/


        }
    });
    /*BoardContainer end.*/

    /*BombMode start.*/
    Bridge.define("BombMode", {
        inherits: [UnityEngine.MonoBehaviour,IGameMode],
        fields: {
            gameMode: 0,
            objsUsedInMode: null,
            countStep: 0,
            bombItems: null
        },
        alias: [
            "GetGameMode", "IGameMode$GetGameMode",
            "NextPiece", "IGameMode$NextPiece",
            "Setup", "IGameMode$Setup",
            "ActionDestroyBlock", "IGameMode$ActionDestroyBlock",
            "ActionPlacePiece", "IGameMode$ActionPlacePiece",
            "ReturnHome", "IGameMode$ReturnHome",
            "Reset", "IGameMode$Reset"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BombMode#init", this ); }

                this.objsUsedInMode = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
                this.countStep = 0;
                this.bombItems = new (System.Collections.Generic.List$1(BombItem)).ctor();
            }
        },
        methods: {
            /*BombMode.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "BombMode#Start", this ); }

                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.AddGameMode(this);
            },
            /*BombMode.Start end.*/

            /*BombMode.VisibleObjs start.*/
            VisibleObjs: function (visible) {
if ( TRACE ) { TRACE( "BombMode#VisibleObjs", this ); }

                for (var i = 0; i < this.objsUsedInMode.Count; i = (i + 1) | 0) {
                    this.objsUsedInMode.getItem(i).gameObject.SetActive(visible);
                }
            },
            /*BombMode.VisibleObjs end.*/

            /*BombMode.GetGameMode start.*/
            GetGameMode: function () {
if ( TRACE ) { TRACE( "BombMode#GetGameMode", this ); }

                return this.gameMode;
            },
            /*BombMode.GetGameMode end.*/

            /*BombMode.NextPiece start.*/
            NextPiece: function () {
if ( TRACE ) { TRACE( "BombMode#NextPiece", this ); }

                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {
                    return false;
                }
                return true;
            },
            /*BombMode.NextPiece end.*/

            /*BombMode.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "BombMode#Setup", this ); }


                this.ReturnHome();
                this.VisibleObjs(true);
                Timer.Schedule(this, 0.02, Bridge.fn.bind(this, function () {

                    //Resume Mode
                    var dataMode = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode;
                    for (var i = 0; i < dataMode.bombDetails.Count; i = (i + 1) | 0) {
                        var bomb = ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterBombItem();
                        var blockBoard = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.VisibleBlock(dataMode.bombDetails.getItem(i).bombIndex, true);
                        blockBoard.BombItem = bomb;
                        bomb.transform.position = blockBoard.transform.position.$clone();
                        bomb.Setup(blockBoard, dataMode.bombDetails.getItem(i).stepBomb, dataMode.bombDetails.getItem(i));
                        bomb.name = blockBoard.name;
                        this.bombItems.add(bomb);
                    }
                }));

            },
            /*BombMode.Setup end.*/

            /*BombMode.ActionDestroyBlock start.*/
            ActionDestroyBlock: function () {
if ( TRACE ) { TRACE( "BombMode#ActionDestroyBlock", this ); }
 },
            /*BombMode.ActionDestroyBlock end.*/

            /*BombMode.ActionPlacePiece start.*/
            ActionPlacePiece: function () {
if ( TRACE ) { TRACE( "BombMode#ActionPlacePiece", this ); }

                var $t;
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {
                    return;
                }
                this.countStep = (this.countStep + 1) | 0;
                for (var i = 0; i < this.bombItems.Count; i = (i + 1) | 0) {
                    if (!this.bombItems.getItem(i).gameObject.activeInHierarchy) {
                        this.bombItems.removeAt(i);
                        i = (i - 1) | 0;
                        continue;
                    }
                    if (i <= ((ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.bombDetails.Count - 1) | 0)) {
                        ($t = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.bombDetails.getItem(i)).stepBomb = ($t.stepBomb - 1) | 0;
                    }
                    this.bombItems.getItem(i).UpdateStepBomb(1);
                }
                if (this.countStep >= GameManager.MAX_STEP_SHOW_BOMB) {
                    Timer.Schedule(this, 0.06, Bridge.fn.bind(this, function () {

                        //rnd block in board
                        var bombDetail = new BombDetail();

                        var blocksChild = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.BlocksHasChild();
                        var blockBoard = blocksChild.getItem(UnityEngine.Random.Range(0, ((blocksChild.Count - 1) | 0)));
                        var bomb = ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterBombItem();
                        bomb.transform.position = blockBoard.transform.position.$clone();
                        bomb.name = blockBoard.name;
                        blockBoard.BombItem = bomb;
                        bomb.Setup(blockBoard, GameManager.MAX_STEPS_BOMB_ITEM, bombDetail);
                        this.bombItems.add(bomb);
                        this.countStep = 0;
                        bombDetail.bombIndex = blockBoard.blockIndex;
                        bombDetail.stepBomb = GameManager.MAX_STEPS_BOMB_ITEM;
                        ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.bombDetails.add(bombDetail);
                    }));

                }
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.stepBomb = this.countStep;
                //GameManager.Instance.SaveDataMode();
            },
            /*BombMode.ActionPlacePiece end.*/

            /*BombMode.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "BombMode#ReturnHome", this ); }



                this.VisibleObjs(false);
                for (var i = 0; i < this.bombItems.Count; i = (i + 1) | 0) {
                    this.bombItems.getItem(i).gameObject.SetActive(false);
                }
                this.bombItems.clear();

            },
            /*BombMode.ReturnHome end.*/

            /*BombMode.Reset start.*/
            Reset: function () {
if ( TRACE ) { TRACE( "BombMode#Reset", this ); }

                this.countStep = 0;

                for (var i = 0; i < this.bombItems.Count; i = (i + 1) | 0) {
                    this.bombItems.getItem(i).gameObject.SetActive(false);
                }
                this.bombItems.clear();
                //Clear Bomb Data

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.bombDetails.clear();
                //Save
                //GameManager.Instance.SaveDataMode();
            },
            /*BombMode.Reset end.*/


        }
    });
    /*BombMode end.*/

    /*ScreenFrameWork.SingletonComponent$1 start.*/
    /** @namespace ScreenFrameWork */

    /**
     * Gets a static instance of the Component that extends this class and makes it accessible through the Instance property.
     *
     * @public
     * @class ScreenFrameWork.SingletonComponent$1
     * @augments MonoHandler
     */
    Bridge.define("ScreenFrameWork.SingletonComponent$1", function (T) { return {
        inherits: [MonoHandler],
        statics: {
            fields: {
                instance: Bridge.getDefaultValue(T)
            },
            props: {
                Instance: {
                    get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.SingletonComponent$1#Instance#get", this ); }

                        // If the instance is null then either Instance was called to early or this object is not active.
                        if (Bridge.rValue(ScreenFrameWork.SingletonComponent$1(T).instance) == null) {
                            ScreenFrameWork.SingletonComponent$1(T).instance = Bridge.rValue(UnityEngine.Object.FindObjectOfType(T));
                        }

                        if (Bridge.rValue(ScreenFrameWork.SingletonComponent$1(T).instance) == null) {
                            UnityEngine.Debug.LogWarningFormat("[SingletonComponent] Returning null instance for component of type {0}.", [T]);
                        }

                        return Bridge.rValue(ScreenFrameWork.SingletonComponent$1(T).instance);
                    }
                }
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.SingletonComponent$1#init", this ); }

                    this.instance = Bridge.getDefaultValue(T);
                }
            },
            methods: {
                /*ScreenFrameWork.SingletonComponent$1.Exists:static start.*/
                Exists: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.SingletonComponent$1#Exists", this ); }

                    return Bridge.rValue(ScreenFrameWork.SingletonComponent$1(T).instance) != null;
                },
                /*ScreenFrameWork.SingletonComponent$1.Exists:static end.*/


            }
        },
        fields: {
            isInitialized: false
        },
        methods: {
            /*ScreenFrameWork.SingletonComponent$1.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.SingletonComponent$1#Awake", this ); }

                this.SetInstance();
            },
            /*ScreenFrameWork.SingletonComponent$1.Awake end.*/

            /*ScreenFrameWork.SingletonComponent$1.SetInstance start.*/
            SetInstance: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.SingletonComponent$1#SetInstance", this ); }

                if (Bridge.rValue(ScreenFrameWork.SingletonComponent$1(T).instance) != null && !Bridge.referenceEquals(Bridge.rValue(ScreenFrameWork.SingletonComponent$1(T).instance), this.gameObject.GetComponent(T))) {
                    UnityEngine.Debug.LogWarning$1(System.String.concat("[SingletonComponent] Instance already set for type ", Bridge.getTypeName(T)));
                    return false;
                }

                ScreenFrameWork.SingletonComponent$1(T).instance = Bridge.rValue(this.gameObject.GetComponent(T));

                return true;
            },
            /*ScreenFrameWork.SingletonComponent$1.SetInstance end.*/


        }
    }; });
    /*ScreenFrameWork.SingletonComponent$1 end.*/

    /*BoosterMoveDestroy start.*/
    Bridge.define("BoosterMoveDestroy", {
        inherits: [MonoHandler],
        fields: {
            speed: 0,
            horizontal: false,
            rig2D: null,
            isUpdate: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#init", this ); }

                this.speed = 1;
                this.horizontal = false;
                this.isUpdate = false;
            }
        },
        methods: {
            /*BoosterMoveDestroy.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#Setup", this ); }

                this.rig2D = this.GetComponent(UnityEngine.Rigidbody2D);
            },
            /*BoosterMoveDestroy.Setup end.*/

            /*BoosterMoveDestroy.OnEnable start.*/
            OnEnable: function () {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#OnEnable", this ); }

                this.isUpdate = false;
            },
            /*BoosterMoveDestroy.OnEnable end.*/

            /*BoosterMoveDestroy.Move start.*/
            Move: function (position) {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#Move", this ); }

                this.transform.position = position.$clone();
                this.isUpdate = true;


                Timer.Schedule(this, 0.8, Bridge.fn.bind(this, function () {
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.SaveNewStepWhenUseBooster();
                    this.StartCoroutine$1(ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CheckPieceCanPlaceBoard());
                }));
            },
            /*BoosterMoveDestroy.Move end.*/

            /*BoosterMoveDestroy.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#Update", this ); }

                if (!this.isUpdate) {
                    return;
                }
                if (this.horizontal) {
                    this.rig2D.velocity = UnityEngine.Vector2.FromVector3(this.transform.right.$clone().clone().scale( this.speed ));
                } else {
                    this.rig2D.velocity = UnityEngine.Vector2.FromVector3(this.transform.up.$clone().clone().scale( this.speed ));
                }
            },
            /*BoosterMoveDestroy.Update end.*/

            /*BoosterMoveDestroy.OnTriggerEnter2D start.*/
            OnTriggerEnter2D: function (collision) {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#OnTriggerEnter2D", this ); }

                var blockBoard = collision.GetComponent(BlockBoard);
                if (UnityEngine.MonoBehaviour.op_Inequality(blockBoard, null)) {


                    if (!blockBoard.CanPlace) {
                        ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.DestroyOneBlock(blockBoard);

                    }

                }
            },
            /*BoosterMoveDestroy.OnTriggerEnter2D end.*/

            /*BoosterMoveDestroy.GUIEditor start.*/
            GUIEditor: function () {
if ( TRACE ) { TRACE( "BoosterMoveDestroy#GUIEditor", this ); }

                if (UnityEngine.GUILayout.Button("Test")) {
                    this.Move(this.transform.position);
                }
                MonoHandler.prototype.GUIEditor.call(this);
            },
            /*BoosterMoveDestroy.GUIEditor end.*/


        }
    });
    /*BoosterMoveDestroy end.*/

    /*EffectDestroyBlock3D start.*/
    Bridge.define("EffectDestroyBlock3D", {
        inherits: [MonoHandler],
        fields: {
            jump: false,
            isUpdate: false,
            rigidbody: null,
            jumpForce: null,
            m_EulerAngleVelocity: null
        },
        props: {
            GetRigidbody: {
                get: function () {
if ( TRACE ) { TRACE( "EffectDestroyBlock3D#GetRigidbody#get", this ); }

                    if (UnityEngine.Component.op_Equality(this.rigidbody, null)) {
                        this.rigidbody = this.GetComponent(UnityEngine.Rigidbody);
                    }
                    return this.rigidbody;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "EffectDestroyBlock3D#init", this ); }

                this.jumpForce = new UnityEngine.Vector3();
                this.m_EulerAngleVelocity = new UnityEngine.Vector3();
                this.jump = false;
                this.isUpdate = false;
            }
        },
        methods: {
            /*EffectDestroyBlock3D.Acitve start.*/
            Acitve: function () {
if ( TRACE ) { TRACE( "EffectDestroyBlock3D#Acitve", this ); }

                this.jump = true;
                this.isUpdate = true;
            },
            /*EffectDestroyBlock3D.Acitve end.*/

            /*EffectDestroyBlock3D.OnDisable start.*/
            OnDisable: function () {
if ( TRACE ) { TRACE( "EffectDestroyBlock3D#OnDisable", this ); }

                this.isUpdate = false;
                this.jump = false;
                this.GetRigidbody.useGravity = false;
                this.GetRigidbody.velocity = pc.Vec3.ZERO.clone();
                this.transform.rotation = pc.Quat.IDENTITY.clone();
            },
            /*EffectDestroyBlock3D.OnDisable end.*/

            /*EffectDestroyBlock3D.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "EffectDestroyBlock3D#Update", this ); }

                var $t;
                if (!this.isUpdate) {
                    return;
                }
                if (this.jump) {
                    var x = UnityEngine.Random.Range(-100, 100);
                    this.jumpForce.x = x;
                    this.GetRigidbody.AddForce$1(this.jumpForce);
                    this.GetRigidbody.useGravity = true;
                    this.jump = false;
                }

                var deltaRotation = ($t = this.m_EulerAngleVelocity.$clone().clone().scale( UnityEngine.Time.deltaTime ), new pc.Quat().setFromEulerAngles_Unity( $t.x, $t.y, $t.z ));
                this.GetRigidbody.MoveRotation(this.GetRigidbody.rotation.clone().mul( deltaRotation ));
            },
            /*EffectDestroyBlock3D.Update end.*/


        }
    });
    /*EffectDestroyBlock3D end.*/

    /*EmptyMode start.*/
    Bridge.define("EmptyMode", {
        inherits: [UnityEngine.MonoBehaviour,IGameMode],
        fields: {
            gameMode: 0,
            objsUsedInMode: null
        },
        alias: [
            "GetGameMode", "IGameMode$GetGameMode",
            "NextPiece", "IGameMode$NextPiece",
            "Setup", "IGameMode$Setup",
            "ActionDestroyBlock", "IGameMode$ActionDestroyBlock",
            "ActionPlacePiece", "IGameMode$ActionPlacePiece",
            "Reset", "IGameMode$Reset",
            "ReturnHome", "IGameMode$ReturnHome"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "EmptyMode#init", this ); }

                this.objsUsedInMode = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
            }
        },
        methods: {
            /*EmptyMode.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "EmptyMode#Start", this ); }

                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.AddGameMode(this);
            },
            /*EmptyMode.Start end.*/

            /*EmptyMode.VisibleObjs start.*/
            VisibleObjs: function (visible) {
if ( TRACE ) { TRACE( "EmptyMode#VisibleObjs", this ); }

                return;
            },
            /*EmptyMode.VisibleObjs end.*/

            /*EmptyMode.GetGameMode start.*/
            GetGameMode: function () {
if ( TRACE ) { TRACE( "EmptyMode#GetGameMode", this ); }

                return this.gameMode;
            },
            /*EmptyMode.GetGameMode end.*/

            /*EmptyMode.NextPiece start.*/
            NextPiece: function () {
if ( TRACE ) { TRACE( "EmptyMode#NextPiece", this ); }

                return false;
            },
            /*EmptyMode.NextPiece end.*/

            /*EmptyMode.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "EmptyMode#Setup", this ); }


                this.VisibleObjs(true);
            },
            /*EmptyMode.Setup end.*/

            /*EmptyMode.ActionDestroyBlock start.*/
            ActionDestroyBlock: function () {
if ( TRACE ) { TRACE( "EmptyMode#ActionDestroyBlock", this ); }
 },
            /*EmptyMode.ActionDestroyBlock end.*/

            /*EmptyMode.ActionPlacePiece start.*/
            ActionPlacePiece: function () {
if ( TRACE ) { TRACE( "EmptyMode#ActionPlacePiece", this ); }


            },
            /*EmptyMode.ActionPlacePiece end.*/

            /*EmptyMode.Reset start.*/
            Reset: function () {
if ( TRACE ) { TRACE( "EmptyMode#Reset", this ); }



            },
            /*EmptyMode.Reset end.*/

            /*EmptyMode.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "EmptyMode#ReturnHome", this ); }

                this.VisibleObjs(false);
            },
            /*EmptyMode.ReturnHome end.*/


        }
    });
    /*EmptyMode end.*/

    /*ScreenFrameWork.UIMonoBehaviour start.*/
    Bridge.define("ScreenFrameWork.UIMonoBehaviour", {
        inherits: [MonoHandler],
        fields: {
            shakeRoutine: null,
            pulseRoutine: null,
            twistRoutine: null,
            canvasGroup: null
        },
        props: {
            RectT: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#RectT#get", this ); }

                    return Bridge.as(this.transform, UnityEngine.RectTransform);
                }
            },
            CG: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#CG#get", this ); }

                    if (UnityEngine.MonoBehaviour.op_Equality(this.canvasGroup, null)) {
                        this.canvasGroup = this.gameObject.GetComponent(UnityEngine.CanvasGroup);

                        if (UnityEngine.MonoBehaviour.op_Equality(this.canvasGroup, null)) {
                            this.canvasGroup = this.gameObject.AddComponent(UnityEngine.CanvasGroup);
                        }
                    }

                    return this.canvasGroup;
                }
            }
        },
        methods: {
            /*ScreenFrameWork.UIMonoBehaviour.Shake start.*/
            Shake: function (origX, shakeAmount, shakeForce, shakeAnimDuration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#Shake", this ); }

                this.StopRoutine(this.shakeRoutine);

                this.StartCoroutine$1((this.shakeRoutine = this.StartShake(origX, shakeAmount, shakeForce, shakeAnimDuration)));
            },
            /*ScreenFrameWork.UIMonoBehaviour.Shake end.*/

            /*ScreenFrameWork.UIMonoBehaviour.StartShake start.*/
            StartShake: function (origX, shakeAmount, shakeForce, shakeAnimDuration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#StartShake", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    i = 0;
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( i < shakeAmount ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 5;
                                    continue;
                                }
                                case 2: {
                                    if (i % 2 === 0) {
                                            this.ShakeLeft(origX, shakeAnimDuration, shakeForce);
                                        } else {
                                            this.ShakeRight(origX, shakeAnimDuration, shakeForce);
                                        }

                                        $enumerator.current = new UnityEngine.WaitForSeconds(shakeAnimDuration);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    i = (i + 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 5: {
                                    // Move it back to the middle
                                        UIAnimation.PositionX(Bridge.as(this.transform, UnityEngine.RectTransform), origX, shakeAnimDuration).Play();

                                        this.shakeRoutine = null;

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*ScreenFrameWork.UIMonoBehaviour.StartShake end.*/

            /*ScreenFrameWork.UIMonoBehaviour.ShakeLeft start.*/
            ShakeLeft: function (origX, animDuration, shakeForce) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#ShakeLeft", this ); }

                UIAnimation.PositionX(Bridge.as(this.transform, UnityEngine.RectTransform), origX - shakeForce, animDuration).Play();
            },
            /*ScreenFrameWork.UIMonoBehaviour.ShakeLeft end.*/

            /*ScreenFrameWork.UIMonoBehaviour.ShakeRight start.*/
            ShakeRight: function (origX, animDuration, shakeForce) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#ShakeRight", this ); }

                UIAnimation.PositionX(Bridge.as(this.transform, UnityEngine.RectTransform), origX + shakeForce, animDuration).Play();
            },
            /*ScreenFrameWork.UIMonoBehaviour.ShakeRight end.*/

            /*ScreenFrameWork.UIMonoBehaviour.Pulse start.*/
            Pulse: function (origScale, pulseAmount, pulseForce, pulseAnimDuration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#Pulse", this ); }

                this.StopRoutine(this.pulseRoutine);

                this.StartCoroutine$1((this.pulseRoutine = this.StartPulse(origScale, pulseAmount, pulseForce, pulseAnimDuration)));
            },
            /*ScreenFrameWork.UIMonoBehaviour.Pulse end.*/

            /*ScreenFrameWork.UIMonoBehaviour.StartPulse start.*/
            StartPulse: function (origScale, pulseAmount, pulseForce, pulseAnimDuration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#StartPulse", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    i = 0;
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( i < pulseAmount ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 6;
                                    continue;
                                }
                                case 2: {
                                    UIAnimation.ScaleX(Bridge.as(this.transform, UnityEngine.RectTransform), origScale.x * pulseForce, pulseAnimDuration / 2.0).Play();
                                        UIAnimation.ScaleY(Bridge.as(this.transform, UnityEngine.RectTransform), origScale.y * pulseForce, pulseAnimDuration / 2.0).Play();

                                        $enumerator.current = new UnityEngine.WaitForSeconds(pulseAnimDuration / 2.0);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    UIAnimation.ScaleX(Bridge.as(this.transform, UnityEngine.RectTransform), origScale.x, pulseAnimDuration / 2.0).Play();
                                        UIAnimation.ScaleY(Bridge.as(this.transform, UnityEngine.RectTransform), origScale.y, pulseAnimDuration / 2.0).Play();

                                        $enumerator.current = new UnityEngine.WaitForSeconds(pulseAnimDuration / 2.0);
                                        $step = 4;
                                        return true;
                                }
                                case 4: {
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    i = (i + 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 6: {
                                    this.pulseRoutine = null;

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*ScreenFrameWork.UIMonoBehaviour.StartPulse end.*/

            /*ScreenFrameWork.UIMonoBehaviour.Twist start.*/
            Twist: function (twistAmount, twistForce, twistAnimDuration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#Twist", this ); }

                this.StopRoutine(this.twistRoutine);

                this.StartCoroutine$1((this.twistRoutine = this.StartTwist(twistAmount, twistForce, twistAnimDuration)));
            },
            /*ScreenFrameWork.UIMonoBehaviour.Twist end.*/

            /*ScreenFrameWork.UIMonoBehaviour.StartTwist start.*/
            StartTwist: function (twistAmount, twistForce, twistAnimDuration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#StartTwist", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    from,
                    to,
                    i,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    UIAnimation.RotationZ$1(Bridge.as(this.transform, UnityEngine.RectTransform), 0, -twistForce, twistAnimDuration).Play();

                                        $enumerator.current = new UnityEngine.WaitForSeconds(twistAnimDuration);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    from = -twistForce;
                                        to = twistForce;

                                        i = 0;
                                        $step = 2;
                                        continue;
                                }
                                case 2: {
                                    if ( i < twistAmount ) {
                                            $step = 3;
                                            continue;
                                        }
                                    $step = 6;
                                    continue;
                                }
                                case 3: {
                                    if (i % 2 === 0) {
                                            from = -twistForce;
                                            to = twistForce;
                                        } else {
                                            from = twistForce;
                                            to = -twistForce;
                                        }

                                        UIAnimation.RotationZ$1(Bridge.as(this.transform, UnityEngine.RectTransform), from, to, twistAnimDuration).Play();

                                        $enumerator.current = new UnityEngine.WaitForSeconds(twistAnimDuration);
                                        $step = 4;
                                        return true;
                                }
                                case 4: {
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    i = (i + 1) | 0;
                                    $step = 2;
                                    continue;
                                }
                                case 6: {
                                    UIAnimation.RotationZ$1(Bridge.as(this.transform, UnityEngine.RectTransform), to, 0, twistAnimDuration).Play();

                                        this.twistRoutine = null;

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*ScreenFrameWork.UIMonoBehaviour.StartTwist end.*/

            /*ScreenFrameWork.UIMonoBehaviour.StopRoutine start.*/
            StopRoutine: function (routine) {
if ( TRACE ) { TRACE( "ScreenFrameWork.UIMonoBehaviour#StopRoutine", this ); }

                if (routine != null) {
                    this.StopCoroutine(routine);
                }
            },
            /*ScreenFrameWork.UIMonoBehaviour.StopRoutine end.*/


        }
    });
    /*ScreenFrameWork.UIMonoBehaviour end.*/

    /*Piece start.*/
    Bridge.define("Piece", {
        inherits: [MonoHandler],
        fields: {
            blockScale: 0,
            pieceID: 0,
            pieceShapes: null,
            blockObjs: null,
            blocksOnBoard: null,
            blocksOnBoardHightLight: null,
            dstList: null,
            color: 0,
            hexaBlock: false,
            originScale: 0,
            isUpdate: false,
            pieceCheckPlaceBoard: null,
            isClone: false,
            col: null,
            CanPlacePiece: false,
            CanSeleted: false,
            PieceIndex: 0,
            setupColor: false
        },
        props: {
            Score: {
                get: function () {
if ( TRACE ) { TRACE( "Piece#Score#get", this ); }

                    return Bridge.Int.mul(this.blocksOnBoard.Count, ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SCORE_ONE_BLOCK);
                }
            },
            GetBlockObjs: {
                get: function () {
if ( TRACE ) { TRACE( "Piece#GetBlockObjs#get", this ); }

                    return this.blockObjs;
                }
            },
            GetPieceID: {
                get: function () {
if ( TRACE ) { TRACE( "Piece#GetPieceID#get", this ); }

                    return this.pieceID;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "Piece#init", this ); }

                this.blockScale = 0.73;
                this.pieceID = 0;
                this.pieceShapes = System.Array.init(5, null, PieceShape);
                this.blockObjs = new (System.Collections.Generic.List$1(BlockObj)).ctor();
                this.blocksOnBoard = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.blocksOnBoardHightLight = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.dstList = new (System.Collections.Generic.List$1(System.Single)).ctor();
                this.hexaBlock = false;
                this.isUpdate = false;
                this.isClone = false;
                this.setupColor = false;
            }
        },
        methods: {
            /*Piece.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "Piece#Update", this ); }


                if (!this.isUpdate) {
                    return;
                }

                //Off HightLight

                for (var i = 0; i < this.blocksOnBoardHightLight.Count; i = (i + 1) | 0) {
                    this.blocksOnBoardHightLight.getItem(i).VisibleHightLight(false);
                }

                this.blocksOnBoardHightLight.clear();
                for (var i1 = 0; i1 < this.blocksOnBoard.Count; i1 = (i1 + 1) | 0) {
                    this.blockObjs.getItem(i1).VisibleBlockDestroyLine(false);

                    this.blocksOnBoard.getItem(i1).VisibleBlock(false);
                    this.blocksOnBoard.getItem(i1).ShowBlocksCrossCanDestroy(this.blocksOnBoardHightLight);
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([this.blocksOnBoard.getItem(i1).x, this.blocksOnBoard.getItem(i1).y], null);
                }
                this.blocksOnBoard.clear();
                this.CanPlacePiece = false;
                this.dstList.clear();
                //Check Block On Board Can Place
                for (var i2 = 0; i2 < this.blockObjs.Count; i2 = (i2 + 1) | 0) {
                    for (var j = 0; j < ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetBlocks.Count; j = (j + 1) | 0) {
                        var blockBoard = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetBlocks.getItem(j);
                        if (!blockBoard.CanPlace) {
                            continue;
                        }
                        var blockPos = this.blockObjs.getItem(i2).transform.position.$clone();
                        var boardBlockPos = blockBoard.transform.position.$clone();
                        blockPos.z = 0;
                        boardBlockPos.z = 0;
                        var dst = pc.Vec3.distance( blockPos, boardBlockPos );
                        if (dst > 0.35) {
                            continue;
                        }
                        if (dst <= 0.35) {
                            blockBoard.BlockObj = this.blockObjs.getItem(i2);
                            this.blocksOnBoard.add(blockBoard);

                        }
                    }
                }



                if (this.blocksOnBoard.Count === this.blockObjs.Count) {


                    if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode) {
                        if (!ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.CurrentTutorialBoardData.CanPlacePiece(this.blocksOnBoard)) {
                            this.CanPlacePiece = false;
                            return;
                        }
                    }

                    for (var i3 = 0; i3 < this.blocksOnBoard.Count; i3 = (i3 + 1) | 0) {

                        this.blocksOnBoard.getItem(i3).VisibleBlock(true);
                        this.blocksOnBoard.getItem(i3).SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetSpriteByColor(this.color));
                        this.blocksOnBoard.getItem(i3).ShowPlaceBlock(false);
                        ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([this.blocksOnBoard.getItem(i3).x, this.blocksOnBoard.getItem(i3).y], this.blocksOnBoard.getItem(i3));
                        this.FullBlockY(this.blocksOnBoard.getItem(i3));


                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {

                            var visible = this.blocksOnBoard.getItem(i3).ShowBlocksCrossCanDestroy(this.blocksOnBoardHightLight);
                            // blockObjs[i].VisibleBlockDestroyLine(visible);
                        } else {
                            this.FullBlockX(this.blocksOnBoard.getItem(i3));




                        }

                    }

                    this.CanPlacePiece = true;
                }

            },
            /*Piece.Update end.*/

            /*Piece.Setup start.*/
            Setup: function (blockVisible) {
if ( TRACE ) { TRACE( "Piece#Setup", this ); }

                if (!this.setupColor) {
                    this.color = this.GetRandomBlockColor();
                    this.setupColor = true;
                }
                this.SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetSpriteByColor(this.color));
                this.CanSeleted = true;
                this.originScale = this.transform.localScale.x;
                this.blocksOnBoard.clear();
                this.VisibleBlocks(blockVisible);
                // VisibleBlocks(true);
                this.isClone = false;
                this.col = this.GetComponent(UnityEngine.Collider);
                this.col.enabled = blockVisible;
                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    this.blockObjs.getItem(i).Setup();
                }

                this.SetBlockScale(this.blockScale);
            },
            /*Piece.Setup end.*/

            /*Piece.GetRandomBlockColor start.*/
            GetRandomBlockColor: function () {
if ( TRACE ) { TRACE( "Piece#GetRandomBlockColor", this ); }

                var values = Bridge.cast(System.Enum.getValues(BlockColor), System.Array.type(BlockColor));

                // Filter out the unwanted values
                var filteredValues = System.Linq.Enumerable.from(values, BlockColor).where(function (val) {
                        return val !== BlockColor.White && val !== BlockColor.Brown && val !== BlockColor.Empty;
                    }).ToArray(BlockColor);

                var randomIndex = UnityEngine.Random.Range(0, filteredValues.length);

                return filteredValues[randomIndex];
            },
            /*Piece.GetRandomBlockColor end.*/

            /*Piece.SetupPieceClone start.*/
            SetupPieceClone: function (pieceClone) {
if ( TRACE ) { TRACE( "Piece#SetupPieceClone", this ); }

                this.pieceCheckPlaceBoard = pieceClone;
                this.pieceCheckPlaceBoard.transform.localScale = new pc.Vec3( 1, 1, 1 );
                this.isClone = true;

            },
            /*Piece.SetupPieceClone end.*/

            /*Piece.SetSelectPosition start.*/
            SetSelectPosition: function (position) {
if ( TRACE ) { TRACE( "Piece#SetSelectPosition", this ); }

                if (!this.CanSeleted) {
                    return;
                }
                position.y += 3;
                this.transform.position = position.$clone();
            },
            /*Piece.SetSelectPosition end.*/

            /*Piece.SetSelected start.*/
            SetSelected: function (selected) {
if ( TRACE ) { TRACE( "Piece#SetSelected", this ); }

                if (!this.CanSeleted) {
                    return;
                }

                //float scale = PlayingManager.Instance.GetCurrentBoard.GetBlockScale / transform.localScale.x;
                //scale = scale * ((GameManager.Instance.GetGameMode == GameMode.HEXA) ? .82f : .98f);
                var worldScale = this.GetWorldScale(this.transform);
                var scale = 1.0 / worldScale.x;
                LeanTween.scale$1(this.gameObject, new pc.Vec3( 1, 1, 1 ).clone().scale( ((selected) ? this.originScale * scale : this.originScale) ), 0.1);
                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    this.blockObjs.getItem(i).SetSelected(selected);
                }
                if (!selected) {
                    if (this.CanPlacePiece) {
                        this.PlacePiece();
                    } else {

                        for (var i1 = 0; i1 < this.blocksOnBoard.Count; i1 = (i1 + 1) | 0) {
                            this.blocksOnBoard.getItem(i1).VisibleBlock(false);
                            ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([this.blocksOnBoard.getItem(i1).x, this.blocksOnBoard.getItem(i1).y], null);
                        }
                        ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("block_miss");
                        LeanTween.moveLocal$2(this.gameObject, pc.Vec3.ZERO.clone(), 0.1);
                    }

                }
                this.isUpdate = selected;
            },
            /*Piece.SetSelected end.*/

            /*Piece.GetWorldScale start.*/
            GetWorldScale: function (transform) {
if ( TRACE ) { TRACE( "Piece#GetWorldScale", this ); }

                var worldScale = transform.localScale.$clone();
                var parent = transform.parent;

                while (UnityEngine.Component.op_Inequality(parent, null)) {
                    var parentScale = parent.localScale.$clone();
                    worldScale = new pc.Vec3().mul2( worldScale, parentScale );
                    parent = parent.parent;
                }

                return worldScale.$clone();
            },
            /*Piece.GetWorldScale end.*/

            /*Piece.CheckPieceCanPlaceBoard start.*/
            CheckPieceCanPlaceBoard: function () {
if ( TRACE ) { TRACE( "Piece#CheckPieceCanPlaceBoard", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    _blockBoard,
                    position,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    // Debug.Log("Check Piece Can Place " +gameObject.name);
                                        i = 0;
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( i < ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetBlocks.Count ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 7;
                                    continue;
                                }
                                case 2: {
                                    _blockBoard = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetBlocks.getItem(i);
                                        position = _blockBoard.transform.position.$clone();
                                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode === GameMode.HEXA) {
                                            position.x -= -0.5;
                                            position.y += 0.2;
                                        }
                                        this.pieceCheckPlaceBoard.transform.position = position.$clone();
                                        // yield return new WaitForSeconds(.3f);

                                        if (this.pieceCheckPlaceBoard.CanPlacePieceOnBoard()) {
                                            $step = 3;
                                            continue;
                                        } else  {
                                            $step = 4;
                                            continue;
                                        }
                                }
                                case 3: {
                                    //SetBlockImage(SpriteManager.Instance.GetBlocksShow3D[0]);
                                        this.SetBlockColor(new pc.Color( 1, 1, 1, 1 ));
                                        this.CanSeleted = true;
                                        return false;
                                    $step = 5;
                                    continue;
                                }
                                case 4: {
                                    //SetBlockImage(SpriteManager.Instance.GetBlocksShow3D[1]);
                                        this.SetBlockColor(new pc.Color( 0.5, 0.5, 0.5, 1 ));
                                        this.CanSeleted = false;
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    $step = 6;
                                    continue;
                                }
                                case 6: {
                                    i = (i + 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 7: {
                                    return false;
                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*Piece.CheckPieceCanPlaceBoard end.*/

            /*Piece.CanPlacePieceOnBoard start.*/
            CanPlacePieceOnBoard: function () {
if ( TRACE ) { TRACE( "Piece#CanPlacePieceOnBoard", this ); }

                this.isUpdate = false;
                this.blocksOnBoard.clear();
                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    for (var j = 0; j < ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetBlocks.Count; j = (j + 1) | 0) {
                        var blockBoard = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetBlocks.getItem(j);
                        if (!blockBoard.CanPlace) {
                            continue;
                        }
                        var blockPos = this.blockObjs.getItem(i).transform.position.$clone();
                        var boardBlockPos = blockBoard.transform.position.$clone();
                        blockPos.z = 0;
                        boardBlockPos.z = 0;
                        var dst = pc.Vec3.distance( blockPos, boardBlockPos );
                        if (dst > 0.6) {
                            continue;
                        }
                        if (dst <= 0.6) {
                            this.blocksOnBoard.add(blockBoard);
                        }
                    }
                }


                if (this.blocksOnBoard.Count === this.blockObjs.Count) {
                    return true;
                }

                return false;
            },
            /*Piece.CanPlacePieceOnBoard end.*/

            /*Piece.SetBlockImage start.*/
            SetBlockImage: function (image) {
if ( TRACE ) { TRACE( "Piece#SetBlockImage", this ); }

                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    this.blockObjs.getItem(i).SetBlockImage(image);
                }
            },
            /*Piece.SetBlockImage end.*/

            /*Piece.SetBlockColor start.*/
            SetBlockColor: function (newCol) {
if ( TRACE ) { TRACE( "Piece#SetBlockColor", this ); }

                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    this.blockObjs.getItem(i).SetBlockColor(newCol);
                }
            },
            /*Piece.SetBlockColor end.*/

            /*Piece.SetBlockScale start.*/
            SetBlockScale: function (newScale) {
if ( TRACE ) { TRACE( "Piece#SetBlockScale", this ); }

                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    this.blockObjs.getItem(i).transform.localScale = new pc.Vec3( 1, 1, 1 ).clone().scale( newScale );
                }
            },
            /*Piece.SetBlockScale end.*/

            /*Piece.PlacePiece start.*/
            PlacePiece: function () {
if ( TRACE ) { TRACE( "Piece#PlacePiece", this ); }

                var $t, $t1, $t2, $t3, $t4, $t5;

                ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("block_place");
                for (var i = 0; i < this.blocksOnBoardHightLight.Count; i = (i + 1) | 0) {
                    this.blocksOnBoardHightLight.getItem(i).VisibleHightLight(false);
                }
                this.blocksOnBoardHightLight.clear();
                var dataPlacePiece = new DataPlacePiece();
                var prevblockIndex = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                prevblockIndex.AddRange(ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.blocksModeIndex);
                for (var i1 = 0; i1 < this.blocksOnBoard.Count; i1 = (i1 + 1) | 0) {

                    this.blocksOnBoard.getItem(i1).ShowPlaceBlock(true);
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([this.blocksOnBoard.getItem(i1).x, this.blocksOnBoard.getItem(i1).y], this.blocksOnBoard.getItem(i1));
                    this.FullBlockY(this.blocksOnBoard.getItem(i1));
                    if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {
                        var blocksHexaDestroy = this.blocksOnBoard.getItem(i1).GetBlocksCrossDestroy();

                        for (var j = 0; j < blocksHexaDestroy.Count; j = (j + 1) | 0) {
                            if (!this.blocksOnBoardHightLight.contains(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blocksHexaDestroy.getItem(j).x, blocksHexaDestroy.getItem(j).y]))) {
                                this.blocksOnBoardHightLight.add(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blocksHexaDestroy.getItem(j).x, blocksHexaDestroy.getItem(j).y]));
                            }
                        }
                    } else {

                        this.FullBlockX(this.blocksOnBoard.getItem(i1));
                    }




                    if (this.blocksOnBoardHightLight.Count === 0) {
                        ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.blocksModeIndex.add(this.blocksOnBoard.getItem(i1).blockIndex);
                    }
                    dataPlacePiece.blocksHideIndex.add(this.blocksOnBoard.getItem(i1).blockIndex);


                }


                //Save Step Place Block
                for (var i2 = 0; i2 < ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetPiecesInGame.length; i2 = (i2 + 1) | 0) {

                    var piece = ($t = ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetPiecesInGame)[i2];
                    if (UnityEngine.MonoBehaviour.op_Inequality(piece, null)) {
                        dataPlacePiece.pieces[i2] = ($t1 = ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetPiecesInGame)[i2].pieceID;

                    } else {
                        dataPlacePiece.pieces[i2] = -1;

                    }

                }

                if (this.blocksOnBoardHightLight.Count > 0) {
                    dataPlacePiece.blocksShowIndex.clear();

                    dataPlacePiece.DestroyLine = true;
                    dataPlacePiece.blocksShowIndex.AddRange(prevblockIndex);
                }

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.AddDataPlacePiece(dataPlacePiece);
                //GameManager.Instance.SaveDataMode();



                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.UpdateScore(this.Score);
                if (UnityEngine.MonoBehaviour.op_Inequality(this.pieceCheckPlaceBoard, null)) {
                    this.pieceCheckPlaceBoard.gameObject.SetActive(false);
                }
                this.gameObject.SetActive(false);
                ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.PlacePieceSuccess(this, this.blocksOnBoardHightLight.Count > 0);


                for (var i3 = 0; i3 < ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetPiecesInGame.length; i3 = (i3 + 1) | 0) {

                    var piece1 = ($t2 = ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetPiecesInGame)[i3];
                    if (UnityEngine.MonoBehaviour.op_Inequality(piece1, null)) {
                        ($t3 = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.piecesId)[i3] = ($t4 = ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.GetPiecesInGame)[i3].pieceID;
                    } else {
                        dataPlacePiece.pieces[i3] = -1;
                        ($t5 = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.piecesId)[i3] = -1;
                    }

                }



                //Destroy Block
                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.DestroyBlock(this.blocksOnBoardHightLight);




                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.LastPiece = this.transform;
                //check button undo
                ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.VisibleButtonUndo();
            },
            /*Piece.PlacePiece end.*/

            /*Piece.VisibleBlocks start.*/
            VisibleBlocks: function (visible) {
if ( TRACE ) { TRACE( "Piece#VisibleBlocks", this ); }

                for (var i = 0; i < this.blockObjs.Count; i = (i + 1) | 0) {
                    this.blockObjs.getItem(i).gameObject.SetActive(visible);
                }
            },
            /*Piece.VisibleBlocks end.*/

            /*Piece.FullBlockY start.*/
            FullBlockY: function (blockBoard) {
if ( TRACE ) { TRACE( "Piece#FullBlockY", this ); }


                for (var i = 0; i < ScreenFrameWork.SingletonComponent$1(GameManager).Instance.currentBoard; i = (i + 1) | 0) {

                    if (UnityEngine.MonoBehaviour.op_Equality(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blockBoard.x, i]), null)) {
                        //Debug.Log(string.Format("BlockY Null:{0}-{1}", blockBoard.x, i));
                        return false;
                    }
                    if (ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blockBoard.x, i]).CanPlace && ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blockBoard.x, i]).gameObject.activeInHierarchy) {
                        // Debug.Log(string.Format("BlockY CanPlace:{0}-{1}", blockBoard.x, i));
                        return false;
                    }
                }

                for (var i1 = 0; i1 < ScreenFrameWork.SingletonComponent$1(GameManager).Instance.currentBoard; i1 = (i1 + 1) | 0) {
                    blockBoard.VisibleHightLight(true);
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blockBoard.x, i1]).VisibleHightLight(true);
                    if (!this.blocksOnBoardHightLight.contains(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blockBoard.x, i1]))) {
                        this.blocksOnBoardHightLight.add(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([blockBoard.x, i1]));
                    }
                }
                return true;
            },
            /*Piece.FullBlockY end.*/

            /*Piece.FullBlockX start.*/
            FullBlockX: function (blockBoard) {
if ( TRACE ) { TRACE( "Piece#FullBlockX", this ); }


                for (var i = 0; i < ScreenFrameWork.SingletonComponent$1(GameManager).Instance.currentBoard; i = (i + 1) | 0) {

                    if (UnityEngine.MonoBehaviour.op_Equality(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([i, blockBoard.y]), null)) {
                        //  Debug.Log(string.Format("BlockY Null:{0}-{1}", i, blockBoard.y));
                        return false;
                    }
                    if (ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([i, blockBoard.y]).CanPlace) {
                        //   Debug.Log(string.Format("BlockY CanPlace:{0}-{1}", i, blockBoard.y));
                        return false;
                    }
                }

                for (var i1 = 0; i1 < ScreenFrameWork.SingletonComponent$1(GameManager).Instance.currentBoard; i1 = (i1 + 1) | 0) {
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([i1, blockBoard.y]).VisibleHightLight(true);
                    if (!this.blocksOnBoardHightLight.contains(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([i1, blockBoard.y]))) {
                        this.blocksOnBoardHightLight.add(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.get([i1, blockBoard.y]));
                    }
                }
                return true;
            },
            /*Piece.FullBlockX end.*/


        }
    });
    /*Piece end.*/

    /*TimeMode start.*/
    Bridge.define("TimeMode", {
        inherits: [UnityEngine.MonoBehaviour,IGameMode],
        fields: {
            gameMode: 0,
            processTime: null,
            iconTime: null,
            objsUsedInMode: null,
            isUpdate: false,
            fill: 0
        },
        alias: [
            "GetGameMode", "IGameMode$GetGameMode",
            "NextPiece", "IGameMode$NextPiece",
            "Setup", "IGameMode$Setup",
            "ActionDestroyBlock", "IGameMode$ActionDestroyBlock",
            "ActionPlacePiece", "IGameMode$ActionPlacePiece",
            "ReturnHome", "IGameMode$ReturnHome",
            "Reset", "IGameMode$Reset"
        ],
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "TimeMode#init", this ); }

                this.objsUsedInMode = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
                this.isUpdate = false;
            }
        },
        methods: {
            /*TimeMode.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "TimeMode#Start", this ); }

                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.AddGameMode(this);
            },
            /*TimeMode.Start end.*/

            /*TimeMode.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "TimeMode#FixedUpdate", this ); }

                if (!this.isUpdate) {
                    return;
                }
                this.UpdateProcessFill(-(UnityEngine.Time.deltaTime / 500));
            },
            /*TimeMode.FixedUpdate end.*/

            /*TimeMode.VisibleObjs start.*/
            VisibleObjs: function (visible) {
if ( TRACE ) { TRACE( "TimeMode#VisibleObjs", this ); }

                for (var i = 0; i < this.objsUsedInMode.Count; i = (i + 1) | 0) {
                    this.objsUsedInMode.getItem(i).gameObject.SetActive(visible);
                }
            },
            /*TimeMode.VisibleObjs end.*/

            /*TimeMode.ShowEffectTime start.*/
            ShowEffectTime: function (totalLine) {
if ( TRACE ) { TRACE( "TimeMode#ShowEffectTime", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    effTime,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    i = 0;
                                        $step = 1;
                                        continue;
                                }
                                case 1: {
                                    if ( i < totalLine ) {
                                            $step = 2;
                                            continue;
                                        }
                                    $step = 5;
                                    continue;
                                }
                                case 2: {
                                    effTime = { v : ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterEffectTime() };
                                        effTime.v.Play();
                                        effTime.v.transform.position = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.LastPiece.position.$clone();
                                        effTime.v.GetCurveMove.Move(this.iconTime, effTime.v.transform.position, (function ($me, effTime) {
                                            return Bridge.fn.bind($me, function () {
                                                this.UpdateProcessFill(this.fill);
                                                effTime.v.gameObject.SetActive(false);
                                            });
                                        })(this, effTime));
                                        $enumerator.current = new UnityEngine.WaitForSeconds(0.04);
                                        $step = 3;
                                        return true;
                                }
                                case 3: {
                                    $step = 4;
                                    continue;
                                }
                                case 4: {
                                    i = (i + 1) | 0;
                                    $step = 1;
                                    continue;
                                }
                                case 5: {

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*TimeMode.ShowEffectTime end.*/

            /*TimeMode.UpdateProcessFill start.*/
            UpdateProcessFill: function (value) {
if ( TRACE ) { TRACE( "TimeMode#UpdateProcessFill", this ); }

                this.processTime.fillAmount += value;

                if (this.processTime.fillAmount >= 1) {
                    ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("explosion");
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.ShakeBoard();
                    this.processTime.fillAmount = 0;
                    this.StartCoroutine$1(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.BlocksFall());
                    //GameManager.Instance.SaveSetting();
                } else if (this.processTime.fillAmount <= 0) {
                    this.processTime.fillAmount = 0;
                }
                if (this.processTime.fillAmount > 0) {
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.fillTimer = this.processTime.fillAmount;
                    //GameManager.Instance.SaveSetting();
                }
            },
            /*TimeMode.UpdateProcessFill end.*/

            /*TimeMode.GetGameMode start.*/
            GetGameMode: function () {
if ( TRACE ) { TRACE( "TimeMode#GetGameMode", this ); }

                return this.gameMode;
            },
            /*TimeMode.GetGameMode end.*/

            /*TimeMode.NextPiece start.*/
            NextPiece: function () {
if ( TRACE ) { TRACE( "TimeMode#NextPiece", this ); }

                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {
                    return false;
                }
                return true;
            },
            /*TimeMode.NextPiece end.*/

            /*TimeMode.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "TimeMode#Setup", this ); }

                this.fill = 0.1;
                this.VisibleObjs(true);
                this.processTime.fillAmount = 0;
                this.UpdateProcessFill(ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.fillTimer);
                this.isUpdate = true;
            },
            /*TimeMode.Setup end.*/

            /*TimeMode.ActionDestroyBlock start.*/
            ActionDestroyBlock: function () {
if ( TRACE ) { TRACE( "TimeMode#ActionDestroyBlock", this ); }

                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {
                    return;
                }


                this.StartCoroutine$1(this.ShowEffectTime(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.TotalLineDestroy));
            },
            /*TimeMode.ActionDestroyBlock end.*/

            /*TimeMode.ActionPlacePiece start.*/
            ActionPlacePiece: function () {
if ( TRACE ) { TRACE( "TimeMode#ActionPlacePiece", this ); }
 },
            /*TimeMode.ActionPlacePiece end.*/

            /*TimeMode.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "TimeMode#ReturnHome", this ); }



                this.VisibleObjs(false);
                this.isUpdate = false;

            },
            /*TimeMode.ReturnHome end.*/

            /*TimeMode.Reset start.*/
            Reset: function () {
if ( TRACE ) { TRACE( "TimeMode#Reset", this ); }

                this.isUpdate = false;
                this.processTime.fillAmount = 0;
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.fillTimer = 0;
                //GameManager.Instance.SaveSetting();
            },
            /*TimeMode.Reset end.*/


        }
    });
    /*TimeMode end.*/

    /*TutorialBoardData start.*/
    Bridge.define("TutorialBoardData", {
        inherits: [MonoHandler],
        fields: {
            boardTutorial: null,
            tutorialData: null,
            targetHand: null,
            beginHand: null,
            piecesID: null,
            blocksBoardCanPlace: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "TutorialBoardData#init", this ); }

                this.tutorialData = new (System.Collections.Generic.List$1(System.Boolean)).ctor();
                this.piecesID = System.Array.init(3, 0, System.Int32);
                this.blocksBoardCanPlace = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
            }
        },
        methods: {
            /*TutorialBoardData.CanPlacePiece start.*/
            CanPlacePiece: function (blockBoards) {
if ( TRACE ) { TRACE( "TutorialBoardData#CanPlacePiece", this ); }


                UnityEngine.Debug.Log(Bridge.box(blockBoards.Count, System.Int32));
                for (var i = 0; i < this.blocksBoardCanPlace.Count; i = (i + 1) | 0) {
                    var canPlace = UnityEngine.Object.op_Implicit(blockBoards.Find(Bridge.fn.bind(this, function (x) {
                        return UnityEngine.MonoBehaviour.op_Equality(x, this.blocksBoardCanPlace.getItem(i));
                    })));
                    if (!canPlace) {
                        return false;
                    }
                }

                return true;
            },
            /*TutorialBoardData.CanPlacePiece end.*/

            /*TutorialBoardData.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "TutorialBoardData#Setup", this ); }


                //Reset
                for (var i = 0; i < this.boardTutorial.GetAllBlocks.Count; i = (i + 1) | 0) {
                    var blockBoard = this.boardTutorial.GetAllBlocks.getItem(i);
                    blockBoard.VisibleBlock(false);

                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([blockBoard.x, blockBoard.y], null);
                }

                for (var i1 = 0; i1 < this.blocksBoardCanPlace.Count; i1 = (i1 + 1) | 0) {
                    this.blocksBoardCanPlace.getItem(i1).SetLayer(true);
                }

                for (var i2 = 0; i2 < this.tutorialData.Count; i2 = (i2 + 1) | 0) {
                    var blockBoard1 = this.boardTutorial.GetAllBlocks.getItem(i2);
                    blockBoard1.VisibleBlock(this.tutorialData.getItem(i2));
                    if (this.tutorialData.getItem(i2)) {
                        blockBoard1.ShowPlaceBlock(true);
                    }
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.gridInGame.set([blockBoard1.x, blockBoard1.y], blockBoard1);
                }

                ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.MoveHand(this.beginHand.position, this.targetHand.position);
                ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.VisiblePiecesInGame(false);
                ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CreateNewPieces(false, this.piecesID);
            },
            /*TutorialBoardData.Setup end.*/

            /*TutorialBoardData.EndStep start.*/
            EndStep: function () {
if ( TRACE ) { TRACE( "TutorialBoardData#EndStep", this ); }

                for (var i = 0; i < this.blocksBoardCanPlace.Count; i = (i + 1) | 0) {
                    this.blocksBoardCanPlace.getItem(i).SetLayer(false);
                }
            },
            /*TutorialBoardData.EndStep end.*/


        }
    });
    /*TutorialBoardData end.*/

    /*BoosterManager start.*/
    Bridge.define("BoosterManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "BoosterManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(BoosterManager)]; },
        statics: {
            fields: {
                maxAdsGetBoosterOneGame: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "BoosterManager#init", this ); }

                    this.maxAdsGetBoosterOneGame = 2;
                }
            }
        },
        fields: {
            boosterType: 0,
            hintInfors: null,
            textBoosterOneBlock: null,
            textBoosterOneHorizontal: null,
            textBoosterOneVertical: null,
            textBoosterBack: null,
            rectButtonsBooster: null,
            hammerObj: null,
            hammerAnimation: null,
            testMode: false,
            currentBooster: 0,
            btnUndo: null,
            destroyObj: null
        },
        props: {
            GetBoosterType: {
                get: function () {
if ( TRACE ) { TRACE( "BoosterManager#GetBoosterType#get", this ); }

                    return this.boosterType;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "BoosterManager#init", this ); }

                this.boosterType = BoosterManager.BoosterType.NONE;
                this.hintInfors = new (System.Collections.Generic.List$1(BoosterManager.HintInfor)).ctor();
                this.currentBooster = -1;
            }
        },
        methods: {
            /*BoosterManager.SetBoosterType start.*/
            SetBoosterType: function (boosterType) {
if ( TRACE ) { TRACE( "BoosterManager#SetBoosterType", this ); }

                this.boosterType = boosterType;
                if (boosterType === BoosterManager.BoosterType.NONE) {

                    for (var i = 0; i < this.rectButtonsBooster.length; i = (i + 1) | 0) {
                        this.AnimationScale(this.rectButtonsBooster[i], false);
                    }

                    this.destroyObj = null;
                }


            },
            /*BoosterManager.SetBoosterType end.*/

            /*BoosterManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "BoosterManager#Start", this ); }

                if (this.testMode) {
                    for (var i = 0; i < this.hintInfors.Count; i = (i + 1) | 0) {
                        this.hintInfors.getItem(i).start = 10000;
                    }
                }








                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addSetupPlayGame(Bridge.fn.cacheBind(this, this.SetupPlayGame));
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addReturnHome(Bridge.fn.cacheBind(this, this.OnEventBoosterCancel));
                //Visible Undo 
                this.btnUndo = this.rectButtonsBooster[((this.rectButtonsBooster.length - 1) | 0)].GetComponent(UnityEngine.UI.Button);

            },
            /*BoosterManager.Start end.*/

            /*BoosterManager.SetupPlayGame start.*/
            SetupPlayGame: function () {
if ( TRACE ) { TRACE( "BoosterManager#SetupPlayGame", this ); }

                Timer.Schedule(this, 0.02, Bridge.fn.bind(this, function () {
                    this.VisibleButtonUndo();
                }));
                //update remain number booster
                for (var i = 0; i < this.hintInfors.Count; i = (i + 1) | 0) {
                    this.hintInfors.getItem(i).LoadHintInfor();
                }



                for (var i1 = 0; i1 < this.hintInfors.Count; i1 = (i1 + 1) | 0) {
                    this.hintInfors.getItem(i1).adsCanGet = BoosterManager.maxAdsGetBoosterOneGame;
                }

                this.UpdateTexNumberBooster();
            },
            /*BoosterManager.SetupPlayGame end.*/

            /*BoosterManager.UpdateTexNumberBooster start.*/
            UpdateTexNumberBooster: function () {
if ( TRACE ) { TRACE( "BoosterManager#UpdateTexNumberBooster", this ); }

                this.textBoosterOneBlock.text = (this.hintInfors.getItem(0).current === 0) ? System.String.format("AD + {0}", [Bridge.toString(this.hintInfors.getItem(0).adsCanGet)]) : System.String.format("x{0}", [Bridge.toString(this.hintInfors.getItem(0).current)]);
                this.textBoosterOneHorizontal.text = (this.hintInfors.getItem(1).current === 0) ? System.String.format("AD + {0}", [Bridge.toString(this.hintInfors.getItem(1).adsCanGet)]) : System.String.format("x{0}", [Bridge.toString(this.hintInfors.getItem(1).current)]);
                this.textBoosterOneVertical.text = (this.hintInfors.getItem(2).current === 0) ? System.String.format("AD + {0}", [Bridge.toString(this.hintInfors.getItem(2).adsCanGet)]) : System.String.format("x{0}", [Bridge.toString(this.hintInfors.getItem(2).current)]);
                this.textBoosterBack.text = (this.hintInfors.getItem(3).current === 0) ? System.String.format("AD + {0}", [Bridge.toString(this.hintInfors.getItem(3).adsCanGet)]) : System.String.format("x{0}", [Bridge.toString(this.hintInfors.getItem(3).current)]);
            },
            /*BoosterManager.UpdateTexNumberBooster end.*/

            /*BoosterManager.OnEventBoosterCancel start.*/
            OnEventBoosterCancel: function () {
if ( TRACE ) { TRACE( "BoosterManager#OnEventBoosterCancel", this ); }

                this.SetBoosterType(BoosterManager.BoosterType.NONE);
                if (this.currentBooster < 0) {
                    return;
                }
                this.AnimationScale(this.rectButtonsBooster[this.currentBooster], false);
            },
            /*BoosterManager.OnEventBoosterCancel end.*/

            /*BoosterManager.EffectOneBlockDestroy start.*/
            EffectOneBlockDestroy: function (position) {
if ( TRACE ) { TRACE( "BoosterManager#EffectOneBlockDestroy", this ); }

                position.x += 0.5;
                this.hammerObj.transform.position = position.$clone();
                this.hammerObj.SetActive(true);
                this.hammerAnimation.Play();
            },
            /*BoosterManager.EffectOneBlockDestroy end.*/

            /*BoosterManager.VisibleButtonUndo start.*/
            VisibleButtonUndo: function () {
if ( TRACE ) { TRACE( "BoosterManager#VisibleButtonUndo", this ); }

                this.btnUndo.interactable = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CanUndo();
            },
            /*BoosterManager.VisibleButtonUndo end.*/

            /*BoosterManager.Restart start.*/
            Restart: function () {
if ( TRACE ) { TRACE( "BoosterManager#Restart", this ); }

                this.boosterType = BoosterManager.BoosterType.NONE;
                for (var i = 0; i < this.hintInfors.Count; i = (i + 1) | 0) {
                    this.hintInfors.getItem(i).adsCanGet = BoosterManager.maxAdsGetBoosterOneGame;
                }
                this.UpdateTexNumberBooster();
            },
            /*BoosterManager.Restart end.*/

            /*BoosterManager.CompleteUsedBooster start.*/
            CompleteUsedBooster: function (Booster) {
if ( TRACE ) { TRACE( "BoosterManager#CompleteUsedBooster", this ); }

                var $t;
                this.AnimationScale(this.rectButtonsBooster[this.currentBooster], false);
                if (Booster === 0) {
                    return;
                }

                Booster = (Booster - 1) | 0;
                ($t = this.hintInfors.getItem(Booster)).current = ($t.current - 1) | 0;
                this.hintInfors.getItem(Booster).SaveHintInfor();
                this.UpdateTexNumberBooster();
                this.SetBoosterType(BoosterManager.BoosterType.NONE);
            },
            /*BoosterManager.CompleteUsedBooster end.*/

            /*BoosterManager.AnimationScale start.*/
            AnimationScale: function (rect, scale, duration) {
if ( TRACE ) { TRACE( "BoosterManager#AnimationScale", this ); }

                if (duration === void 0) { duration = 0.2; }
                var scaleValue = (scale) ? 1.12 : 1.0;
                rect.transform.GetChild(0).gameObject.SetActive(scale);
                var scaleX = UIAnimation.ScaleX(rect, scaleValue, duration);
                var scaleY = UIAnimation.ScaleY(rect, scaleValue, duration);
                scaleX.Play();
                scaleY.Play();
            },
            /*BoosterManager.AnimationScale end.*/

            /*BoosterManager.AddHint start.*/
            AddHint: function (booster) {
if ( TRACE ) { TRACE( "BoosterManager#AddHint", this ); }

                var $t, $t1;
                ($t = this.hintInfors.getItem(booster)).adsCanGet = ($t.adsCanGet - 1) | 0;
                ($t1 = this.hintInfors.getItem(booster)).current = ($t1.current + 1) | 0;
                this.hintInfors.getItem(booster).SaveHintInfor();
                this.UpdateTexNumberBooster();
            },
            /*BoosterManager.AddHint end.*/

            /*BoosterManager.ActiveEffectBooster start.*/
            ActiveEffectBooster: function (blockBoard) {
if ( TRACE ) { TRACE( "BoosterManager#ActiveEffectBooster", this ); }

                var newPosition = blockBoard.transform.position.$clone();
                switch (this.boosterType) {
                    case BoosterManager.BoosterType.ONE_HORIZONTAL: 
                        newPosition.x = -4;
                        var arrow = ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterArrowObj();
                        arrow.Move(newPosition);
                        return true;
                    case BoosterManager.BoosterType.ONE_VERTICAL: 
                        newPosition.y = 15;
                        var sword = ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterSwordObj();
                        sword.Move(newPosition);
                        return true;
                    case BoosterManager.BoosterType.ONE_BLOCK_DESTROY: 
                        if (blockBoard.CanPlace) {
                            return false;
                        }
                        newPosition.x += 0.5;
                        this.hammerObj.transform.position = newPosition.$clone();
                        this.hammerObj.SetActive(true);
                        this.hammerAnimation.Play();
                        Timer.Schedule(this, 0.25, Bridge.fn.bind(this, function () {

                            ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.DestroyOneBlock(blockBoard);
                            ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.SaveNewStepWhenUseBooster();
                            this.StartCoroutine$1(ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CheckPieceCanPlaceBoard());
                        }));
                        return true;
                }

                return false;
            },
            /*BoosterManager.ActiveEffectBooster end.*/

            /*BoosterManager.OnEventUseBooster start.*/
            OnEventUseBooster: function (booster) {
if ( TRACE ) { TRACE( "BoosterManager#OnEventUseBooster", this ); }


                if (this.currentBooster >= 0) {
                    this.AnimationScale(this.rectButtonsBooster[this.currentBooster], false);
                }


                this.currentBooster = booster;
                if (this.hintInfors.getItem(booster).adsCanGet <= 0 && this.hintInfors.getItem(booster).current <= 0) {
                    return;
                }

                //Reset Scale
                switch (booster) {
                    case 0: 
                        if (this.hintInfors.getItem(booster).current > 0) {
                            this.SetBoosterType(BoosterManager.BoosterType.ONE_BLOCK_DESTROY);
                            this.AnimationScale(this.rectButtonsBooster[this.currentBooster], true);
                        } else {
                            //#//if UNITY_EDITOR
                            this.AddHint(booster);
                            //#endif
                            //Watch Ads Get Rewards
                            //GoogleMobileAdsScript.instance.ShowRewardBasedVideo(() => { AddHint(booster); });

                        }
                        break;
                    case 1: 
                        if (this.hintInfors.getItem(booster).current > 0) {
                            this.SetBoosterType(BoosterManager.BoosterType.ONE_HORIZONTAL);
                            this.AnimationScale(this.rectButtonsBooster[this.currentBooster], true);
                        } else {
                            //#if UNITY_EDITOR
                            this.AddHint(booster);
                            //#endif
                            //Watch Ads Get Rewards
                            //GoogleMobileAdsScript.instance.ShowRewardBasedVideo(() => { AddHint(booster); });
                        }
                        break;
                    case 2: 
                        if (this.hintInfors.getItem(booster).current > 0) {
                            this.SetBoosterType(BoosterManager.BoosterType.ONE_VERTICAL);

                            this.AnimationScale(this.rectButtonsBooster[this.currentBooster], true);
                        } else {
                            //#if UNITY_EDITOR
                            this.AddHint(booster);
                            //#endif
                            //Watch Ads Get Rewards
                            //GoogleMobileAdsScript.instance.ShowRewardBasedVideo(() => { AddHint(booster); });
                        }
                        break;
                    case 3: 
                        if (this.hintInfors.getItem(booster).current > 0) {
                            if (ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CanUndo()) {
                                this.SetBoosterType(BoosterManager.BoosterType.BACK);
                                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.Undo();
                                this.AnimationScale(this.rectButtonsBooster[this.currentBooster], true, 0.06);
                                Timer.Schedule(this, 0.06, Bridge.fn.bind(this, function () {
                                    this.CompleteUsedBooster(this.boosterType);
                                    this.AnimationScale(this.rectButtonsBooster[this.currentBooster], false, 0.06);
                                    this.SetBoosterType(BoosterManager.BoosterType.NONE);
                                    this.VisibleButtonUndo();
                                }));

                            }
                        } else {
                            //#if UNITY_EDITOR
                            this.AddHint(booster);
                            //#endif
                            //Watch Ads Get Rewards
                            //GoogleMobileAdsScript.instance.ShowRewardBasedVideo(() => { AddHint(booster); });
                        }
                        break;
                }
            },
            /*BoosterManager.OnEventUseBooster end.*/


        }
    });
    /*BoosterManager end.*/

    /*EffectManager start.*/
    Bridge.define("EffectManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "EffectManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(EffectManager)]; },
        fields: {
            destroyBlocks: null,
            destroyBlocksHexa: null,
            swordsDestroy: null,
            ArrowsDestroy: null,
            bombItems: null,
            effectsTime: null,
            scoresTextEffect: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "EffectManager#init", this ); }

                this.destroyBlocks = new (System.Collections.Generic.List$1(EffectObj)).ctor();
                this.destroyBlocksHexa = new (System.Collections.Generic.List$1(EffectObj)).ctor();
                this.swordsDestroy = new (System.Collections.Generic.List$1(BoosterMoveDestroy)).ctor();
                this.ArrowsDestroy = new (System.Collections.Generic.List$1(BoosterMoveDestroy)).ctor();
                this.bombItems = new (System.Collections.Generic.List$1(BombItem)).ctor();
                this.effectsTime = new (System.Collections.Generic.List$1(EffectObj)).ctor();
                this.scoresTextEffect = new (System.Collections.Generic.List$1(UnityEngine.Rigidbody2D)).ctor();
            }
        },
        methods: {
            /*EffectManager.RegisterEffectDestroyBlock start.*/
            RegisterEffectDestroyBlock: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterEffectDestroyBlock", this ); }

                for (var i = 0; i < this.destroyBlocks.Count; i = (i + 1) | 0) {
                    if (!this.destroyBlocks.getItem(i).gameObject.activeInHierarchy) {
                        this.destroyBlocks.getItem(i).gameObject.SetActive(true);
                        return this.destroyBlocks.getItem(i);
                    }
                }


                var effDestroy = UnityEngine.Object.Instantiate(EffectObj, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.effDestroyBlockPrefab);
                effDestroy.transform.SetParent(this.transform, false);
                effDestroy.Setup();
                effDestroy.gameObject.SetActive(true);
                this.destroyBlocks.add(effDestroy);
                return effDestroy;
            },
            /*EffectManager.RegisterEffectDestroyBlock end.*/

            /*EffectManager.RegisterScoreTextEffect start.*/
            RegisterScoreTextEffect: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterScoreTextEffect", this ); }

                for (var i = 0; i < this.scoresTextEffect.Count; i = (i + 1) | 0) {
                    if (!this.scoresTextEffect.getItem(i).gameObject.activeInHierarchy) {
                        this.scoresTextEffect.getItem(i).gameObject.SetActive(true);
                        return this.scoresTextEffect.getItem(i);
                    }
                }


                var scoreText = UnityEngine.Object.Instantiate(UnityEngine.Rigidbody2D, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.scoreTextEffect);
                scoreText.transform.SetParent(this.transform, false);
                scoreText.gameObject.SetActive(true);
                this.scoresTextEffect.add(scoreText);
                return scoreText;
            },
            /*EffectManager.RegisterScoreTextEffect end.*/

            /*EffectManager.RegisterEffectDestroyBlockHexa start.*/
            RegisterEffectDestroyBlockHexa: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterEffectDestroyBlockHexa", this ); }

                for (var i = 0; i < this.destroyBlocksHexa.Count; i = (i + 1) | 0) {
                    if (!this.destroyBlocksHexa.getItem(i).gameObject.activeInHierarchy) {
                        this.destroyBlocksHexa.getItem(i).gameObject.SetActive(true);
                        return this.destroyBlocksHexa.getItem(i);
                    }
                }


                var effDestroy = UnityEngine.Object.Instantiate(EffectObj, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.effDestroyBlockHexaPrefab);
                effDestroy.transform.SetParent(this.transform, false);
                effDestroy.Setup();
                effDestroy.gameObject.SetActive(true);
                this.destroyBlocksHexa.add(effDestroy);
                return effDestroy;
            },
            /*EffectManager.RegisterEffectDestroyBlockHexa end.*/

            /*EffectManager.RegisterEffectTime start.*/
            RegisterEffectTime: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterEffectTime", this ); }

                for (var i = 0; i < this.effectsTime.Count; i = (i + 1) | 0) {
                    if (!this.effectsTime.getItem(i).gameObject.activeInHierarchy) {
                        this.effectsTime.getItem(i).gameObject.SetActive(true);
                        return this.effectsTime.getItem(i);
                    }
                }


                var effTime = UnityEngine.Object.Instantiate(EffectObj, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.effectTime);
                effTime.transform.SetParent(this.transform, false);
                effTime.Setup();
                effTime.gameObject.SetActive(true);
                this.effectsTime.add(effTime);
                return effTime;
            },
            /*EffectManager.RegisterEffectTime end.*/

            /*EffectManager.RegisterSwordObj start.*/
            RegisterSwordObj: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterSwordObj", this ); }

                for (var i = 0; i < this.swordsDestroy.Count; i = (i + 1) | 0) {
                    if (!this.swordsDestroy.getItem(i).gameObject.activeInHierarchy) {
                        this.swordsDestroy.getItem(i).gameObject.SetActive(true);
                        return this.swordsDestroy.getItem(i);
                    }
                }


                var sword = UnityEngine.Object.Instantiate(BoosterMoveDestroy, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.swordPrefab);
                sword.transform.SetParent(this.transform, false);
                sword.gameObject.SetActive(true);
                sword.Setup();
                this.swordsDestroy.add(sword);
                return sword;
            },
            /*EffectManager.RegisterSwordObj end.*/

            /*EffectManager.RegisterArrowObj start.*/
            RegisterArrowObj: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterArrowObj", this ); }

                for (var i = 0; i < this.ArrowsDestroy.Count; i = (i + 1) | 0) {
                    if (!this.ArrowsDestroy.getItem(i).gameObject.activeInHierarchy) {
                        this.ArrowsDestroy.getItem(i).gameObject.SetActive(true);
                        return this.ArrowsDestroy.getItem(i);
                    }
                }


                var arrow = UnityEngine.Object.Instantiate(BoosterMoveDestroy, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.arrowPrefab);
                arrow.transform.SetParent(this.transform, false);
                arrow.Setup();
                arrow.gameObject.SetActive(true);
                this.ArrowsDestroy.add(arrow);
                return arrow;
            },
            /*EffectManager.RegisterArrowObj end.*/

            /*EffectManager.RegisterBombItem start.*/
            RegisterBombItem: function () {
if ( TRACE ) { TRACE( "EffectManager#RegisterBombItem", this ); }

                for (var i = 0; i < this.bombItems.Count; i = (i + 1) | 0) {
                    if (!this.bombItems.getItem(i).gameObject.activeInHierarchy) {
                        this.bombItems.getItem(i).gameObject.SetActive(true);
                        return this.bombItems.getItem(i);
                    }
                }


                var bomb = UnityEngine.Object.Instantiate(BombItem, ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.bombItemPrefab);
                bomb.transform.SetParent(this.transform, false);

                bomb.gameObject.SetActive(true);
                this.bombItems.add(bomb);
                return bomb;
            },
            /*EffectManager.RegisterBombItem end.*/


        }
    });
    /*EffectManager end.*/

    /*GameManager start.*/
    Bridge.define("GameManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "GameManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(GameManager)]; },
        statics: {
            fields: {
                BOARD_8X8: 0,
                BOARD_HEXA: 0,
                BOARD_10X10: 0,
                MAX_STEP_SHOW_BOMB: 0,
                MAX_STEPS_BOMB_ITEM: 0,
                MAX_FILL_TIME: 0
            },
            ctors: {
                init: function () {
if ( TRACE ) { TRACE( "GameManager#init", this ); }

                    this.BOARD_8X8 = 8;
                    this.BOARD_HEXA = 9;
                    this.BOARD_10X10 = 15;
                    this.MAX_STEP_SHOW_BOMB = 5;
                    this.MAX_STEPS_BOMB_ITEM = 9;
                    this.MAX_FILL_TIME = 10;
                }
            }
        },
        fields: {
            SCORE_ONE_BLOCK: 0,
            SCORE_DESTROY_ONE_BLOCK: 0,
            bestScoreText: null,
            currentScoreText: null,
            boardType: 0,
            gameMode: 0,
            buttonsInGame: null,
            dataInGame: null,
            gameSetting: null,
            rateURL: null,
            currentScore: 0,
            bestScore: 0,
            currentDataMode: null,
            secondChance: false,
            currentBoard: 0,
            CurrentDataGameMode: 0,
            TutorialMode: false
        },
        events: {
            SetupPlayGame: null,
            ReturnHome: null
        },
        props: {
            GetDataInGame: {
                get: function () {
if ( TRACE ) { TRACE( "GameManager#GetDataInGame#get", this ); }

                    return this.dataInGame;
                }
            },
            GetRateURL: {
                get: function () {
if ( TRACE ) { TRACE( "GameManager#GetRateURL#get", this ); }

                    return this.rateURL;
                }
            },
            GetGameSetting: {
                get: function () {
if ( TRACE ) { TRACE( "GameManager#GetGameSetting#get", this ); }

                    return this.gameSetting;
                }
            },
            GetCurrentDataMode: {
                get: function () {
if ( TRACE ) { TRACE( "GameManager#GetCurrentDataMode#get", this ); }

                    return this.currentDataMode;
                }
            },
            GetGameMode: {
                get: function () {
if ( TRACE ) { TRACE( "GameManager#GetGameMode#get", this ); }

                    return this.gameMode;
                }
            },
            GetBoardType: {
                get: function () {
if ( TRACE ) { TRACE( "GameManager#GetBoardType#get", this ); }

                    return this.boardType;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "GameManager#init", this ); }

                this.SCORE_ONE_BLOCK = 1;
                this.SCORE_DESTROY_ONE_BLOCK = 1;
                this.gameMode = GameMode.CLASSIC;
                this.buttonsInGame = new (System.Collections.Generic.List$1(UnityEngine.UI.Button)).ctor();
                this.rateURL = "https://www.google.com/";
                this.currentScore = 0;
                this.bestScore = 0;
                this.secondChance = false;
            }
        },
        methods: {
            /*GameManager.SetGameMode start.*/
            SetGameMode: function (gameMode) {
if ( TRACE ) { TRACE( "GameManager#SetGameMode", this ); }

                this.gameMode = gameMode;
            },
            /*GameManager.SetGameMode end.*/

            /*GameManager.SetBoardType start.*/
            SetBoardType: function (boardType) {
if ( TRACE ) { TRACE( "GameManager#SetBoardType", this ); }

                this.boardType = boardType;
            },
            /*GameManager.SetBoardType end.*/

            /*GameManager.Awake$1 start.*/
            Awake$1: function () {
if ( TRACE ) { TRACE( "GameManager#Awake$1", this ); }

                //Load Data
                this.LoadData();
                this.LoadSetting();
                this.gameSetting.tutorialClassic = false;
            },
            /*GameManager.Awake$1 end.*/

            /*GameManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "GameManager#Start", this ); }

                this.currentBoard = GameManager.BOARD_8X8;
                UnityEngine.Input.multiTouchEnabled = false;
            },
            /*GameManager.Start end.*/

            /*GameManager.ClearData start.*/
            ClearData: function () {
if ( TRACE ) { TRACE( "GameManager#ClearData", this ); }

                ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.VisiblePiecesInGame(false);
                this.currentDataMode.ClearData();
                //SaveDataMode();
                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.ClearData();
            },
            /*GameManager.ClearData end.*/

            /*GameManager.PlayGame start.*/
            PlayGame: function () {
if ( TRACE ) { TRACE( "GameManager#PlayGame", this ); }


                this.VisibleButton(true);
                this.currentDataMode = this.dataInGame.FindDataMode(this.CurrentDataGameMode);
                if (!Bridge.staticEquals(this.SetupPlayGame, null)) {
                    this.SetupPlayGame();
                }
                this.currentScore = this.currentDataMode.currentScore;
                this.bestScore = this.currentDataMode.bestScore;
                this.UpdateScore(0);
                this.secondChance = false;

                if (this.GetGameMode !== GameMode.HEXA) {

                    this.TutorialMode = this.GetGameSetting.tutorialClassic;

                    if (this.GetGameSetting.tutorialClassic) {
                        ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.Setup();
                        ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.ActiveTutorialClassic();
                    }

                } else {
                    this.TutorialMode = this.GetGameSetting.tutorialHexa;
                    if (this.GetGameSetting.tutorialHexa) {
                        ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.Setup();
                        ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.ActiveTutorialHexa();
                    }
                }

            },
            /*GameManager.PlayGame end.*/

            /*GameManager.GoHome start.*/
            GoHome: function () {
if ( TRACE ) { TRACE( "GameManager#GoHome", this ); }

                UnityEngine.Debug.Log$1("Go Home");
                if (!Bridge.staticEquals(this.ReturnHome, null)) {
                    this.ReturnHome();
                }

            },
            /*GameManager.GoHome end.*/

            /*GameManager.UpdateScore start.*/
            /**
             * Update Score In Game And Save Best Score
             *
             * @instance
             * @public
             * @this GameManager
             * @memberof GameManager
             * @param   {number}    score
             * @return  {void}
             */
            UpdateScore: function (score) {
if ( TRACE ) { TRACE( "GameManager#UpdateScore", this ); }

                this.currentScore = (this.currentScore + score) | 0;
                //DataInGame.CurrentScore = currentScore;
                this.bestScore = (this.currentScore > this.bestScore) ? this.currentScore : this.bestScore;
                this.currentDataMode.currentScore = this.currentScore;
                this.currentDataMode.bestScore = this.bestScore;
                //SaveDataMode();
                this.bestScoreText.text = Bridge.toString(this.bestScore);
                this.currentScoreText.text = Bridge.toString(this.currentScore);
            },
            /*GameManager.UpdateScore end.*/

            /*GameManager.ReplayGame start.*/
            ReplayGame: function () {
if ( TRACE ) { TRACE( "GameManager#ReplayGame", this ); }

                this.ClearData();
                this.PlayGame();
            },
            /*GameManager.ReplayGame end.*/

            /*GameManager.GameOverProccess start.*/
            GameOverProccess: function () {
if ( TRACE ) { TRACE( "GameManager#GameOverProccess", this ); }


                //bool watchAds = GoogleMobileAdsScript.instance.CheckRewardBasedVideo();
                //#if UNITY_EDITOR
                var watchAds = true;
                //#endif
                if (watchAds && !this.secondChance) {
                    this.secondChance = true;
                    this.SecondChance();
                } else {
                    this.GameOver();
                }

            },
            /*GameManager.GameOverProccess end.*/

            /*GameManager.GameOver start.*/
            GameOver: function () {
if ( TRACE ) { TRACE( "GameManager#GameOver", this ); }

                if (!ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.IsGameOver) {
                    return;
                }
                this.ClearData();
                if (this.GetCurrentDataMode != null) {
                    var id = ConstValue.ScoresIDGameModeAndroid.getItem(this.GetCurrentDataMode.dataGameMode);


                    //  LeaderBoardManager.Instance.ReportScore(bestScore, id);
                }
                PopUpFrameWork.PopupManager.instance.Show$1("gameOver", System.Array.init([Bridge.box(this.currentScore, System.Int32), Bridge.box(this.bestScore, System.Int32)], System.Object));
            },
            /*GameManager.GameOver end.*/

            /*GameManager.VisibleButton start.*/
            VisibleButton: function (visible) {
if ( TRACE ) { TRACE( "GameManager#VisibleButton", this ); }

                for (var i = 0; i < this.buttonsInGame.Count; i = (i + 1) | 0) {
                    this.buttonsInGame.getItem(i).interactable = visible;
                }
            },
            /*GameManager.VisibleButton end.*/

            /*GameManager.SaveDataMode start.*/
            SaveDataMode: function () {
if ( TRACE ) { TRACE( "GameManager#SaveDataMode", this ); }

                if (this.TutorialMode) {
                    return;
                }
                this.dataInGame.SaveDataMode(this.currentDataMode);
                //string data = JsonUtility.ToJson(dataInGame);
                //PlayerPrefs.SetString("DataInGame", data);
            },
            /*GameManager.SaveDataMode end.*/

            /*GameManager.SaveSetting start.*/
            SaveSetting: function () {
if ( TRACE ) { TRACE( "GameManager#SaveSetting", this ); }


                //string data = JsonUtility.ToJson(gameSetting);
                //PlayerPrefs.SetString("GameSetting", data);
            },
            /*GameManager.SaveSetting end.*/

            /*GameManager.LoadSetting start.*/
            LoadSetting: function () {
if ( TRACE ) { TRACE( "GameManager#LoadSetting", this ); }

                var dataSetting = UnityEngine.PlayerPrefs.GetString("GameSetting", "");
                if (System.String.isNullOrEmpty(dataSetting)) {
                    this.gameSetting.muteMusic = false;
                    this.gameSetting.muteMusic = false;
                    this.gameSetting.tutorialClassic = true;
                    this.gameSetting.tutorialHexa = true;
                    this.SaveSetting();
                } else {
                    //gameSetting = JsonUtility.FromJson<GameSetting>(dataSetting);

                }
            },
            /*GameManager.LoadSetting end.*/

            /*GameManager.LoadData start.*/
            LoadData: function () {
if ( TRACE ) { TRACE( "GameManager#LoadData", this ); }

                var data = UnityEngine.PlayerPrefs.GetString("DataInGame", "");

                if (System.String.isNullOrEmpty(data)) {
                    //Load Default
                    this.dataInGame.Load();

                } else {
                    //dataInGame = JsonUtility.FromJson<DataInGame>(data);
                    this.dataInGame.Load();
                }
            },
            /*GameManager.LoadData end.*/

            /*GameManager.SecondChance start.*/
            SecondChance: function () {
if ( TRACE ) { TRACE( "GameManager#SecondChance", this ); }

                PopUpFrameWork.PopupManager.instance.Show("secondChance");
            },
            /*GameManager.SecondChance end.*/


        },
        overloads: {
            "Awake()": "Awake$1"
        }
    });
    /*GameManager end.*/

    /*PopUpFrameWork.Popup start.*/
    Bridge.define("PopUpFrameWork.Popup", {
        inherits: [ScreenFrameWork.UIMonoBehaviour],
        fields: {
            canAndroidBackClosePopup: false,
            animDuration: 0,
            animType: 0,
            animCurve: null,
            animContainer: null,
            isInitialized: false,
            isShowing: false,
            callback: null
        },
        props: {
            CanAndroidBackClosePopup: {
                get: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#CanAndroidBackClosePopup#get", this ); }

                    return this.canAndroidBackClosePopup;
                }
            }
        },
        methods: {
            /*PopUpFrameWork.Popup.Initialize start.*/
            Initialize: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#Initialize", this ); }


            },
            /*PopUpFrameWork.Popup.Initialize end.*/

            /*PopUpFrameWork.Popup.Show start.*/
            Show: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#Show", this ); }

                this.Show$1(null, null);
            },
            /*PopUpFrameWork.Popup.Show end.*/

            /*PopUpFrameWork.Popup.Show$1 start.*/
            Show$1: function (inData, callback, actionCallBack) {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#Show$1", this ); }

                if (actionCallBack === void 0) { actionCallBack = null; }
                this.callback = callback;

                if (this.isShowing) {
                    return;
                }

                this.isShowing = true;

                // Show the popup object
                this.gameObject.SetActive(true);

                switch (this.animType) {
                    case PopUpFrameWork.Popup.AnimType.Fade: 
                        this.DoFadeAnim();
                        break;
                    case PopUpFrameWork.Popup.AnimType.Zoom: 
                        this.DoZoomAnim();
                        break;
                }

                this.OnShowing(inData);
                this.OnShowing$1(actionCallBack);
            },
            /*PopUpFrameWork.Popup.Show$1 end.*/

            /*PopUpFrameWork.Popup.Hide start.*/
            Hide: function (cancelled) {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#Hide", this ); }

                this.Hide$1(cancelled, null);
            },
            /*PopUpFrameWork.Popup.Hide end.*/

            /*PopUpFrameWork.Popup.Hide$1 start.*/
            Hide$1: function (cancelled, outData) {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#Hide$1", this ); }

                if (!this.isShowing) {
                    return;
                }

                this.isShowing = false;

                if (!Bridge.staticEquals(this.callback, null)) {
                    this.callback(cancelled, outData);
                }

                // Start the popup hide animations
                var anim = null;

                anim = UIAnimation.Alpha$1(this.gameObject, 1.0, 0.0, this.animDuration);
                anim.style = UIAnimation.Style.EaseOut;
                anim.startOnFirstFrame = true;

                anim.OnAnimationFinished = Bridge.fn.combine(anim.OnAnimationFinished, Bridge.fn.bind(this, function (target) {
                    this.gameObject.SetActive(false);
                }));

                anim.Play();

                this.OnHiding();
            },
            /*PopUpFrameWork.Popup.Hide$1 end.*/

            /*PopUpFrameWork.Popup.HideWithAction start.*/
            HideWithAction: function (action) {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#HideWithAction", this ); }

                this.Hide$1(false, System.Array.init([action], System.Object));
            },
            /*PopUpFrameWork.Popup.HideWithAction end.*/

            /*PopUpFrameWork.Popup.OnShowing start.*/
            OnShowing: function (inData) {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#OnShowing", this ); }


            },
            /*PopUpFrameWork.Popup.OnShowing end.*/

            /*PopUpFrameWork.Popup.OnShowing$1 start.*/
            OnShowing$1: function (unityAction) {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#OnShowing$1", this ); }


            },
            /*PopUpFrameWork.Popup.OnShowing$1 end.*/

            /*PopUpFrameWork.Popup.OnHiding start.*/
            OnHiding: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#OnHiding", this ); }

                PopUpFrameWork.PopupManager.instance.OnPopupHiding(this);
            },
            /*PopUpFrameWork.Popup.OnHiding end.*/

            /*PopUpFrameWork.Popup.DoFadeAnim start.*/
            DoFadeAnim: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#DoFadeAnim", this ); }

                // Start the popup show animations
                var anim = null;

                anim = UIAnimation.Alpha$1(this.gameObject, 0.0, 1.0, this.animDuration);
                anim.startOnFirstFrame = true;
                anim.OnAnimationFinished = null;
                anim.Play();
            },
            /*PopUpFrameWork.Popup.DoFadeAnim end.*/

            /*PopUpFrameWork.Popup.DoZoomAnim start.*/
            DoZoomAnim: function () {
if ( TRACE ) { TRACE( "PopUpFrameWork.Popup#DoZoomAnim", this ); }

                // Start the popup show animations
                var anim = null;

                anim = UIAnimation.Alpha$1(this.gameObject, 0.0, 1.0, this.animDuration);
                anim.style = UIAnimation.Style.EaseOut;
                anim.startOnFirstFrame = true;
                anim.OnAnimationFinished = null;
                anim.Play();

                anim = UIAnimation.ScaleX$1(this.animContainer, 0.0, 1.0, this.animDuration);
                anim.style = UIAnimation.Style.Custom;
                anim.animationCurve = this.animCurve;
                anim.startOnFirstFrame = true;
                anim.Play();

                anim = UIAnimation.ScaleY$1(this.animContainer, 0.0, 1.0, this.animDuration);
                anim.style = UIAnimation.Style.Custom;
                anim.animationCurve = this.animCurve;
                anim.startOnFirstFrame = true;
                anim.Play();
            },
            /*PopUpFrameWork.Popup.DoZoomAnim end.*/


        },
        overloads: {
            "Show(object[], PopupClosed, UnityAction)": "Show$1",
            "Hide(bool, object[])": "Hide$1",
            "OnShowing(UnityAction)": "OnShowing$1"
        }
    });
    /*PopUpFrameWork.Popup end.*/

    /*ScreenFrameWork.Screen start.*/
    Bridge.define("ScreenFrameWork.Screen", {
        inherits: [ScreenFrameWork.UIMonoBehaviour],
        fields: {
            id: null,
            showTransition: null,
            hideTransition: null
        },
        props: {
            Id: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#Id#get", this ); }

                    return this.id;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#init", this ); }

                this.id = "";
            }
        },
        methods: {
            /*ScreenFrameWork.Screen.Initialize start.*/
            Initialize: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#Initialize", this ); }


            },
            /*ScreenFrameWork.Screen.Initialize end.*/

            /*ScreenFrameWork.Screen.Show start.*/
            Show: function (back, immediate) {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#Show", this ); }

                this.Transition(this.showTransition, back, immediate, true);


            },
            /*ScreenFrameWork.Screen.Show end.*/

            /*ScreenFrameWork.Screen.Hide start.*/
            Hide: function (back, immediate) {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#Hide", this ); }

                this.Transition(this.hideTransition, back, immediate, false);


            },
            /*ScreenFrameWork.Screen.Hide end.*/

            /*ScreenFrameWork.Screen.Transition start.*/
            Transition: function (transitionInfo, back, immediate, show) {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#Transition", this ); }

                if (transitionInfo.animate) {
                    // Make sure the screen is showing for the animation
                    this.SetVisibility(true);

                    var animationDuration = immediate ? 0 : transitionInfo.animationDuration;

                    switch (transitionInfo.animationType) {
                        case ScreenFrameWork.Screen.TransitionInfo.Type.Fade: 
                            this.StartFadeAnimation(transitionInfo, show, animationDuration);
                            break;
                        case ScreenFrameWork.Screen.TransitionInfo.Type.Swipe: 
                            this.StartSwipeAnimation(transitionInfo, show, back, animationDuration);
                            break;
                    }

                    if (!show) {
                        if (immediate) {
                            this.SetVisibility(false);
                        }
                    }
                } else {
                    // No animations, set the screen to active or de-active
                    this.SetVisibility(show);
                }

                transitionInfo.onTransition.Invoke();
            },
            /*ScreenFrameWork.Screen.Transition end.*/

            /*ScreenFrameWork.Screen.StartFadeAnimation start.*/
            /**
             * Starts the fade screen transition animation
             *
             * @instance
             * @private
             * @this ScreenFrameWork.Screen
             * @memberof ScreenFrameWork.Screen
             * @param   {ScreenFrameWork.Screen.TransitionInfo}    transitionInfo    
             * @param   {boolean}                                  show              
             * @param   {number}                                   duration
             * @return  {void}
             */
            StartFadeAnimation: function (transitionInfo, show, duration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#StartFadeAnimation", this ); }

                var fromAlpha = show ? 0.0 : 1.0;
                var toAlpha = show ? 1.0 : 0.0;

                var anim = UIAnimation.Alpha$1(this.gameObject, fromAlpha, toAlpha, duration);

                anim.style = transitionInfo.animationStyle;
                anim.animationCurve = transitionInfo.animationCurve;
                anim.startOnFirstFrame = true;

                if (!show) {
                    anim.OnAnimationFinished = Bridge.fn.bind(this, function (obj) {
                        this.SetVisibility(false);
                    });
                } else {
                    anim.OnAnimationFinished = null;
                }

                anim.Play();
            },
            /*ScreenFrameWork.Screen.StartFadeAnimation end.*/

            /*ScreenFrameWork.Screen.StartSwipeAnimation start.*/
            /**
             * Starts the swipe screen transition animation
             *
             * @instance
             * @private
             * @this ScreenFrameWork.Screen
             * @memberof ScreenFrameWork.Screen
             * @param   {ScreenFrameWork.Screen.TransitionInfo}    transitionInfo    
             * @param   {boolean}                                  show              
             * @param   {boolean}                                  back              
             * @param   {number}                                   duration
             * @return  {void}
             */
            StartSwipeAnimation: function (transitionInfo, show, back, duration) {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#StartSwipeAnimation", this ); }

                var screenWidth = this.RectT.rect.width;
                var fromX = 0.0;
                var toX = 0.0;

                if (show && back) {
                    fromX = -screenWidth;
                    toX = 0;
                } else if (show && !back) {
                    fromX = screenWidth;
                    toX = 0;
                } else if (!show && back) {
                    fromX = 0;
                    toX = screenWidth;
                } else if (!show && !back) {
                    fromX = 0;
                    toX = -screenWidth;
                }

                var anim = UIAnimation.PositionX$1(this.RectT, fromX, toX, duration);

                anim.style = transitionInfo.animationStyle;
                anim.animationCurve = transitionInfo.animationCurve;
                anim.startOnFirstFrame = true;

                if (!show) {
                    anim.OnAnimationFinished = Bridge.fn.bind(this, function (obj) {
                        this.SetVisibility(false);
                    });
                } else {
                    anim.OnAnimationFinished = null;
                }

                anim.Play();
            },
            /*ScreenFrameWork.Screen.StartSwipeAnimation end.*/

            /*ScreenFrameWork.Screen.SetVisibility start.*/
            /**
             * Sets the visibility.
             *
             * @instance
             * @private
             * @this ScreenFrameWork.Screen
             * @memberof ScreenFrameWork.Screen
             * @param   {boolean}    isVisible
             * @return  {void}
             */
            SetVisibility: function (isVisible) {
if ( TRACE ) { TRACE( "ScreenFrameWork.Screen#SetVisibility", this ); }

                this.CG.alpha = isVisible ? 1.0 : 0.0;
                this.CG.interactable = isVisible ? true : false;
                this.CG.blocksRaycasts = isVisible ? true : false;
            },
            /*ScreenFrameWork.Screen.SetVisibility end.*/


        }
    });
    /*ScreenFrameWork.Screen end.*/

    /*PieceManager start.*/
    Bridge.define("PieceManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "PieceManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(PieceManager)]; },
        fields: {
            pointsPlaceBlock: null,
            pointsPlaceNextBlock: null,
            pieces: null,
            piecesInGame: null,
            totalPieceOnBoard: 0,
            countPieceOnBoard: 0,
            scaleDefault: 0,
            piecesContainer: null,
            predeterminedPieces: null
        },
        props: {
            GetPiecesInGame: {
                get: function () {
if ( TRACE ) { TRACE( "PieceManager#GetPiecesInGame#get", this ); }

                    return this.piecesInGame;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PieceManager#init", this ); }

                this.pointsPlaceBlock = new (System.Collections.Generic.List$1(UnityEngine.Transform)).ctor();
                this.pieces = new (System.Collections.Generic.List$1(Piece)).ctor();
                this.piecesInGame = System.Array.init(3, null, Piece);
                this.totalPieceOnBoard = 3;
                this.countPieceOnBoard = 0;
                this.scaleDefault = 32;
                this.piecesContainer = new (System.Collections.Generic.List$1(Piece)).ctor();
            }
        },
        methods: {
            /*PieceManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PieceManager#Start", this ); }

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addSetupPlayGame(Bridge.fn.cacheBind(this, this.SetupPlayGame));
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addReturnHome(Bridge.fn.cacheBind(this, this.ReturnHome));
            },
            /*PieceManager.Start end.*/

            /*PieceManager.SetupPlayGame start.*/
            SetupPlayGame: function () {
if ( TRACE ) { TRACE( "PieceManager#SetupPlayGame", this ); }

                this.piecesContainer.clear();
                this.piecesContainer.AddRange(ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.piecesClassicPrefab);
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {
                    this.piecesContainer.clear();
                    this.piecesContainer.AddRange(ScreenFrameWork.SingletonComponent$1(PrefabsManager).Instance.piecesHexaPrefab);
                } else {
                    if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {
                        return;
                    }
                }
            },
            /*PieceManager.SetupPlayGame end.*/

            /*PieceManager.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "PieceManager#ReturnHome", this ); }

                this.VisiblePiecesInGame(false);
            },
            /*PieceManager.ReturnHome end.*/

            /*PieceManager.VisiblePiecesInGame start.*/
            VisiblePiecesInGame: function (visible) {
if ( TRACE ) { TRACE( "PieceManager#VisiblePiecesInGame", this ); }

                for (var i = 0; i < this.piecesInGame.length; i = (i + 1) | 0) {
                    if (UnityEngine.MonoBehaviour.op_Equality(this.piecesInGame[i], null)) {
                        continue;
                    }
                    this.piecesInGame[i].gameObject.SetActive(visible);
                }
            },
            /*PieceManager.VisiblePiecesInGame end.*/

            /*PieceManager.PlacePieceSuccess start.*/
            PlacePieceSuccess: function (piece, destroy) {
if ( TRACE ) { TRACE( "PieceManager#PlacePieceSuccess", this ); }

                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    start, 
                    rndPiece, 
                    piecePrefab, 
                    nextPiece, 
                    pieceClone, 
                    boardFull, 
                    board, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,12], $step);
                            switch ($step) {
                                case 0: {
                                    if (destroy === void 0) { destroy = false; }
                                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.IsDrag = false;
                                    this.countPieceOnBoard = (this.countPieceOnBoard + 1) | 0;
                                    this.piecesInGame[piece.PieceIndex] = null;

                                    if (ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CurrentGameMode.IGameMode$NextPiece()) {
                                        $step = 1;
                                        continue;
                                    } else  {
                                        $step = 2;
                                        continue;
                                    }
                                }
                                case 1: {
                                    //create new piece and move to piece empty
                                    start = (piece.PieceIndex + 1) | 0;

                                    for (var i = start; i < this.piecesInGame.length; i = (i + 1) | 0) {
                                        this.piecesInGame[i].transform.SetParent(this.pointsPlaceBlock.getItem(((i - 1) | 0)), true);
                                        this.piecesInGame[i].transform.localScale = new pc.Vec3( 1, 1, 1 ).clone().scale( this.scaleDefault );
                                        LeanTween.moveLocal$2(this.piecesInGame[i].gameObject, pc.Vec3.ZERO.clone(), 0.06);
                                        this.piecesInGame[i].PieceIndex = (i - 1) | 0;
                                        this.piecesInGame[((i - 1) | 0)] = this.piecesInGame[i];
                                        this.piecesInGame[i] = null;
                                    }


                                    //Create  Piece And Move to Last place piece
                                    rndPiece = UnityEngine.Random.Range(0, this.piecesContainer.Count);
                                    piecePrefab = this.piecesContainer.getItem(rndPiece);
                                    nextPiece = this.RegisterPiece(piecePrefab, this.pointsPlaceNextBlock, false);
                                    pieceClone = this.RegisterPiece(piecePrefab, null, true);

                                    nextPiece.SetupPieceClone(pieceClone);
                                    nextPiece.transform.SetParent(this.pointsPlaceBlock.getItem(((this.pointsPlaceBlock.Count - 1) | 0)), true);
                                    nextPiece.transform.localScale = new pc.Vec3( 1, 1, 1 ).clone().scale( this.scaleDefault );
                                    nextPiece.PieceIndex = (this.piecesInGame.length - 1) | 0;
                                    LeanTween.moveLocal$2(nextPiece.gameObject, pc.Vec3.ZERO.clone(), 0.1);
                                    this.piecesInGame[((this.piecesInGame.length - 1) | 0)] = nextPiece;

                                    this.StartCoroutine$1(this.CheckPieceCanPlaceBoard());
                                    $step = 12;
                                    continue;
                                }
                                case 2: {
                                    if (!ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode) {
                                        //when place completed 3 piece create new pieces

                                        if (this.countPieceOnBoard >= this.totalPieceOnBoard) {
                                            this.countPieceOnBoard = 0;
                                            this.CreateNewPieces(false, null);
                                        }
                                    }

                                    if (!destroy) {
                                        $step = 3;
                                        continue;
                                    } 
                                    $step = 11;
                                    continue;
                                }
                                case 3: {
                                    boardFull = this.CheckBoardFull();
                                    board = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard;
                                    UnityEngine.MonoBehaviour.print("board full " + System.Boolean.toString(boardFull));
                                    if (boardFull) {
                                        $step = 4;
                                        continue;
                                    } else  {
                                        $step = 9;
                                        continue;
                                    }
                                }
                                case 4: {
                                    if (board.AnimateBoardGrow) {
                                        $step = 5;
                                        continue;
                                    } 
                                    $step = 7;
                                    continue;
                                }
                                case 5: {
                                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CanClickPiece = false;
                                    //yield return StartCoroutine(board.BoardGrowBlockAnimation());
                                    $task1 = board.BoardGrowBlockAnimation();
                                    $step = 6;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 6: {
                                    $task1.getAwaitedResult();
                                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CanClickPiece = true;
                                    $step = 7;
                                    continue;
                                }
                                case 7: {
                                    $task2 = board.NextGridSize();
                                    $step = 8;
                                    if ($task2.isCompleted()) {
                                        continue;
                                    }
                                    $task2.continue($asyncBody);
                                    return;
                                }
                                case 8: {
                                    $task2.getAwaitedResult();
                                    this.countPieceOnBoard = (this.countPieceOnBoard - 1) | 0;
                                    this.PlacePieceSuccess(piece, destroy);
                                    $step = 10;
                                    continue;
                                }
                                case 9: {
                                    this.StartCoroutine$1(this.CheckPieceCanPlaceBoard());
                                    $step = 10;
                                    continue;
                                }


                                case 12: {
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            /*PieceManager.PlacePieceSuccess end.*/

            /*PieceManager.CheckBoardFull start.*/
            CheckBoardFull: function () {
if ( TRACE ) { TRACE( "PieceManager#CheckBoardFull", this ); }

                var $t;
                var board = ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard;
                var maxPieces = board.GetBlocks.Count;
                var placedPieces = 0;
                $t = Bridge.getEnumerator(board.GetBlocks);
                try {
                    while ($t.moveNext()) {
                        var p = $t.Current;
                        if (!p.CanPlace) {
                            placedPieces = (placedPieces + 1) | 0;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (placedPieces >= maxPieces) {
                    return true;
                }

                return false;
            },
            /*PieceManager.CheckBoardFull end.*/

            /*PieceManager.Undo start.*/
            Undo: function (pieces) {
if ( TRACE ) { TRACE( "PieceManager#Undo", this ); }

                this.VisiblePiecesInGame(false);
                this.CreateNewPieces(false, pieces);
            },
            /*PieceManager.Undo end.*/

            /*PieceManager.CheckGameOver start.*/
            CheckGameOver: function () {
if ( TRACE ) { TRACE( "PieceManager#CheckGameOver", this ); }

                Timer.Schedule(this, 0.3, Bridge.fn.bind(this, function () {
                    var countPieceNull = 0;
                    for (var i = 0; i < this.piecesInGame.length; i = (i + 1) | 0) {
                        if (UnityEngine.MonoBehaviour.op_Equality(this.piecesInGame[i], null)) {
                            countPieceNull = (countPieceNull + 1) | 0;
                            continue;
                        }

                        if (this.piecesInGame[i].CanSeleted) {
                            return;
                        }
                    }

                    if (countPieceNull === this.piecesInGame.length) {
                        return;
                    }
                    ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("gameOver");
                    this.StartCoroutine$1(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GameOver());
                }));
            },
            /*PieceManager.CheckGameOver end.*/

            /*PieceManager.RegisterPiece start.*/
            RegisterPiece: function (piecePrefab, placePiece, clone) {
if ( TRACE ) { TRACE( "PieceManager#RegisterPiece", this ); }

                if (this.pieces.contains(piecePrefab)) {
                    var piece1 = this.pieces.Find(function (x) {
                        return x.GetPieceID === piecePrefab.GetPieceID;
                    });
                    if (!piece1.gameObject.activeInHierarchy) {
                        piece1.gameObject.SetActive(true);
                        return piece1;
                    }
                }


                var piece2 = UnityEngine.Object.Instantiate(Piece, piecePrefab);
                piece2.transform.SetParent(placePiece, true);
                piece2.transform.localPosition = pc.Vec3.ZERO.clone();
                piece2.transform.localScale = new pc.Vec3( 1, 1, 1 ).clone().scale( this.scaleDefault );
                piece2.Setup(!clone);
                piece2.gameObject.SetActive(true);
                this.pieces.add(piece2);
                return piece2;
            },
            /*PieceManager.RegisterPiece end.*/

            /*PieceManager.GetRandomPieceId start.*/
            GetRandomPieceId: function () {
if ( TRACE ) { TRACE( "PieceManager#GetRandomPieceId", this ); }

                return UnityEngine.Random.Range(0, this.piecesContainer.Count);
            },
            /*PieceManager.GetRandomPieceId end.*/

            /*PieceManager.CreateNewPieces start.*/
            CreateNewPieces: function (random, piecesID) {
if ( TRACE ) { TRACE( "PieceManager#CreateNewPieces", this ); }

                var $t;
                // foreach (var p in piecesInGame)
                // {
                //     if (p != null) return;
                // }
                //print("creating new pieces");
                this.countPieceOnBoard = 0;

                if (!random && piecesID == null) {
                    piecesID = this.GetNextPiecesID();
                }

                // Debug.Log("Create New Piece");
                for (var i = 0; i < this.pointsPlaceBlock.Count; i = (i + 1) | 0) {
                    var rndPiece = (random) ? UnityEngine.Random.Range(0, this.piecesContainer.Count) : piecesID[i];
                    if (!ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode) {
                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.piecesId.length === 0) {
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.piecesId = System.Array.init(3, 0, System.Int32);
                        }

                        ($t = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.piecesId)[i] = rndPiece;
                    }

                    if (rndPiece === -1) {
                        this.countPieceOnBoard = (this.countPieceOnBoard + 1) | 0;
                        this.piecesInGame[i] = null;
                        continue;
                    }

                    var piecePrefab = this.piecesContainer.getItem(rndPiece);
                    var piece = this.RegisterPiece(piecePrefab, this.pointsPlaceBlock.getItem(i), false);
                    piece.PieceIndex = i;
                    var pieceClone = this.RegisterPiece(piecePrefab, null, true);
                    piece.SetupPieceClone(pieceClone);
                    this.piecesInGame[i] = piece;
                }
            },
            /*PieceManager.CreateNewPieces end.*/

            /*PieceManager.GetNextPiecesID start.*/
            GetNextPiecesID: function () {
if ( TRACE ) { TRACE( "PieceManager#GetNextPiecesID", this ); }

                var pieces = System.Array.init([
                    0, 
                    0, 
                    0
                ], System.Int32);
                for (var i = 0; i < pieces.length; i = (i + 1) | 0) {
                    if (this.predeterminedPieces.Count > 0) {
                        pieces[i] = this.predeterminedPieces.getItem(0);
                        this.predeterminedPieces.removeAt(0);
                    } else {
                        pieces[i] = UnityEngine.Random.Range(0, this.piecesContainer.Count);
                    }
                }

                return pieces;
            },
            /*PieceManager.GetNextPiecesID end.*/

            /*PieceManager.CheckPieceCanPlaceBoard start.*/
            CheckPieceCanPlaceBoard: function () {
if ( TRACE ) { TRACE( "PieceManager#CheckPieceCanPlaceBoard", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    i,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(0.06);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    i = 0;
                                        $step = 2;
                                        continue;
                                }
                                case 2: {
                                    if ( i < this.piecesInGame.length ) {
                                            $step = 3;
                                            continue;
                                        }
                                    $step = 6;
                                    continue;
                                }
                                case 3: {
                                    if (UnityEngine.MonoBehaviour.op_Equality(this.piecesInGame[i], null)) {
                                            $step = 5;
                                            continue;
                                        }

                                        this.StartCoroutine$1(this.piecesInGame[i].CheckPieceCanPlaceBoard());
                                        $enumerator.current = new UnityEngine.WaitForSeconds(0.02);
                                        $step = 4;
                                        return true;
                                }
                                case 4: {
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    i = (i + 1) | 0;
                                    $step = 2;
                                    continue;
                                }
                                case 6: {
                                    this.CheckGameOver();

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*PieceManager.CheckPieceCanPlaceBoard end.*/


        }
    });
    /*PieceManager end.*/

    /*PlayingManager start.*/
    Bridge.define("PlayingManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "PlayingManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(PlayingManager)]; },
        fields: {
            gridInGame: null,
            currentGameState: 0,
            IsDrag: false,
            selectedPiece: null,
            boardClassic8x8: null,
            boardClassic10x10: null,
            boardHexa: null,
            currentBoard: null,
            blocksDestroy: null,
            lengthX: 0,
            lengthY: 0,
            gameModes: null,
            CurrentGameMode: null,
            TotalBlocksDestroy: 0,
            LastPiece: null,
            CanClickPiece: false,
            IsGameOver: false
        },
        props: {
            GetCurrentBoard: {
                get: function () {
if ( TRACE ) { TRACE( "PlayingManager#GetCurrentBoard#get", this ); }

                    return this.currentBoard;
                }
            },
            TotalLineDestroy: {
                get: function () {
if ( TRACE ) { TRACE( "PlayingManager#TotalLineDestroy#get", this ); }

                    return Math.round(ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.TotalBlocksDestroy / ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.GetCurrentBoard.GetWidth);
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "PlayingManager#init", this ); }

                this.currentGameState = GameState.NONE;
                this.blocksDestroy = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                this.lengthX = 0;
                this.lengthY = 0;
                this.gameModes = new (System.Collections.Generic.List$1(IGameMode)).ctor();
            }
        },
        methods: {
            /*PlayingManager.Awake$1 start.*/
            Awake$1: function () {
if ( TRACE ) { TRACE( "PlayingManager#Awake$1", this ); }

                UnityEngine.Application.targetFrameRate = 60;
            },
            /*PlayingManager.Awake$1 end.*/

            /*PlayingManager.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "PlayingManager#Update", this ); }

                this.SelectedAndDragPiece();
            },
            /*PlayingManager.Update end.*/

            /*PlayingManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "PlayingManager#Start", this ); }


                this.currentGameState = GameState.NONE;
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addSetupPlayGame(Bridge.fn.cacheBind(this, this.SetupPlayGame));
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addReturnHome(Bridge.fn.cacheBind(this, this.ReturnHome));
            },
            /*PlayingManager.Start end.*/

            /*PlayingManager.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "PlayingManager#ReturnHome", this ); }

                UnityEngine.Debug.Log$1("Setting dotween capacity to 500/50");
                DG.Tweening.DOTween.SetTweensCapacity(500, 50);

                this.IsDrag = false;
                this.CurrentGameMode.IGameMode$ReturnHome();
            },
            /*PlayingManager.ReturnHome end.*/

            /*PlayingManager.SetupPlayGame start.*/
            SetupPlayGame: function () {
if ( TRACE ) { TRACE( "PlayingManager#SetupPlayGame", this ); }

                this.CanClickPiece = true;
                this.IsGameOver = true;
                this.lengthX = 8;
                this.lengthY = 8;
                this.currentBoard = this.boardClassic8x8;
                switch (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType) {
                    case BoardType.Classic_10x10: 
                        this.lengthX = GameManager.BOARD_10X10;
                        this.lengthY = GameManager.BOARD_10X10;
                        this.currentBoard = this.boardClassic10x10;
                        break;
                    case BoardType.Hexa: 
                        this.lengthX = GameManager.BOARD_HEXA;
                        this.lengthY = GameManager.BOARD_HEXA;
                        this.currentBoard = this.boardHexa;
                        break;
                }
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.currentBoard = this.lengthX;
                this.gridInGame = System.Array.create(null, null, BlockBoard, this.lengthX, this.lengthY);
                var count = 0;
                for (var x = 0; x < this.lengthX; x = (x + 1) | 0) {
                    for (var y = 0; y < this.lengthY; y = (y + 1) | 0) {

                        this.gridInGame.set([x, y], null);
                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {
                            this.gridInGame.set([x, y], (!this.currentBoard.GetAllBlocks.getItem(count).gameObject.activeInHierarchy) ? this.currentBoard.GetAllBlocks.getItem(count) : null);
                        }
                        count = (count + 1) | 0;
                    }

                }
                this.currentBoard.Reset();
                this.StartCoroutine$1(this.ResumeGame());

                this.IsDrag = false;
                this.CurrentGameMode = this.gameModes.Find(function (x1) {
                    return x1.IGameMode$GetGameMode() === ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode;
                });
                this.CurrentGameMode.IGameMode$Setup();

                this.SetNewPieces();



            },
            /*PlayingManager.SetupPlayGame end.*/

            /*PlayingManager.SetNewPieces start.*/
            SetNewPieces: function () {
if ( TRACE ) { TRACE( "PlayingManager#SetNewPieces", this ); }

                if (!ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode) {

                    // if (GameManager.Instance.GetCurrentDataMode.piecesId.Length == 0)
                    // {
                    //     GameManager.Instance.GetCurrentDataMode.piecesId = new int[3];
                    //     for (int i = 0; i < GameManager.Instance.GetCurrentDataMode.piecesId.Length; i++)
                    //     {
                    //         GameManager.Instance.GetCurrentDataMode.piecesId[i] = 0;
                    //     }
                    // }



                    //PieceManager.Instance.CreateNewPieces(false, GameManager.Instance.GetCurrentDataMode.piecesId);
                    ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CreateNewPieces(false, null);

                    this.StartCoroutine$1(ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CheckPieceCanPlaceBoard());
                }
            },
            /*PlayingManager.SetNewPieces end.*/

            /*PlayingManager.ResumeGame start.*/
            ResumeGame: function () {
if ( TRACE ) { TRACE( "PlayingManager#ResumeGame", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    currentDataMode,
                    blockboard,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForEndOfFrame();
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    currentDataMode = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode;


                                        for (var i = 0; i < currentDataMode.blocksModeIndex.Count; i = (i + 1) | 0) {
                                            blockboard = this.currentBoard.VisibleBlock(currentDataMode.blocksModeIndex.getItem(i), true);
                                            this.gridInGame.set([blockboard.x, blockboard.y], blockboard);
                                        }

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*PlayingManager.ResumeGame end.*/

            /*PlayingManager.SelectedAndDragPiece start.*/
            SelectedAndDragPiece: function () {
if ( TRACE ) { TRACE( "PlayingManager#SelectedAndDragPiece", this ); }

                var mousePosition = UnityEngine.Camera.main.ScreenToWorldPoint(UnityEngine.Input.mousePosition);

                // Create a ray from the camera to the mouse position
                var ray = UnityEngine.Camera.main.ScreenPointToRay(UnityEngine.Input.mousePosition);
                var raycastHit = { v : new UnityEngine.RaycastHit() };
                var useBooster = (ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.GetBoosterType !== BoosterManager.BoosterType.NONE);

                if (!this.CanClickPiece) {
                    return;
                }

                if (UnityEngine.Input.GetMouseButtonDown(0)) {
                    this.IsDrag = true;
                    if (UnityEngine.MonoBehaviour.op_Inequality(this.selectedPiece, null)) {
                        return;
                    }

                    if (useBooster) {
                        if (UnityEngine.Physics.Raycast$1(ray, raycastHit) && raycastHit.v.transform.gameObject.CompareTag("Block")) {
                            if (ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.ActiveEffectBooster(raycastHit.v.collider.GetComponent(BlockBoard))) {
                                ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.CompleteUsedBooster(ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.GetBoosterType);
                            }
                            return;
                        }
                    }

                    // Raycast to find the piece under the mouse pointer
                    if (UnityEngine.Physics.Raycast$1(ray, raycastHit) && raycastHit.v.transform.gameObject.CompareTag("Piece")) {
                        if (useBooster) {
                            useBooster = false;
                            ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.OnEventBoosterCancel();
                        }
                        this.selectedPiece = raycastHit.v.collider.gameObject.GetComponent(Piece);
                        if (!this.selectedPiece.CanSeleted) {
                            this.selectedPiece = null;
                            return;
                        }

                        ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.Clicked(true);
                        ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("block_selected");
                        this.selectedPiece.SetSelected(true);
                        this.selectedPiece.SetSelectPosition(this.selectedPiece.transform.position.$clone());
                    }
                }

                if (this.IsDrag) {
                    if (UnityEngine.MonoBehaviour.op_Inequality(this.selectedPiece, null)) {
                        // Update the selected piece's position based on the mouse position
                        var newPosition = new pc.Vec3( mousePosition.x, mousePosition.y, this.selectedPiece.transform.position.z );
                        //selectedPiece.transform.position = newPosition;
                        this.selectedPiece.SetSelectPosition(newPosition.$clone());
                    } else {
                        if (UnityEngine.Physics.Raycast$1(ray, raycastHit) && raycastHit.v.transform.gameObject.CompareTag("Piece")) {
                            if (useBooster) {
                                useBooster = false;
                                ScreenFrameWork.SingletonComponent$1(BoosterManager).Instance.OnEventBoosterCancel();
                            }
                            this.selectedPiece = raycastHit.v.collider.gameObject.GetComponent(Piece);
                            if (!this.selectedPiece.CanSeleted) {
                                this.selectedPiece = null;
                                return;
                            }

                            ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("block_selected");
                            this.selectedPiece.SetSelected(true);
                            this.selectedPiece.SetSelectPosition(this.selectedPiece.transform.position.$clone());
                        }
                    }
                }

                if (UnityEngine.Input.GetMouseButtonUp(0) && UnityEngine.MonoBehaviour.op_Inequality(this.selectedPiece, null)) {
                    ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.Clicked(false);
                    this.selectedPiece.SetSelected(false);
                    this.selectedPiece = null;
                    this.IsDrag = false;
                }
            },
            /*PlayingManager.SelectedAndDragPiece end.*/

            /*PlayingManager.AddGameMode start.*/
            AddGameMode: function (gameMode) {
if ( TRACE ) { TRACE( "PlayingManager#AddGameMode", this ); }

                this.gameModes.add(gameMode);
            },
            /*PlayingManager.AddGameMode end.*/

            /*PlayingManager.DestroyOneBlock start.*/
            DestroyOneBlock: function (blockDestroy) {
if ( TRACE ) { TRACE( "PlayingManager#DestroyOneBlock", this ); }


                if (!blockDestroy.gameObject.activeInHierarchy) {
                    return;
                }
                var effDestroy = (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode === GameMode.HEXA) ? ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterEffectDestroyBlockHexa() : ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterEffectDestroyBlock();
                blockDestroy.DestroyAnimation(false);
                effDestroy.Play();
                var position = blockDestroy.transform.position.$clone();
                position.z = -2;
                effDestroy.transform.position = blockDestroy.transform.position.$clone();
                this.gridInGame.set([blockDestroy.x, blockDestroy.y], null);
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.UpdateScore(ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SCORE_DESTROY_ONE_BLOCK);
                this.blocksDestroy.add(blockDestroy);
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode === GameMode.HEXA) {
                    ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("destroy_hexa");
                } else {
                    ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("destroy_square");
                }

            },
            /*PlayingManager.DestroyOneBlock end.*/

            /*PlayingManager.SaveNewStepWhenUseBooster start.*/
            SaveNewStepWhenUseBooster: function () {
if ( TRACE ) { TRACE( "PlayingManager#SaveNewStepWhenUseBooster", this ); }



                var currentDataMode = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode;
                var lastStep = currentDataMode.dataPlacePieces.getItem(((currentDataMode.dataPlacePieces.Count - 1) | 0));
                var newLasetStep = new DataPlacePiece();
                newLasetStep.blocksHideIndex.clear();
                for (var i = 0; i < this.blocksDestroy.Count; i = (i + 1) | 0) {
                    if (currentDataMode.blocksModeIndex.contains(this.blocksDestroy.getItem(i).blockIndex)) {
                        currentDataMode.blocksModeIndex.remove(this.blocksDestroy.getItem(i).blockIndex);
                        newLasetStep.blocksShowIndex.add(this.blocksDestroy.getItem(i).blockIndex);
                    }
                }
                currentDataMode.AddDataPlacePiece(newLasetStep);
                //GameManager.Instance.SaveDataMode();
            },
            /*PlayingManager.SaveNewStepWhenUseBooster end.*/

            /*PlayingManager.DestroyBlock start.*/
            DestroyBlock: function (blocksDestroy, secondChance, updateAction) {
if ( TRACE ) { TRACE( "PlayingManager#DestroyBlock", this ); }

                if (secondChance === void 0) { secondChance = false; }
                if (updateAction === void 0) { updateAction = true; }
                UnityEngine.Debug.Log$1("Destroy Block");
                Timer.Schedule(this, 0.02, Bridge.fn.bind(this, function () {

                    this.TotalBlocksDestroy = blocksDestroy.Count;
                    var score = 0;
                    for (var i = 0; i < blocksDestroy.Count; i = (i + 1) | 0) {
                        if (!blocksDestroy.getItem(i).gameObject.activeInHierarchy) {
                            continue;
                        }
                        score = (score + 1) | 0;
                        var effDestroy = (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode === GameMode.HEXA) ? ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterEffectDestroyBlockHexa() : ScreenFrameWork.SingletonComponent$1(EffectManager).Instance.RegisterEffectDestroyBlock();
                        blocksDestroy.getItem(i).DestroyAnimation(true);
                        effDestroy.Play();
                        var position = blocksDestroy.getItem(i).transform.position.$clone();
                        position.z = -2;
                        effDestroy.transform.position = position.$clone();
                        ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode.blocksModeIndex.remove(blocksDestroy.getItem(i).blockIndex);
                        this.gridInGame.set([blocksDestroy.getItem(i).x, blocksDestroy.getItem(i).y], null);
                    }
                    if (blocksDestroy.Count > 0) {
                        if (updateAction) {
                            this.CurrentGameMode.IGameMode$ActionDestroyBlock();
                        }
                        if (!secondChance) {

                            /* 
                            Rigidbody2D scoreText = EffectManager.Instance.RegisterScoreTextEffect();
                            TextMeshProUGUI text = scoreText.GetComponentInChildren<TextMeshProUGUI>();
                            Image textImage = scoreText.GetComponentInChildren<Image>();
                            print("8");
                            SpriteManager.Instance.ShowTextEffect(textImage, TotalLineDestroy - 1, LastPiece.position);
                            text.text = score.ToString();
                            scoreText.transform.position = LastPiece.position;
                            scoreText.isKinematic = false;
                            scoreText.gravityScale = 6f;
                            scoreText.AddForce(new Vector2(UnityEngine.Random.Range(-2f, 2f), UnityEngine.Random.Range(22f, 23f)), ForceMode2D.Impulse);
                            scoreText.AddTorque(UnityEngine.Random.Range(-.1f, .1f), ForceMode2D.Impulse);
                            */



                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.UpdateScore(score);
                            //show text effect

                        }


                        this.StartCoroutine$1(ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CheckPieceCanPlaceBoard());




                        //audio
                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode === GameMode.HEXA) {
                            ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("destroy_hexa");
                        } else {
                            ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.SoundPlayOneShot("destroy_square");
                        }
                    }
                    if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode) {

                        ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.EndStep();

                    }
                    Timer.Schedule(this, 1.0, function () {
                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {
                            if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialHexa) {
                                ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.ActiveTutorialHexa();

                            }
                        } else {
                            if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {

                                ScreenFrameWork.SingletonComponent$1(TutorialManager).Instance.ActiveTutorialClassic();

                            }
                        }
                    });
                    ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CurrentGameMode.IGameMode$ActionPlacePiece();
                    //GameManager.Instance.SaveDataMode();
                }));



            },
            /*PlayingManager.DestroyBlock end.*/

            /*PlayingManager.DestroyBlocksFall start.*/
            DestroyBlocksFall: function () {
if ( TRACE ) { TRACE( "PlayingManager#DestroyBlocksFall", this ); }

                var blocksDestroy = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                for (var i = 0; i < this.currentBoard.GetWidth; i = (i + 1) | 0) {
                    var countFullBlock = 0;
                    for (var j = 0; j < this.currentBoard.GetWidth; j = (j + 1) | 0) {
                        if (UnityEngine.MonoBehaviour.op_Equality(this.gridInGame.get([i, j]), null)) {
                            break;
                        }
                        countFullBlock = (countFullBlock + 1) | 0;
                    }

                    if (countFullBlock === this.currentBoard.GetWidth) {
                        for (var j1 = 0; j1 < this.currentBoard.GetWidth; j1 = (j1 + 1) | 0) {
                            blocksDestroy.add(this.gridInGame.get([i, j1]));


                        }
                    }
                }
                this.DestroyBlock(blocksDestroy, false, false);
            },
            /*PlayingManager.DestroyBlocksFall end.*/

            /*PlayingManager.DestroyBlockSecondChance start.*/
            DestroyBlockSecondChance: function () {
if ( TRACE ) { TRACE( "PlayingManager#DestroyBlockSecondChance", this ); }

                Timer.Schedule(this, 0.4, Bridge.fn.bind(this, function () {
                    this.IsGameOver = true;
                }));
                this.CanClickPiece = true;
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(true);
                var start = Math.floor(this.lengthX / 4);
                var end = (this.lengthX - start) | 0;

                var blocksDestroy = new (System.Collections.Generic.List$1(BlockBoard)).ctor();
                for (var x = start; x < end; x = (x + 1) | 0) {
                    for (var y = 0; y < this.lengthY; y = (y + 1) | 0) {
                        if (UnityEngine.MonoBehaviour.op_Inequality(this.gridInGame.get([x, y]), null)) {
                            blocksDestroy.add(this.gridInGame.get([x, y]));
                        }
                    }
                }

                this.DestroyBlock(blocksDestroy, true, false);
                this.currentBoard.SetBlockImage(ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.GetBlockShow2D.getItem(0));



                this.CurrentGameMode.IGameMode$Reset();
            },
            /*PlayingManager.DestroyBlockSecondChance end.*/

            /*PlayingManager.ClearData start.*/
            ClearData: function () {
if ( TRACE ) { TRACE( "PlayingManager#ClearData", this ); }

                this.CurrentGameMode.IGameMode$Reset();
            },
            /*PlayingManager.ClearData end.*/

            /*PlayingManager.CanUndo start.*/
            CanUndo: function () {
if ( TRACE ) { TRACE( "PlayingManager#CanUndo", this ); }

                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic) {
                    return false;
                }
                var currentDataMode = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode;
                if (currentDataMode.dataPlacePieces.Count <= 0) {
                    return false;
                }
                return true;
            },
            /*PlayingManager.CanUndo end.*/

            /*PlayingManager.Undo start.*/
            Undo: function () {
if ( TRACE ) { TRACE( "PlayingManager#Undo", this ); }

                var currentDataMode = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetCurrentDataMode;
                var lastStep = currentDataMode.dataPlacePieces.getItem(((currentDataMode.dataPlacePieces.Count - 1) | 0));

                if (lastStep.DestroyLine) {
                    currentDataMode.blocksModeIndex.clear();

                    for (var i = 0; i < lastStep.blocksHideIndex.Count; i = (i + 1) | 0) {
                        var blockBoard = this.currentBoard.VisibleBlock(lastStep.blocksHideIndex.getItem(i), false);
                        this.gridInGame.set([blockBoard.x, blockBoard.y], null);
                    }

                    for (var i1 = 0; i1 < lastStep.blocksShowIndex.Count; i1 = (i1 + 1) | 0) {
                        var blockBoard1 = this.currentBoard.VisibleBlock(lastStep.blocksShowIndex.getItem(i1), true);
                        currentDataMode.blocksModeIndex.add(lastStep.blocksShowIndex.getItem(i1));
                        this.gridInGame.set([blockBoard1.x, blockBoard1.y], blockBoard1);
                    }
                } else {
                    //Hide Block Image In Board
                    for (var i2 = 0; i2 < lastStep.blocksHideIndex.Count; i2 = (i2 + 1) | 0) {
                        currentDataMode.blocksModeIndex.remove(lastStep.blocksHideIndex.getItem(i2));
                        var blockBoard2 = this.currentBoard.VisibleBlock(lastStep.blocksHideIndex.getItem(i2), false);
                        this.gridInGame.set([blockBoard2.x, blockBoard2.y], null);
                    }
                }
                ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.Undo(lastStep.pieces);




                //Remove last Step
                currentDataMode.dataPlacePieces.remove(lastStep);
                //GameManager.Instance.SaveDataMode();
            },
            /*PlayingManager.Undo end.*/


        },
        overloads: {
            "Awake()": "Awake$1"
        }
    });
    /*PlayingManager end.*/

    /*PrefabsManager start.*/
    Bridge.define("PrefabsManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "PrefabsManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(PrefabsManager)]; },
        fields: {
            blockPrefab: null,
            blockHexaPrefab: null,
            effDestroyBlockPrefab: null,
            effDestroyBlockHexaPrefab: null,
            swordPrefab: null,
            scoreTextEffect: null,
            arrowPrefab: null,
            bombItemPrefab: null,
            effectTime: null,
            piecesClassicPrefab: null,
            piecesHexaPrefab: null
        }
    });
    /*PrefabsManager end.*/
    /** @namespace System */

    /**
     * @memberof System
     * @callback System.Action
     * @param   {string}    arg1    
     * @param   {string}    arg2
     * @return  {void}
     */


    /*ScreenFrameWork.ScreenManager start.*/
    Bridge.define("ScreenFrameWork.ScreenManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager)]; },
        fields: {
            homeScreenId: null,
            screens: null,
            backStack: null,
            currentScreen: null,
            isAnimating: false,
            /**
             * Invoked when the ScreenController is transitioning from one screen to another. The first argument is the current showing screen id, the
             second argument is the screen id of the screen that is about to show (null if its the first screen). The third argument id true if the screen
             that is being show is an overlay
             *
             * @instance
             * @public
             * @memberof ScreenFrameWork.ScreenManager
             * @type System.Action
             */
            OnSwitchingScreens: null,
            /**
             * Invoked when ShowScreen is called
             *
             * @instance
             * @public
             * @memberof ScreenFrameWork.ScreenManager
             * @type System.Action
             */
            OnShowingScreen: null
        },
        props: {
            MainScreen: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#MainScreen#get", this ); }

                    return System.String.equals(this.CurrentScreenId, "menu");
                }
            },
            HomeScreenId: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#HomeScreenId#get", this ); }

                    return this.homeScreenId;
                }
            },
            CurrentScreenId: {
                get: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#CurrentScreenId#get", this ); }

                    return UnityEngine.MonoBehaviour.op_Equality(this.currentScreen, null) ? "" : this.currentScreen.Id;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#init", this ); }

                this.homeScreenId = "main";
            }
        },
        methods: {
            /*ScreenFrameWork.ScreenManager.Awake start.*/
            Awake: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#Awake", this ); }

                ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).prototype.Awake.call(this);

                this.backStack = new (System.Collections.Generic.List$1(System.String)).ctor();

                // Initialize and hide all the screens
                for (var i = 0; i < this.screens.Count; i = (i + 1) | 0) {
                    var screen = this.screens.getItem(i);

                    // Add a CanvasGroup to the screen if it does not already have one
                    if (UnityEngine.MonoBehaviour.op_Equality(screen.gameObject.GetComponent(UnityEngine.CanvasGroup), null)) {
                        screen.gameObject.AddComponent(UnityEngine.CanvasGroup);
                    }

                    // Force all screens to hide right away
                    screen.Initialize();
                    screen.gameObject.SetActive(true);
                    screen.Hide(false, true);
                }

                // Show the home screen when the app starts up
                this.Show$1(this.homeScreenId, false, true);
            },
            /*ScreenFrameWork.ScreenManager.Awake end.*/

            /*ScreenFrameWork.ScreenManager.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#Update", this ); }

                //Back = Key
                if (UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Escape)) {
                    if (this.MainScreen) {
                        UnityEngine.Debug.Log$1("Quit Game");
                        UnityEngine.Application.Quit();
                    } else {
                        if (this.backStack.Count > 0) {
                            this.Back(this.backStack.getItem(((this.backStack.Count - 1) | 0)));
                        }
                    }
                }
            },
            /*ScreenFrameWork.ScreenManager.Update end.*/

            /*ScreenFrameWork.ScreenManager.Show start.*/
            Show: function (screenId) {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#Show", this ); }


                if (Bridge.referenceEquals(this.CurrentScreenId, screenId)) {
                    return;
                }

                this.Show$1(screenId, false, false);
            },
            /*ScreenFrameWork.ScreenManager.Show end.*/

            /*ScreenFrameWork.ScreenManager.Show$1 start.*/
            Show$1: function (screenId, back, immediate) {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#Show$1", this ); }

                //Debug.Log("[ScreenController] Showing screen " + screenId);

                // Get the screen we want to show
                var screen = this.GetScreenById(screenId);

                if (UnityEngine.MonoBehaviour.op_Equality(screen, null)) {
                    UnityEngine.Debug.LogError$2("[ScreenController] Could not find screen with the given screenId: " + (screenId || ""));

                    return;
                }

                // Check if there is a current screen showing
                if (UnityEngine.MonoBehaviour.op_Inequality(this.currentScreen, null)) {
                    // Hide the current screen
                    this.currentScreen.Hide(back, immediate);

                    if (!back) {
                        if (!this.backStack.contains(this.currentScreen.Id)) {
                            this.backStack.add(this.currentScreen.Id);
                        }
                    }

                    if (!Bridge.staticEquals(this.OnSwitchingScreens, null)) {
                        this.OnSwitchingScreens(this.currentScreen.Id, screenId);
                    }
                }

                // Show the new screen
                screen.Show(back, immediate);

                // Set the new screen as the current screen
                this.currentScreen = screen;

                if (!Bridge.staticEquals(this.OnShowingScreen, null)) {
                    this.OnShowingScreen(screenId);
                }
            },
            /*ScreenFrameWork.ScreenManager.Show$1 end.*/

            /*ScreenFrameWork.ScreenManager.Back start.*/
            Back: function (scene) {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#Back", this ); }


                if (this.backStack.Count <= 0) {
                    UnityEngine.Debug.LogWarning$1("[ScreenController] There is no screen on the back stack to go back to.");
                    return;
                }

                if (!Bridge.referenceEquals(scene, "")) {

                    this.Show$1(scene, true, false);
                    // Remove the screen from the back stack
                    this.backStack.removeAt(((this.backStack.Count - 1) | 0));
                    return;
                }
                /* 
                // Get the screen id for the screen at the end of the stack (The last shown screen)
                string screenId = backStack[backStack.Count - 1];


                			
                			backStack.RemoveAt(backStack.Count - 1);



                   // Show the screen
                Show(screenId, true, false);
                */

            },
            /*ScreenFrameWork.ScreenManager.Back end.*/

            /*ScreenFrameWork.ScreenManager.Home start.*/
            Home: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#Home", this ); }

                if (Bridge.referenceEquals(this.CurrentScreenId, this.homeScreenId)) {
                    return;
                }

                this.Show$1(this.homeScreenId, true, false);
                this.ClearBackStack();
            },
            /*ScreenFrameWork.ScreenManager.Home end.*/

            /*ScreenFrameWork.ScreenManager.ClearBackStack start.*/
            ClearBackStack: function () {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#ClearBackStack", this ); }

                this.backStack.clear();
            },
            /*ScreenFrameWork.ScreenManager.ClearBackStack end.*/

            /*ScreenFrameWork.ScreenManager.GetScreenById start.*/
            GetScreenById: function (id) {
if ( TRACE ) { TRACE( "ScreenFrameWork.ScreenManager#GetScreenById", this ); }

                for (var i = 0; i < this.screens.Count; i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(id, this.screens.getItem(i).Id)) {
                        return this.screens.getItem(i);
                    }
                }

                UnityEngine.Debug.LogError$2("[ScreenTransitionController] No Screen exists with the id " + (id || ""));

                return null;
            },
            /*ScreenFrameWork.ScreenManager.GetScreenById end.*/


        },
        overloads: {
            "Show(string, bool, bool)": "Show$1"
        }
    });
    /*ScreenFrameWork.ScreenManager end.*/

    /*SoundManager start.*/
    Bridge.define("SoundManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "SoundManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(SoundManager)]; },
        fields: {
            soundClipInfors: null,
            musicSource: null,
            soundSource: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SoundManager#init", this ); }

                this.soundClipInfors = new (System.Collections.Generic.List$1(SoundClipInfor)).ctor();
            }
        },
        methods: {
            /*SoundManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "SoundManager#Start", this ); }

                this.MuteSource(false);
                this.MuteSource(true);
            },
            /*SoundManager.Start end.*/

            /*SoundManager.MuteSource start.*/
            MuteSource: function (sound) {
if ( TRACE ) { TRACE( "SoundManager#MuteSource", this ); }

                if (sound) {
                    this.soundSource.mute = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteSound;
                } else {
                    this.musicSource.mute = ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteMusic;
                }
            },
            /*SoundManager.MuteSource end.*/

            /*SoundManager.ButtonClickedSound start.*/
            ButtonClickedSound: function () {
if ( TRACE ) { TRACE( "SoundManager#ButtonClickedSound", this ); }

                var button = this.soundClipInfors.Find(function (x) {
                    return System.String.equals(x.id, "Button");
                });
                this.soundSource.PlayOneShot(button.audioClip);
            },
            /*SoundManager.ButtonClickedSound end.*/

            /*SoundManager.SoundPlayOneShot start.*/
            SoundPlayOneShot: function (nameSound) {
if ( TRACE ) { TRACE( "SoundManager#SoundPlayOneShot", this ); }

                var button = this.soundClipInfors.Find(function (x) {
                    return System.String.equals(x.id, nameSound);
                });
                this.soundSource.PlayOneShot(button.audioClip);
            },
            /*SoundManager.SoundPlayOneShot end.*/


        }
    });
    /*SoundManager end.*/

    /*SpriteManager start.*/
    Bridge.define("SpriteManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "SpriteManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(SpriteManager)]; },
        fields: {
            blocksContainer3D: null,
            blocksContainer2D: null,
            blockShow2D: null,
            blockShow3D: null,
            textEffects: null,
            blockColorSprites: null,
            blockGemSprites: null
        },
        props: {
            GetBlockShow2D: {
                get: function () {
if ( TRACE ) { TRACE( "SpriteManager#GetBlockShow2D#get", this ); }

                    return this.blockShow2D;
                }
            },
            GetBlocksShow3D: {
                get: function () {
if ( TRACE ) { TRACE( "SpriteManager#GetBlocksShow3D#get", this ); }

                    return this.blockShow3D;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SpriteManager#init", this ); }

                this.blocksContainer3D = new (System.Collections.Generic.List$1(UnityEngine.Sprite)).ctor();
                this.blocksContainer2D = new (System.Collections.Generic.List$1(UnityEngine.Sprite)).ctor();
                this.blockShow2D = new (System.Collections.Generic.List$1(UnityEngine.Sprite)).ctor();
                this.blockShow3D = new (System.Collections.Generic.List$1(UnityEngine.Sprite)).ctor();
                this.textEffects = new (System.Collections.Generic.List$1(UnityEngine.Sprite)).ctor();
            }
        },
        methods: {
            /*SpriteManager.ShowTextEffect start.*/
            ShowTextEffect: function (textImage, index, position) {
if ( TRACE ) { TRACE( "SpriteManager#ShowTextEffect", this ); }

                if (index > ((this.textEffects.Count - 1) | 0)) {
                    index = (this.textEffects.Count - 1) | 0;
                }
                textImage.sprite = this.textEffects.getItem(index);
            },
            /*SpriteManager.ShowTextEffect end.*/

            /*SpriteManager.SetupImage start.*/
            SetupImage: function () {
if ( TRACE ) { TRACE( "SpriteManager#SetupImage", this ); }

                this.blockShow2D.clear();
                this.blockShow3D.clear();
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType === BoardType.Hexa) {
                    this.blockShow2D.add(this.blocksContainer2D.getItem(2));
                    this.blockShow2D.add(this.blocksContainer2D.getItem(3));

                    this.blockShow3D.add(this.blocksContainer3D.getItem(2));
                    this.blockShow3D.add(this.blocksContainer3D.getItem(3));
                } else {
                    this.blockShow2D.add(this.blocksContainer2D.getItem(0));
                    this.blockShow2D.add(this.blocksContainer2D.getItem(1));

                    this.blockShow3D.add(this.blocksContainer3D.getItem(0));
                    this.blockShow3D.add(this.blocksContainer3D.getItem(1));
                }
            },
            /*SpriteManager.SetupImage end.*/

            /*SpriteManager.GetSpriteByColor start.*/
            GetSpriteByColor: function (col) {
if ( TRACE ) { TRACE( "SpriteManager#GetSpriteByColor", this ); }

                var spr = this.blockColorSprites[7];

                switch (col) {
                    case BlockColor.Purple: 
                        spr = this.blockColorSprites[0];
                        break;
                    case BlockColor.Blue: 
                        spr = this.blockColorSprites[1];
                        break;
                    case BlockColor.Cyan: 
                        spr = this.blockColorSprites[2];
                        break;
                    case BlockColor.Green: 
                        spr = this.blockColorSprites[3];
                        break;
                    case BlockColor.Yellow: 
                        spr = this.blockColorSprites[4];
                        break;
                    case BlockColor.Orange: 
                        spr = this.blockColorSprites[5];
                        break;
                    case BlockColor.Red: 
                        spr = this.blockColorSprites[6];
                        break;
                    case BlockColor.White: 
                        spr = this.blockColorSprites[7];
                        break;
                    case BlockColor.Brown: 
                        spr = this.blockColorSprites[8];
                        break;
                }

                return spr;
            },
            /*SpriteManager.GetSpriteByColor end.*/

            /*SpriteManager.GetGemSpriteByColor start.*/
            GetGemSpriteByColor: function (col) {
if ( TRACE ) { TRACE( "SpriteManager#GetGemSpriteByColor", this ); }

                var spr = null;

                switch (col) {
                    case BlockGemColor.Empty: 
                        spr = null;
                        break;
                    case BlockGemColor.Cyan: 
                        spr = this.blockGemSprites[0];
                        break;
                    case BlockGemColor.Red: 
                        spr = this.blockGemSprites[1];
                        break;
                    case BlockGemColor.Purple: 
                        spr = this.blockGemSprites[2];
                        break;
                }

                return spr;
            },
            /*SpriteManager.GetGemSpriteByColor end.*/


        }
    });
    /*SpriteManager end.*/

    /*TutorialManager start.*/
    Bridge.define("TutorialManager", {
        inherits: function () {
if ( TRACE ) { TRACE( "TutorialManager#inherits", this ); }
 return [ScreenFrameWork.SingletonComponent$1(TutorialManager)]; },
        fields: {
            handObject: null,
            from: null,
            to: null,
            isUpdate: false,
            highLightPiecePlace: null,
            smoothSpeed: 0,
            tutorialBoardDatasClassic: null,
            tutorialBoardDatasClassic10x10: null,
            tutorialBoardDatasHexa: null,
            popupCanvas: null,
            fadePopup: null,
            layerPopupTutorial: 0,
            layerPopupOrigin: 0,
            velocity: null,
            classicIndex: 0,
            hexaIndex: 0,
            NextTutorial: false
        },
        props: {
            CurrentTutorialBoardData: {
                get: function () {
if ( TRACE ) { TRACE( "TutorialManager#CurrentTutorialBoardData#get", this ); }

                    if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.HEXA) {
                        return this.tutorialBoardDatasHexa.getItem(((this.hexaIndex - 1) | 0));
                    } else {
                        if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.CLASSIC_8X8 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.TIME_8X8 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.BOMB_8X8) {
                            return this.tutorialBoardDatasClassic.getItem(((this.classicIndex - 1) | 0));
                        } else if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.CLASSIC_10X10 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.TIME_10X10 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.BOMB_10X10) {
                            return this.tutorialBoardDatasClassic10x10.getItem(((this.classicIndex - 1) | 0));
                        }


                    }
                    return null;
                }
            }
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "TutorialManager#init", this ); }

                this.from = new UnityEngine.Vector3();
                this.to = new UnityEngine.Vector3();
                this.velocity = new UnityEngine.Vector3();
                this.isUpdate = false;
                this.smoothSpeed = 1;
                this.tutorialBoardDatasClassic = new (System.Collections.Generic.List$1(TutorialBoardData)).ctor();
                this.tutorialBoardDatasClassic10x10 = new (System.Collections.Generic.List$1(TutorialBoardData)).ctor();
                this.tutorialBoardDatasHexa = new (System.Collections.Generic.List$1(TutorialBoardData)).ctor();
                this.layerPopupTutorial = 15;
                this.layerPopupOrigin = 0;
                this.velocity = pc.Vec3.ZERO.clone();
                this.classicIndex = 0;
                this.hexaIndex = 0;
            }
        },
        methods: {
            /*TutorialManager.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "TutorialManager#Start", this ); }

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addReturnHome(Bridge.fn.cacheBind(this, this.ReturnHome));
            },
            /*TutorialManager.Start end.*/

            /*TutorialManager.Setup start.*/
            Setup: function () {
if ( TRACE ) { TRACE( "TutorialManager#Setup", this ); }

                this.layerPopupOrigin = this.popupCanvas.sortingOrder;
                this.popupCanvas.sortingOrder = this.layerPopupTutorial;
                PopUpFrameWork.PopupManager.instance.Show("fadetutorial");
                this.NextTutorial = false;
                this.handObject.SetActive(false);

            },
            /*TutorialManager.Setup end.*/

            /*TutorialManager.ActiveTutorialClassic start.*/
            ActiveTutorialClassic: function () {
if ( TRACE ) { TRACE( "TutorialManager#ActiveTutorialClassic", this ); }

                if (((this.classicIndex - 1) | 0) >= 0) {
                    if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.CLASSIC_8X8 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.TIME_8X8 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.BOMB_8X8) {
                        this.tutorialBoardDatasClassic.getItem(((this.classicIndex - 1) | 0)).EndStep();
                    } else if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.CLASSIC_10X10 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.TIME_10X10 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.BOMB_10X10) {
                        this.tutorialBoardDatasClassic10x10.getItem(((this.classicIndex - 1) | 0)).EndStep();
                    }


                }


                if (this.classicIndex > ((this.tutorialBoardDatasClassic.Count - 1) | 0)) {
                    //Complete Tutorial 
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialClassic = false;
                    //GameManager.Instance.SaveSetting();
                    ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.VisiblePiecesInGame(false);
                    ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CreateNewPieces(true, null);
                    this.handObject.SetActive(false);
                    this.fadePopup.Hide(false);
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode = false;
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(true);

                    return;
                }
                this.NextTutorial = false;

                this.highLightPiecePlace.SetActive(true);
                PopUpFrameWork.PopupManager.instance.Show("fadetutorial");
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(false);

                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.CLASSIC_8X8 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.TIME_8X8 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.BOMB_8X8) {
                    this.tutorialBoardDatasClassic.getItem(this.classicIndex).Setup();
                } else if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.CLASSIC_10X10 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.TIME_10X10 || ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode === DataGameMode.BOMB_10X10) {
                    this.tutorialBoardDatasClassic10x10.getItem(this.classicIndex).Setup();
                }

                this.classicIndex = (this.classicIndex + 1) | 0;

            },
            /*TutorialManager.ActiveTutorialClassic end.*/

            /*TutorialManager.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "TutorialManager#ReturnHome", this ); }

                Timer.StopSchedule(this);
                if (((this.classicIndex - 1) | 0) >= 0) {
                    this.tutorialBoardDatasClassic.getItem(((this.classicIndex - 1) | 0)).EndStep();
                    this.tutorialBoardDatasClassic10x10.getItem(((this.classicIndex - 1) | 0)).EndStep();
                }
                if (((this.hexaIndex - 1) | 0) >= 0) {
                    this.tutorialBoardDatasHexa.getItem(((this.hexaIndex - 1) | 0)).EndStep();
                }
                this.popupCanvas.sortingLayerID = this.layerPopupOrigin;
                this.classicIndex = 0;
                this.hexaIndex = 0;
                this.handObject.SetActive(false);
                this.isUpdate = false;
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode = false;
                this.fadePopup.Hide(false);
                this.NextTutorial = false;
                this.highLightPiecePlace.SetActive(false);
            },
            /*TutorialManager.ReturnHome end.*/

            /*TutorialManager.ActiveTutorialHexa start.*/
            ActiveTutorialHexa: function () {
if ( TRACE ) { TRACE( "TutorialManager#ActiveTutorialHexa", this ); }

                this.isUpdate = false;
                if (((this.hexaIndex - 1) | 0) >= 0) {
                    this.tutorialBoardDatasHexa.getItem(((this.hexaIndex - 1) | 0)).EndStep();
                }
                if (this.hexaIndex > ((this.tutorialBoardDatasHexa.Count - 1) | 0)) {
                    //Complete Tutorial 
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.tutorialHexa = false;
                    //GameManager.Instance.SaveSetting();
                    ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.VisiblePiecesInGame(false);
                    ScreenFrameWork.SingletonComponent$1(PieceManager).Instance.CreateNewPieces(true, null);
                    this.handObject.SetActive(false);
                    this.fadePopup.Hide(false);
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode = false;
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(true);

                    return;
                }
                this.NextTutorial = false;

                this.highLightPiecePlace.SetActive(true);
                PopUpFrameWork.PopupManager.instance.Show("fadetutorial");
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.VisibleButton(false);
                this.tutorialBoardDatasHexa.getItem(this.hexaIndex).Setup();
                this.hexaIndex = (this.hexaIndex + 1) | 0;

            },
            /*TutorialManager.ActiveTutorialHexa end.*/

            /*TutorialManager.MoveHand start.*/
            MoveHand: function (from, to) {
if ( TRACE ) { TRACE( "TutorialManager#MoveHand", this ); }

                Timer.Schedule(this, 0.5, Bridge.fn.bind(this, function () {

                    this.handObject.gameObject.SetActive(true);
                    this.handObject.transform.position = from.$clone();
                    this.from = from.$clone();
                    this.to = to.$clone();
                    this.isUpdate = true;
                }));
            },
            /*TutorialManager.MoveHand end.*/

            /*TutorialManager.EndStep start.*/
            EndStep: function () {
if ( TRACE ) { TRACE( "TutorialManager#EndStep", this ); }

                this.fadePopup.Hide(false);
                this.highLightPiecePlace.SetActive(false);
                this.Clicked(true);
                this.NextTutorial = true;
            },
            /*TutorialManager.EndStep end.*/

            /*TutorialManager.Clicked start.*/
            Clicked: function (click) {
if ( TRACE ) { TRACE( "TutorialManager#Clicked", this ); }

                if (this.NextTutorial) {
                    return;
                }
                if (!ScreenFrameWork.SingletonComponent$1(GameManager).Instance.TutorialMode) {
                    return;
                }

                this.handObject.SetActive(!click);
                if (!click) {
                    this.handObject.transform.position = this.from.$clone();
                }
            },
            /*TutorialManager.Clicked end.*/

            /*TutorialManager.Update start.*/
            Update: function () {
if ( TRACE ) { TRACE( "TutorialManager#Update", this ); }

                if (!this.isUpdate) {
                    return;
                }
                this.handObject.transform.position = pc.Vec3.smoothDamp( this.handObject.transform.position.$clone(), this.to.$clone(), Bridge.ref(this, "velocity"), this.smoothSpeed, Infinity, UnityEngine.Time.deltaTime );
                var dst = pc.Vec3.distance( this.handObject.transform.position, this.to );
                if (dst <= 0.5) {
                    this.handObject.transform.position = this.from.$clone();
                }
            },
            /*TutorialManager.Update end.*/


        }
    });
    /*TutorialManager end.*/

    /*GameOverPopup start.*/
    Bridge.define("GameOverPopup", {
        inherits: [PopUpFrameWork.Popup],
        fields: {
            scoreText: null,
            bestScoreText: null
        },
        methods: {
            /*GameOverPopup.OnShowing start.*/
            OnShowing: function (inData) {
if ( TRACE ) { TRACE( "GameOverPopup#OnShowing", this ); }

                //GoogleMobileAdsScript.instance.ShowInterstitial();
                this.scoreText.text = Bridge.toString(inData[0]);
                this.bestScoreText.text = Bridge.toString(inData[1]);
                PopUpFrameWork.Popup.prototype.OnShowing.call(this, inData);
            },
            /*GameOverPopup.OnShowing end.*/

            /*GameOverPopup.OnEventHome start.*/
            OnEventHome: function () {
if ( TRACE ) { TRACE( "GameOverPopup#OnEventHome", this ); }

                this.Hide(false);

                ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.Show("menu");
            },
            /*GameOverPopup.OnEventHome end.*/

            /*GameOverPopup.OnEventReplay start.*/
            OnEventReplay: function () {
if ( TRACE ) { TRACE( "GameOverPopup#OnEventReplay", this ); }

                this.Hide(false);
                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.ReplayGame();
            },
            /*GameOverPopup.OnEventReplay end.*/

            /*GameOverPopup.OnEventRate start.*/
            OnEventRate: function () {
if ( TRACE ) { TRACE( "GameOverPopup#OnEventRate", this ); }

                //Application.OpenURL(GameManager.Instance.GetRateURL);
            },
            /*GameOverPopup.OnEventRate end.*/


        }
    });
    /*GameOverPopup end.*/

    /*GameScreen start.*/
    Bridge.define("GameScreen", {
        inherits: [ScreenFrameWork.Screen],
        methods: {
            /*GameScreen.Hide start.*/
            Hide: function (back, immediate) {
if ( TRACE ) { TRACE( "GameScreen#Hide", this ); }

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GoHome();
                ScreenFrameWork.Screen.prototype.Hide.call(this, back, immediate);
            },
            /*GameScreen.Hide end.*/


        }
    });
    /*GameScreen end.*/

    /*MenuScreen start.*/
    Bridge.define("MenuScreen", {
        inherits: [ScreenFrameWork.Screen],
        fields: {
            boardPlaying: null,
            gameModeSelectObj: null,
            boardsSelected: null,
            currentMode: 0,
            currentBoard: 0
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "MenuScreen#init", this ); }

                this.boardPlaying = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
                this.gameModeSelectObj = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
                this.boardsSelected = new (System.Collections.Generic.List$1(UnityEngine.GameObject)).ctor();
                this.currentMode = 0;
                this.currentBoard = 0;
            }
        },
        methods: {
            /*MenuScreen.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "MenuScreen#Start", this ); }


                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.addReturnHome(Bridge.fn.cacheBind(this, this.ReturnHome));

                this.OnEventPlay();
            },
            /*MenuScreen.Start end.*/

            /*MenuScreen.ReturnHome start.*/
            ReturnHome: function () {
if ( TRACE ) { TRACE( "MenuScreen#ReturnHome", this ); }

                this.HideAllBoard();
            },
            /*MenuScreen.ReturnHome end.*/

            /*MenuScreen.HideAllBoard start.*/
            HideAllBoard: function () {
if ( TRACE ) { TRACE( "MenuScreen#HideAllBoard", this ); }

                for (var i = 0; i < this.boardPlaying.Count; i = (i + 1) | 0) {
                    this.boardPlaying.getItem(i).SetActive(false);
                }
            },
            /*MenuScreen.HideAllBoard end.*/

            /*MenuScreen.SetGameMode start.*/
            SetGameMode: function () {
if ( TRACE ) { TRACE( "MenuScreen#SetGameMode", this ); }

                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode === GameMode.HEXA) {
                    return;
                }
                if (this.currentBoard === 0) {
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SetBoardType(BoardType.Classic_8x8);
                    switch (this.currentMode) {
                        case 0: 
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.CLASSIC_8X8;
                            break;
                        case 1: 
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.TIME_8X8;
                            break;
                        case 2: 
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.BOMB_8X8;
                            break;
                    }
                } else {
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SetBoardType(BoardType.Classic_10x10);
                    switch (this.currentMode) {
                        case 0: 
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.CLASSIC_10X10;
                            break;
                        case 1: 
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.TIME_10X10;
                            break;
                        case 2: 
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.BOMB_10X10;
                            break;
                    }
                }

            },
            /*MenuScreen.SetGameMode end.*/

            /*MenuScreen.Show start.*/
            Show: function (back, immediate) {
if ( TRACE ) { TRACE( "MenuScreen#Show", this ); }

                this.OnEventSelectBoard(this.currentBoard);
                this.OnEventSelectMode(this.currentMode);
                ScreenFrameWork.Screen.prototype.Show.call(this, back, immediate);
            },
            /*MenuScreen.Show end.*/

            /*MenuScreen.OnEventPlay start.*/
            OnEventPlay: function () {
if ( TRACE ) { TRACE( "MenuScreen#OnEventPlay", this ); }

                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = System.Threading.Tasks.Task.delay(100);
                                    $step = 1;
                                    if ($task1.isCompleted()) {
                                        continue;
                                    }
                                    $task1.continue($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    // if (GoogleMobileAdsScript.instance != null)
                                    // {
                                    //     GoogleMobileAdsScript.instance.ShowInterstitial();
                                    // }
                                    this.HideAllBoard();

                                    /* 
                                    if (GameManager.Instance.GetGameMode != GameMode.HEXA && GameManager.Instance.GetGameSetting.tutorialClassic)
                                    {
                                       GameManager.Instance.SetBoardType(BoardType.Classic_8x8);
                                    }
                                    */


                                    this.boardPlaying.getItem(ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetBoardType).SetActive(true);
                                    ScreenFrameWork.SingletonComponent$1(ScreenFrameWork.ScreenManager).Instance.Show("game");
                                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.PlayGame();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);

                $asyncBody();
            },
            /*MenuScreen.OnEventPlay end.*/

            /*MenuScreen.OnEventSelectMode start.*/
            OnEventSelectMode: function (mode) {
if ( TRACE ) { TRACE( "MenuScreen#OnEventSelectMode", this ); }

                var $t;
                $t = Bridge.getEnumerator(System.Enum.getValues(GameMode));
                try {
                    while ($t.moveNext()) {
                        var enumValue = $t.Current;
                        if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(enumValue, System.Int32), System.Int32)) === mode) {
                            this.gameModeSelectObj.getItem(this.currentMode).SetActive(false);
                            this.currentMode = System.Nullable.getValue(Bridge.cast(Bridge.unbox(enumValue, System.Int32), System.Int32));
                            ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SetGameMode(System.Nullable.getValue(Bridge.cast(Bridge.unbox(enumValue, GameMode), System.Int32)));
                            if (System.Nullable.getValue(Bridge.cast(Bridge.unbox(enumValue, GameMode), System.Int32)) === GameMode.HEXA) {
                                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SetBoardType(BoardType.Hexa);
                                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.CurrentDataGameMode = DataGameMode.HEXA;
                            } else {

                                this.SetGameMode();

                            }
                            this.gameModeSelectObj.getItem(this.currentMode).SetActive(true);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }


                ScreenFrameWork.SingletonComponent$1(SpriteManager).Instance.SetupImage();
            },
            /*MenuScreen.OnEventSelectMode end.*/

            /*MenuScreen.OnEventSelectBoard start.*/
            OnEventSelectBoard: function (board) {
if ( TRACE ) { TRACE( "MenuScreen#OnEventSelectBoard", this ); }

                this.boardsSelected.getItem(this.currentBoard).SetActive(false);
                this.currentBoard = board;
                this.boardsSelected.getItem(this.currentBoard).SetActive(true);
                if (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameMode !== GameMode.HEXA) {
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.SetBoardType(board === 0 ? BoardType.Classic_8x8 : BoardType.Classic_10x10);
                }

                this.SetGameMode();
            },
            /*MenuScreen.OnEventSelectBoard end.*/


        }
    });
    /*MenuScreen end.*/

    /*SecondChancePopup start.*/
    Bridge.define("SecondChancePopup", {
        inherits: [PopUpFrameWork.Popup],
        fields: {
            durationText: null,
            popupSecondChance: null,
            fillSecondChance: null,
            duration: 0,
            timeSecondChance: 0,
            isUpdate: false
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SecondChancePopup#init", this ); }

                this.timeSecondChance = 5;
                this.isUpdate = false;
            }
        },
        methods: {
            /*SecondChancePopup.OnShowing start.*/
            OnShowing: function (inData) {
if ( TRACE ) { TRACE( "SecondChancePopup#OnShowing", this ); }

                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.CanClickPiece = false;
                this.isUpdate = false;
                this.durationText.text = System.Single.format(this.timeSecondChance);
                this.fillSecondChance.fillAmount = 1;
                this.StartCoroutine$1(this.StartCountTime());
                PopUpFrameWork.Popup.prototype.OnShowing.call(this, inData);
            },
            /*SecondChancePopup.OnShowing end.*/

            /*SecondChancePopup.OnEventYes start.*/
            OnEventYes: function () {
if ( TRACE ) { TRACE( "SecondChancePopup#OnEventYes", this ); }

                //#if UNITY_EDITOR
                this.Hide(false);
                ScreenFrameWork.SingletonComponent$1(PlayingManager).Instance.DestroyBlockSecondChance();
                //#endif
                //GoogleMobileAdsScript.instance.ShowRewardBasedVideo(() => {
                //   PlayingManager.Instance.IsGameOver = false;
                //   Hide(false);
                //   PlayingManager.Instance.DestroyBlockSecondChance();
                //
                // });
            },
            /*SecondChancePopup.OnEventYes end.*/

            /*SecondChancePopup.OnEventNoTks start.*/
            OnEventNoTks: function () {
if ( TRACE ) { TRACE( "SecondChancePopup#OnEventNoTks", this ); }

                this.Hide(false);
                Timer.Schedule(this, 0.2, function () {
                    ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GameOver();
                });

            },
            /*SecondChancePopup.OnEventNoTks end.*/

            /*SecondChancePopup.StartCountTime start.*/
            StartCountTime: function () {
if ( TRACE ) { TRACE( "SecondChancePopup#StartCountTime", this ); }

                var $step = 0,
                    $jumpFromFinally,
                    $returnValue,
                    $async_e;

                var $enumerator = new Bridge.GeneratorEnumerator(Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            switch ($step) {
                                case 0: {
                                    $enumerator.current = new UnityEngine.WaitForSeconds(0.4);
                                        $step = 1;
                                        return true;
                                }
                                case 1: {
                                    this.isUpdate = true;
                                        this.duration = this.timeSecondChance;

                                }
                                default: {
                                    return false;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        throw $async_e;
                    }
                }));
                return $enumerator;
            },
            /*SecondChancePopup.StartCountTime end.*/

            /*SecondChancePopup.FixedUpdate start.*/
            FixedUpdate: function () {
if ( TRACE ) { TRACE( "SecondChancePopup#FixedUpdate", this ); }

                if (!this.isUpdate) {
                    return;
                }
                this.duration -= UnityEngine.Time.deltaTime;
                this.durationText.text = Bridge.toString(Math.floor(this.duration));
                this.fillSecondChance.fillAmount = (1.0 / this.timeSecondChance) * this.duration;
                if (this.duration <= 0) {
                    this.durationText.text = "0";
                    this.OnEventNoTks();

                    this.fillSecondChance.fillAmount = 0;
                    this.isUpdate = false;
                }
            },
            /*SecondChancePopup.FixedUpdate end.*/


        }
    });
    /*SecondChancePopup end.*/

    /*SettingPopup start.*/
    Bridge.define("SettingPopup", {
        inherits: [PopUpFrameWork.Popup],
        fields: {
            on: null,
            off: null,
            musicIcon: null,
            soundIcon: null,
            rateURL: null
        },
        ctors: {
            init: function () {
if ( TRACE ) { TRACE( "SettingPopup#init", this ); }

                this.rateURL = "https://www.google.com/";
            }
        },
        methods: {
            /*SettingPopup.Start start.*/
            Start: function () {
if ( TRACE ) { TRACE( "SettingPopup#Start", this ); }

                this.musicIcon.sprite = (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteMusic) ? this.off : this.on;
                this.soundIcon.sprite = (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteSound) ? this.off : this.on;
            },
            /*SettingPopup.Start end.*/

            /*SettingPopup.OnEventMusic start.*/
            OnEventMusic: function () {
if ( TRACE ) { TRACE( "SettingPopup#OnEventMusic", this ); }

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteMusic = !ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteMusic;
                this.musicIcon.sprite = (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteMusic) ? this.off : this.on;

                //GameManager.Instance.SaveSetting();
                ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.MuteSource(false);
            },
            /*SettingPopup.OnEventMusic end.*/

            /*SettingPopup.OnEventSound start.*/
            OnEventSound: function () {
if ( TRACE ) { TRACE( "SettingPopup#OnEventSound", this ); }

                ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteSound = !ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteSound;
                this.soundIcon.sprite = (ScreenFrameWork.SingletonComponent$1(GameManager).Instance.GetGameSetting.muteSound) ? this.off : this.on;

                //GameManager.Instance.SaveSetting();
                ScreenFrameWork.SingletonComponent$1(SoundManager).Instance.MuteSource(true);
            },
            /*SettingPopup.OnEventSound end.*/


        }
    });
    /*SettingPopup end.*/

    if ( MODULE_reflection ) {
    var $m = Bridge.setMetadata,
        $n = ["System","System.Threading.Tasks","TMPro","UnityEngine","UnityEngine.UI","System.Collections.Generic","System.Collections","UnityEngine.SceneManagement","PopUpFrameWork","UnityEngine.EventSystems","DG.Tweening","ScreenFrameWork","UnityEngine.Audio","DG.Tweening.Core","DG.Tweening.Plugins.Core.PathCore","System.Globalization","DG.Tweening.Plugins.Options"];

    /*CameraController start.*/
    $m("CameraController", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"InitializeCam","t":8,"sn":"InitializeCam","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"UpdateCameraZoom","t":8,"sn":"UpdateCameraZoom","rt":$n[1].Task},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"cameraZoomLevels","t":4,"rt":$n[0].Array.type(System.Single),"sn":"cameraZoomLevels"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"csr","t":4,"rt":CameraSizeByResolution,"sn":"csr"},{"a":1,"n":"currentZoomIndex","t":4,"rt":$n[0].Int32,"sn":"currentZoomIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"doCameraZoom","t":4,"rt":$n[0].Boolean,"sn":"doCameraZoom","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"landscapeOffset","t":4,"rt":$n[0].Array.type(System.Single),"sn":"landscapeOffset"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"zoomOutDuration","t":4,"rt":$n[0].Single,"sn":"zoomOutDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*CameraController end.*/

    /*FPSController start.*/
    $m("FPSController", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"SetFrameRate","t":8,"pi":[{"n":"frameRate","pt":$n[0].Int32,"ps":0}],"sn":"SetFrameRate","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"deltaTime","t":4,"rt":$n[0].Single,"sn":"deltaTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"fpsText","t":4,"rt":$n[2].TMP_Text,"sn":"fpsText"},{"a":1,"n":"frameRates","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"frameRates","ro":true}]}; }, $n);
    /*FPSController end.*/

    /*GemCounter start.*/
    $m("GemCounter", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CheckMatch","t":8,"pi":[{"n":"spr","pt":$n[3].Sprite,"ps":0}],"sn":"CheckMatch","rt":$n[0].Boolean,"p":[$n[3].Sprite],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ReceiveGem","t":8,"pi":[{"n":"receivedGem","pt":$n[3].GameObject,"ps":0},{"n":"delay","pt":$n[0].Single,"ps":1},{"n":"confirmSortOrder","pt":$n[0].Int32,"ps":2}],"sn":"ReceiveGem","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Single,$n[0].Int32]},{"a":1,"n":"ReduceCount","t":8,"sn":"ReduceCount","rt":$n[0].Void},{"a":1,"n":"ResetIconSize","t":8,"sn":"ResetIconSize","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"UpdateText","t":8,"sn":"UpdateText","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"countText","t":4,"rt":$n[2].TMP_Text,"sn":"countText"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"currentAmount","t":4,"rt":$n[0].Int32,"sn":"currentAmount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gemIcon","t":4,"rt":$n[4].Image,"sn":"gemIcon"},{"a":1,"n":"iconScale","t":4,"rt":$n[3].Vector3,"sn":"iconScale"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"neededAmount","t":4,"rt":$n[0].Int32,"sn":"neededAmount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"receiveAnimDuration","t":4,"rt":$n[0].Single,"sn":"receiveAnimDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*GemCounter end.*/

    /*Following start.*/
    $m("Following", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"moveArrow","t":8,"sn":"moveArrow","rt":$n[0].Void},{"a":2,"n":"dude1","t":4,"rt":$n[3].Transform,"sn":"dude1"},{"a":1,"n":"dude1ColorVelocity","t":4,"rt":$n[3].Color,"sn":"dude1ColorVelocity"},{"a":2,"n":"dude1Title","t":4,"rt":$n[3].Transform,"sn":"dude1Title"},{"a":2,"n":"dude2","t":4,"rt":$n[3].Transform,"sn":"dude2"},{"a":2,"n":"dude2Title","t":4,"rt":$n[3].Transform,"sn":"dude2Title"},{"a":2,"n":"dude3","t":4,"rt":$n[3].Transform,"sn":"dude3"},{"a":2,"n":"dude3Title","t":4,"rt":$n[3].Transform,"sn":"dude3Title"},{"a":2,"n":"dude4","t":4,"rt":$n[3].Transform,"sn":"dude4"},{"a":2,"n":"dude4Title","t":4,"rt":$n[3].Transform,"sn":"dude4Title"},{"a":2,"n":"dude5","t":4,"rt":$n[3].Transform,"sn":"dude5"},{"a":2,"n":"dude5Title","t":4,"rt":$n[3].Transform,"sn":"dude5Title"},{"a":2,"n":"followArrow","t":4,"rt":$n[3].Transform,"sn":"followArrow"},{"a":1,"n":"fromColor","t":4,"rt":$n[3].Color,"sn":"fromColor"},{"a":1,"n":"fromVec3","t":4,"rt":$n[3].Vector3,"sn":"fromVec3"},{"a":1,"n":"fromY","t":4,"rt":$n[0].Single,"sn":"fromY","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"planet","t":4,"rt":$n[3].Transform,"sn":"planet"},{"a":1,"n":"velocityColor","t":4,"rt":$n[3].Color,"sn":"velocityColor"},{"a":1,"n":"velocityPos","t":4,"rt":$n[3].Vector3,"sn":"velocityPos"},{"a":1,"n":"velocityVec3","t":4,"rt":$n[3].Vector3,"sn":"velocityVec3"},{"a":1,"n":"velocityY","t":4,"rt":$n[0].Single,"sn":"velocityY","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*Following end.*/

    /*GeneralAdvancedTechniques start.*/
    $m("GeneralAdvancedTechniques", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"avatar2dRecursive","t":4,"rt":$n[3].GameObject,"sn":"avatar2dRecursive"},{"a":2,"n":"avatarMove","t":4,"rt":$n[3].GameObject,"sn":"avatarMove"},{"a":2,"n":"avatarRecursive","t":4,"rt":$n[3].GameObject,"sn":"avatarRecursive"},{"a":2,"n":"avatarSpeed","t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"avatarSpeed"},{"a":2,"n":"avatarSpeed2","t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"avatarSpeed2"},{"a":1,"n":"circleLrg","t":4,"rt":System.Array.type(UnityEngine.Vector3),"sn":"circleLrg"},{"a":1,"n":"circleSm","t":4,"rt":System.Array.type(UnityEngine.Vector3),"sn":"circleSm"},{"a":2,"n":"movePts","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"movePts"},{"a":2,"n":"textField","t":4,"rt":$n[3].RectTransform,"sn":"textField"},{"a":2,"n":"wingPersonPanel","t":4,"rt":$n[3].RectTransform,"sn":"wingPersonPanel"}]}; }, $n);
    /*GeneralAdvancedTechniques end.*/

    /*GeneralBasic start.*/
    $m("GeneralBasic", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"advancedExamples","t":8,"sn":"advancedExamples","rt":$n[0].Void},{"a":2,"n":"prefabAvatar","t":4,"rt":$n[3].GameObject,"sn":"prefabAvatar"}]}; }, $n);
    /*GeneralBasic end.*/

    /*GeneralBasics2d start.*/
    $m("GeneralBasics2d", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"advancedExamples","t":8,"sn":"advancedExamples","rt":$n[0].Void},{"a":1,"n":"createSpriteDude","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"pos","pt":$n[3].Vector3,"ps":1},{"n":"hasParticles","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"createSpriteDude","rt":$n[3].GameObject,"p":[$n[0].String,$n[3].Vector3,$n[0].Boolean]},{"a":2,"n":"dudeTexture","t":4,"rt":$n[3].Texture2D,"sn":"dudeTexture"},{"a":2,"n":"prefabParticles","t":4,"rt":$n[3].GameObject,"sn":"prefabParticles"}]}; }, $n);
    /*GeneralBasics2d end.*/

    /*GeneralCameraShake start.*/
    $m("GeneralCameraShake", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"bigGuyJump","t":8,"sn":"bigGuyJump","rt":$n[0].Void},{"a":1,"n":"avatarBig","t":4,"rt":$n[3].GameObject,"sn":"avatarBig"},{"a":1,"n":"boomAudioClip","t":4,"rt":$n[3].AudioClip,"sn":"boomAudioClip"},{"a":1,"n":"jumpIter","t":4,"rt":$n[0].Single,"sn":"jumpIter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*GeneralCameraShake end.*/

    /*GeneralEasingTypes start.*/
    $m("GeneralEasingTypes", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"demoEaseTypes","t":8,"sn":"demoEaseTypes","rt":$n[0].Void},{"a":1,"n":"resetLines","t":8,"sn":"resetLines","rt":$n[0].Void},{"a":2,"n":"animationCurve","t":4,"rt":pc.AnimationCurve,"sn":"animationCurve"},{"a":1,"n":"easeTypes","t":4,"rt":$n[0].Array.type(System.String),"sn":"easeTypes"},{"a":2,"n":"lineDrawScale","t":4,"rt":$n[0].Single,"sn":"lineDrawScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*GeneralEasingTypes end.*/

    /*GeneralEventsListeners start.*/
    $m("GeneralEventsListeners", function () { return {"nested":[GeneralEventsListeners.MyEvents],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[0].Void},{"a":1,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[0].Void},{"a":1,"n":"OnCollisionEnter","t":8,"pi":[{"n":"collision","pt":$n[3].Collision,"ps":0}],"sn":"OnCollisionEnter","rt":$n[0].Void,"p":[$n[3].Collision]},{"a":1,"n":"OnCollisionStay","t":8,"pi":[{"n":"collision","pt":$n[3].Collision,"ps":0}],"sn":"OnCollisionStay","rt":$n[0].Void,"p":[$n[3].Collision]},{"a":1,"n":"OnMouseDown","t":8,"sn":"OnMouseDown","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"changeColor","t":8,"pi":[{"n":"e","pt":LTEvent,"ps":0}],"sn":"changeColor","rt":$n[0].Void,"p":[LTEvent]},{"a":1,"n":"jumpUp","t":8,"pi":[{"n":"e","pt":LTEvent,"ps":0}],"sn":"jumpUp","rt":$n[0].Void,"p":[LTEvent]},{"a":1,"n":"fromColor","t":4,"rt":$n[3].Color,"sn":"fromColor"},{"a":1,"n":"towardsRotation","t":4,"rt":$n[3].Vector3,"sn":"towardsRotation"},{"a":1,"n":"turnForIter","t":4,"rt":$n[0].Single,"sn":"turnForIter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"turnForLength","t":4,"rt":$n[0].Single,"sn":"turnForLength","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*GeneralEventsListeners end.*/

    /*GeneralEventsListeners+MyEvents start.*/
    $m("GeneralEventsListeners.MyEvents", function () { return {"td":GeneralEventsListeners,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CHANGE_COLOR","is":true,"t":4,"rt":GeneralEventsListeners.MyEvents,"sn":"CHANGE_COLOR","box":function ($v) { return Bridge.box($v, GeneralEventsListeners.MyEvents, System.Enum.toStringFn(GeneralEventsListeners.MyEvents));}},{"a":2,"n":"JUMP","is":true,"t":4,"rt":GeneralEventsListeners.MyEvents,"sn":"JUMP","box":function ($v) { return Bridge.box($v, GeneralEventsListeners.MyEvents, System.Enum.toStringFn(GeneralEventsListeners.MyEvents));}},{"a":2,"n":"LENGTH","is":true,"t":4,"rt":GeneralEventsListeners.MyEvents,"sn":"LENGTH","box":function ($v) { return Bridge.box($v, GeneralEventsListeners.MyEvents, System.Enum.toStringFn(GeneralEventsListeners.MyEvents));}}]}; }, $n);
    /*GeneralEventsListeners+MyEvents end.*/

    /*GeneralSequencer start.*/
    $m("GeneralSequencer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"avatar1","t":4,"rt":$n[3].GameObject,"sn":"avatar1"},{"a":2,"n":"dustCloudPrefab","t":4,"rt":$n[3].GameObject,"sn":"dustCloudPrefab"},{"a":2,"n":"speedScale","t":4,"rt":$n[0].Single,"sn":"speedScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"star","t":4,"rt":$n[3].GameObject,"sn":"star"}]}; }, $n);
    /*GeneralSequencer end.*/

    /*GeneralSimpleUI start.*/
    $m("GeneralSimpleUI", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"button","t":4,"rt":$n[3].RectTransform,"sn":"button"}]}; }, $n);
    /*GeneralSimpleUI end.*/

    /*GeneralUISpace start.*/
    $m("GeneralUISpace", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"chatBar1","t":4,"rt":$n[3].RectTransform,"sn":"chatBar1"},{"a":2,"n":"chatBar2","t":4,"rt":$n[3].RectTransform,"sn":"chatBar2"},{"a":2,"n":"chatRect","t":4,"rt":$n[3].RectTransform,"sn":"chatRect"},{"a":2,"n":"chatSprites","t":4,"rt":System.Array.type(UnityEngine.Sprite),"sn":"chatSprites"},{"a":2,"n":"chatText","t":4,"rt":$n[4].Text,"sn":"chatText"},{"a":2,"n":"chatWindow","t":4,"rt":$n[3].RectTransform,"sn":"chatWindow"},{"a":2,"n":"mainButton1","t":4,"rt":$n[3].RectTransform,"sn":"mainButton1"},{"a":2,"n":"mainButton2","t":4,"rt":$n[3].RectTransform,"sn":"mainButton2"},{"a":2,"n":"mainParagraphText","t":4,"rt":$n[3].RectTransform,"sn":"mainParagraphText"},{"a":2,"n":"mainTitleText","t":4,"rt":$n[3].RectTransform,"sn":"mainTitleText"},{"a":2,"n":"mainWindow","t":4,"rt":$n[3].RectTransform,"sn":"mainWindow"},{"a":2,"n":"pauseRing1","t":4,"rt":$n[3].RectTransform,"sn":"pauseRing1"},{"a":2,"n":"pauseRing2","t":4,"rt":$n[3].RectTransform,"sn":"pauseRing2"},{"a":2,"n":"pauseWindow","t":4,"rt":$n[3].RectTransform,"sn":"pauseWindow"},{"a":2,"n":"rawImageRect","t":4,"rt":$n[3].RectTransform,"sn":"rawImageRect"}]}; }, $n);
    /*GeneralUISpace end.*/

    /*PathBezier2d start.*/
    $m("PathBezier2d", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"cubes","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"cubes"},{"a":2,"n":"dude1","t":4,"rt":$n[3].GameObject,"sn":"dude1"},{"a":2,"n":"dude2","t":4,"rt":$n[3].GameObject,"sn":"dude2"},{"a":1,"n":"visualizePath","t":4,"rt":LTBezierPath,"sn":"visualizePath"}]}; }, $n);
    /*PathBezier2d end.*/

    /*ExampleSpline start.*/
    $m("ExampleSpline", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"iter","t":4,"rt":$n[0].Single,"sn":"iter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"ltLogo","t":4,"rt":$n[3].GameObject,"sn":"ltLogo"},{"a":1,"n":"ltLogo2","t":4,"rt":$n[3].GameObject,"sn":"ltLogo2"},{"a":1,"n":"spline","t":4,"rt":LTSpline,"sn":"spline"},{"a":2,"n":"trans","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"trans"}]}; }, $n);
    /*ExampleSpline end.*/

    /*PathSpline2d start.*/
    $m("PathSpline2d", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"cubes","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"cubes"},{"a":2,"n":"dude1","t":4,"rt":$n[3].GameObject,"sn":"dude1"},{"a":2,"n":"dude2","t":4,"rt":$n[3].GameObject,"sn":"dude2"},{"a":1,"n":"visualizePath","t":4,"rt":LTSpline,"sn":"visualizePath"}]}; }, $n);
    /*PathSpline2d end.*/

    /*PathSplineEndless start.*/
    $m("PathSplineEndless", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"addRandomTrackPoint","t":8,"sn":"addRandomTrackPoint","rt":$n[0].Void},{"a":1,"n":"objectQueue","t":8,"pi":[{"n":"arr","pt":System.Array.type(UnityEngine.GameObject),"ps":0},{"n":"lastIter","ref":true,"pt":$n[0].Int32,"ps":1}],"sn":"objectQueue","rt":$n[3].GameObject,"p":[System.Array.type(UnityEngine.GameObject),$n[0].Int32]},{"a":1,"n":"playSwish","t":8,"sn":"playSwish","rt":$n[0].Void},{"a":1,"n":"refreshSpline","t":8,"sn":"refreshSpline","rt":$n[0].Void},{"a":2,"n":"car","t":4,"rt":$n[3].GameObject,"sn":"car"},{"a":1,"n":"carAdd","t":4,"rt":$n[0].Single,"sn":"carAdd","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"carInternal","t":4,"rt":$n[3].GameObject,"sn":"carInternal"},{"a":1,"n":"carIter","t":4,"rt":$n[0].Single,"sn":"carIter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"cubes","t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"cubes"},{"a":1,"n":"cubesIter","t":4,"rt":$n[0].Int32,"sn":"cubesIter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"pushTrackAhead","t":4,"rt":$n[0].Single,"sn":"pushTrackAhead","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"randomIter","t":4,"rt":$n[0].Single,"sn":"randomIter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"randomIterWidth","t":4,"rt":$n[0].Single,"sn":"randomIterWidth","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"track","t":4,"rt":LTSpline,"sn":"track"},{"a":1,"n":"trackIter","t":4,"rt":$n[0].Int32,"sn":"trackIter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"trackMaxItems","t":4,"rt":$n[0].Int32,"sn":"trackMaxItems","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"trackPts","t":4,"rt":$n[5].List$1(UnityEngine.Vector3),"sn":"trackPts"},{"a":2,"n":"trackTrailRenderers","t":4,"rt":$n[3].GameObject,"sn":"trackTrailRenderers"},{"a":2,"n":"trees","t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"trees"},{"a":1,"n":"treesIter","t":4,"rt":$n[0].Int32,"sn":"treesIter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"zIter","t":4,"rt":$n[0].Int32,"sn":"zIter","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*PathSplineEndless end.*/

    /*PathSplinePerformance start.*/
    $m("PathSplinePerformance", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"playSwish","t":8,"sn":"playSwish","rt":$n[0].Void},{"a":2,"n":"car","t":4,"rt":$n[3].GameObject,"sn":"car"},{"a":1,"n":"carAdd","t":4,"rt":$n[0].Single,"sn":"carAdd","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"carInternal","t":4,"rt":$n[3].GameObject,"sn":"carInternal"},{"a":2,"n":"carSpeed","t":4,"rt":$n[0].Single,"sn":"carSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"circleLength","t":4,"rt":$n[0].Single,"sn":"circleLength","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"randomRange","t":4,"rt":$n[0].Single,"sn":"randomRange","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"tracerSpeed","t":4,"rt":$n[0].Single,"sn":"tracerSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"track","t":4,"rt":LTSpline,"sn":"track"},{"a":1,"n":"trackIter","t":4,"rt":$n[0].Int32,"sn":"trackIter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"trackNodes","t":4,"rt":$n[0].Int32,"sn":"trackNodes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"trackPosition","t":4,"rt":$n[0].Single,"sn":"trackPosition","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"trackTrailRenderers","t":4,"rt":$n[3].GameObject,"sn":"trackTrailRenderers"}]}; }, $n);
    /*PathSplinePerformance end.*/

    /*PathSplines start.*/
    $m("PathSplines", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"avatar1","t":4,"rt":$n[3].GameObject,"sn":"avatar1"},{"a":1,"n":"cr","t":4,"rt":LTSpline,"sn":"cr"},{"a":1,"n":"iter","t":4,"rt":$n[0].Single,"sn":"iter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"trans","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"trans"}]}; }, $n);
    /*PathSplines end.*/

    /*PathSplineTrack start.*/
    $m("PathSplineTrack", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"playSwish","t":8,"sn":"playSwish","rt":$n[0].Void},{"a":2,"n":"car","t":4,"rt":$n[3].GameObject,"sn":"car"},{"a":2,"n":"carInternal","t":4,"rt":$n[3].GameObject,"sn":"carInternal"},{"a":1,"n":"track","t":4,"rt":LTSpline,"sn":"track"},{"a":1,"n":"trackIter","t":4,"rt":$n[0].Int32,"sn":"trackIter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"trackOnePoints","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"trackOnePoints"},{"a":1,"n":"trackPosition","t":4,"rt":$n[0].Single,"sn":"trackPosition","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"trackTrailRenderers","t":4,"rt":$n[3].GameObject,"sn":"trackTrailRenderers"}]}; }, $n);
    /*PathSplineTrack end.*/

    /*LeanSmooth start.*/
    $m("LeanSmooth", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"bounceOut","is":true,"t":8,"pi":[{"n":"current","pt":$n[0].Single,"ps":0},{"n":"target","pt":$n[0].Single,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[0].Single,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":6},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":7},{"n":"hitDamping","dv":0.9,"o":true,"pt":$n[0].Single,"ps":8}],"sn":"bounceOut","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"bounceOut","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Color,"ps":0},{"n":"target","pt":$n[3].Color,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[3].Color,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":6},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":7},{"n":"hitDamping","dv":0.9,"o":true,"pt":$n[0].Single,"ps":8}],"sn":"bounceOut$1","rt":$n[3].Color,"p":[$n[3].Color,$n[3].Color,$n[3].Color,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"bounceOut","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Vector3,"ps":0},{"n":"target","pt":$n[3].Vector3,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[3].Vector3,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":6},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":7},{"n":"hitDamping","dv":0.9,"o":true,"pt":$n[0].Single,"ps":8}],"sn":"bounceOut$2","rt":$n[3].Vector3,"p":[$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"damp","is":true,"t":8,"pi":[{"n":"current","pt":$n[0].Single,"ps":0},{"n":"target","pt":$n[0].Single,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[0].Single,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5}],"sn":"damp","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"damp","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Color,"ps":0},{"n":"target","pt":$n[3].Color,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[3].Color,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5}],"sn":"damp$1","rt":$n[3].Color,"p":[$n[3].Color,$n[3].Color,$n[3].Color,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"damp","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Vector3,"ps":0},{"n":"target","pt":$n[3].Vector3,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[3].Vector3,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5}],"sn":"damp$2","rt":$n[3].Vector3,"p":[$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"linear","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Color,"ps":0},{"n":"target","pt":$n[3].Color,"ps":1},{"n":"moveSpeed","pt":$n[0].Single,"ps":2}],"sn":"linear$1","rt":$n[3].Color,"p":[$n[3].Color,$n[3].Color,$n[0].Single]},{"a":2,"n":"linear","is":true,"t":8,"pi":[{"n":"current","pt":$n[0].Single,"ps":0},{"n":"target","pt":$n[0].Single,"ps":1},{"n":"moveSpeed","pt":$n[0].Single,"ps":2},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":3}],"sn":"linear","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"linear","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Vector3,"ps":0},{"n":"target","pt":$n[3].Vector3,"ps":1},{"n":"moveSpeed","pt":$n[0].Single,"ps":2},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":3}],"sn":"linear$2","rt":$n[3].Vector3,"p":[$n[3].Vector3,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"spring","is":true,"t":8,"pi":[{"n":"current","pt":$n[0].Single,"ps":0},{"n":"target","pt":$n[0].Single,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[0].Single,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":6},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":7}],"sn":"spring","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"spring","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Color,"ps":0},{"n":"target","pt":$n[3].Color,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[3].Color,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":6},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":7}],"sn":"spring$1","rt":$n[3].Color,"p":[$n[3].Color,$n[3].Color,$n[3].Color,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"spring","is":true,"t":8,"pi":[{"n":"current","pt":$n[3].Vector3,"ps":0},{"n":"target","pt":$n[3].Vector3,"ps":1},{"n":"currentVelocity","ref":true,"pt":$n[3].Vector3,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"deltaTime","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":6},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":7}],"sn":"spring$2","rt":$n[3].Vector3,"p":[$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single]}]}; }, $n);
    /*LeanSmooth end.*/

    /*LeanTester start.*/
    $m("LeanTester", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"timeoutCheck","t":8,"sn":"timeoutCheck","rt":$n[6].IEnumerator},{"a":2,"n":"timeout","t":4,"rt":$n[0].Single,"sn":"timeout","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*LeanTester end.*/

    /*LeanTest start.*/
    $m("LeanTest", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"debug","is":true,"t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0},{"n":"didPass","pt":$n[0].Boolean,"ps":1},{"n":"failExplaination","dv":null,"o":true,"pt":$n[0].String,"ps":2}],"sn":"debug","rt":$n[0].Void,"p":[$n[0].String,$n[0].Boolean,$n[0].String]},{"a":2,"n":"expect","is":true,"t":8,"pi":[{"n":"didPass","pt":$n[0].Boolean,"ps":0},{"n":"definition","pt":$n[0].String,"ps":1},{"n":"failExplaination","dv":null,"o":true,"pt":$n[0].String,"ps":2}],"sn":"expect","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].String,$n[0].String]},{"a":2,"n":"formatB","is":true,"t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"formatB","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"formatBC","is":true,"t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0},{"n":"color","pt":$n[0].String,"ps":1}],"sn":"formatBC","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"formatC","is":true,"t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0},{"n":"color","pt":$n[0].String,"ps":1}],"sn":"formatC","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"overview","is":true,"t":8,"sn":"overview","rt":$n[0].Void},{"a":2,"n":"padRight","is":true,"t":8,"pi":[{"n":"len","pt":$n[0].Int32,"ps":0}],"sn":"padRight","rt":$n[0].String,"p":[$n[0].Int32]},{"a":2,"n":"printOutLength","is":true,"t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"printOutLength","rt":$n[0].Single,"p":[$n[0].String],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"expected","is":true,"t":4,"rt":$n[0].Int32,"sn":"expected","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"passes","is":true,"t":4,"rt":$n[0].Int32,"sn":"passes","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"tests","is":true,"t":4,"rt":$n[0].Int32,"sn":"tests","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"testsFinished","is":true,"t":4,"rt":$n[0].Boolean,"sn":"testsFinished","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"timeout","is":true,"t":4,"rt":$n[0].Single,"sn":"timeout","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"timeoutStarted","is":true,"t":4,"rt":$n[0].Boolean,"sn":"timeoutStarted","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*LeanTest end.*/

    /*TweenAction start.*/
    $m("TweenAction", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ALPHA","is":true,"t":4,"rt":TweenAction,"sn":"ALPHA","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ALPHA_VERTEX","is":true,"t":4,"rt":TweenAction,"sn":"ALPHA_VERTEX","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CALLBACK","is":true,"t":4,"rt":TweenAction,"sn":"CALLBACK","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CALLBACK_COLOR","is":true,"t":4,"rt":TweenAction,"sn":"CALLBACK_COLOR","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVASGROUP_ALPHA","is":true,"t":4,"rt":TweenAction,"sn":"CANVASGROUP_ALPHA","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_ALPHA","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_ALPHA","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_COLOR","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_COLOR","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_MOVE","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_MOVE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_MOVE_X","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_MOVE_X","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_MOVE_Y","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_MOVE_Y","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_MOVE_Z","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_MOVE_Z","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_PLAYSPRITE","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_PLAYSPRITE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_ROTATEAROUND","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_ROTATEAROUND","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_ROTATEAROUND_LOCAL","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_ROTATEAROUND_LOCAL","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_SCALE","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_SCALE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"CANVAS_SIZEDELTA","is":true,"t":4,"rt":TweenAction,"sn":"CANVAS_SIZEDELTA","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"COLOR","is":true,"t":4,"rt":TweenAction,"sn":"COLOR","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"DELAYED_SOUND","is":true,"t":4,"rt":TweenAction,"sn":"DELAYED_SOUND","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"FOLLOW","is":true,"t":4,"rt":TweenAction,"sn":"FOLLOW","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"GUI_ALPHA","is":true,"t":4,"rt":TweenAction,"sn":"GUI_ALPHA","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"GUI_MOVE","is":true,"t":4,"rt":TweenAction,"sn":"GUI_MOVE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"GUI_MOVE_MARGIN","is":true,"t":4,"rt":TweenAction,"sn":"GUI_MOVE_MARGIN","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"GUI_ROTATE","is":true,"t":4,"rt":TweenAction,"sn":"GUI_ROTATE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"GUI_SCALE","is":true,"t":4,"rt":TweenAction,"sn":"GUI_SCALE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE","is":true,"t":4,"rt":TweenAction,"sn":"MOVE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_CURVED","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_CURVED","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_CURVED_LOCAL","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_CURVED_LOCAL","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_LOCAL","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_LOCAL","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_LOCAL_X","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_LOCAL_X","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_LOCAL_Y","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_LOCAL_Y","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_LOCAL_Z","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_LOCAL_Z","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_SPLINE","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_SPLINE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_SPLINE_LOCAL","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_SPLINE_LOCAL","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_TO_TRANSFORM","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_TO_TRANSFORM","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_X","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_X","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_Y","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_Y","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"MOVE_Z","is":true,"t":4,"rt":TweenAction,"sn":"MOVE_Z","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"NONE","is":true,"t":4,"rt":TweenAction,"sn":"NONE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE_AROUND","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE_AROUND","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE_AROUND_LOCAL","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE_AROUND_LOCAL","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE_LOCAL","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE_LOCAL","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE_X","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE_X","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE_Y","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE_Y","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"ROTATE_Z","is":true,"t":4,"rt":TweenAction,"sn":"ROTATE_Z","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"SCALE","is":true,"t":4,"rt":TweenAction,"sn":"SCALE","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"SCALE_X","is":true,"t":4,"rt":TweenAction,"sn":"SCALE_X","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"SCALE_Y","is":true,"t":4,"rt":TweenAction,"sn":"SCALE_Y","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"SCALE_Z","is":true,"t":4,"rt":TweenAction,"sn":"SCALE_Z","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"TEXT_ALPHA","is":true,"t":4,"rt":TweenAction,"sn":"TEXT_ALPHA","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"TEXT_COLOR","is":true,"t":4,"rt":TweenAction,"sn":"TEXT_COLOR","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"VALUE3","is":true,"t":4,"rt":TweenAction,"sn":"VALUE3","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}}]}; }, $n);
    /*TweenAction end.*/

    /*LeanTweenType start.*/
    $m("LeanTweenType", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"animationCurve","is":true,"t":4,"rt":LeanTweenType,"sn":"animationCurve","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"clamp","is":true,"t":4,"rt":LeanTweenType,"sn":"clamp","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInBack","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInBack","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInBounce","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInBounce","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInCirc","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInCirc","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInCubic","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInCubic","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInElastic","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInElastic","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInExpo","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInExpo","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutBack","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutBack","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutBounce","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutBounce","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutCirc","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutCirc","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutCubic","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutCubic","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutElastic","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutElastic","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutExpo","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutExpo","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutQuad","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutQuad","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutQuart","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutQuart","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutQuint","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutQuint","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInOutSine","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInOutSine","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInQuad","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInQuad","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInQuart","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInQuart","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInQuint","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInQuint","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeInSine","is":true,"t":4,"rt":LeanTweenType,"sn":"easeInSine","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutBack","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutBack","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutBounce","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutBounce","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutCirc","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutCirc","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutCubic","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutCubic","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutElastic","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutElastic","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutExpo","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutExpo","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutQuad","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutQuad","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutQuart","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutQuart","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutQuint","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutQuint","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeOutSine","is":true,"t":4,"rt":LeanTweenType,"sn":"easeOutSine","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeShake","is":true,"t":4,"rt":LeanTweenType,"sn":"easeShake","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"easeSpring","is":true,"t":4,"rt":LeanTweenType,"sn":"easeSpring","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"linear","is":true,"t":4,"rt":LeanTweenType,"sn":"linear","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"notUsed","is":true,"t":4,"rt":LeanTweenType,"sn":"notUsed","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"once","is":true,"t":4,"rt":LeanTweenType,"sn":"once","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"pingPong","is":true,"t":4,"rt":LeanTweenType,"sn":"pingPong","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"punch","is":true,"t":4,"rt":LeanTweenType,"sn":"punch","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}}]}; }, $n);
    /*LeanTweenType end.*/

    /*LeanProp start.*/
    $m("LeanProp", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"color","is":true,"t":4,"rt":LeanProp,"sn":"color","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"localPosition","is":true,"t":4,"rt":LeanProp,"sn":"localPosition","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"localX","is":true,"t":4,"rt":LeanProp,"sn":"localX","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"localY","is":true,"t":4,"rt":LeanProp,"sn":"localY","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"localZ","is":true,"t":4,"rt":LeanProp,"sn":"localZ","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"position","is":true,"t":4,"rt":LeanProp,"sn":"position","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"scale","is":true,"t":4,"rt":LeanProp,"sn":"scale","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"x","is":true,"t":4,"rt":LeanProp,"sn":"x","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"y","is":true,"t":4,"rt":LeanProp,"sn":"y","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}},{"a":2,"n":"z","is":true,"t":4,"rt":LeanProp,"sn":"z","box":function ($v) { return Bridge.box($v, LeanProp, System.Enum.toStringFn(LeanProp));}}]}; }, $n);
    /*LeanProp end.*/

    /*LeanTween start.*/
    $m("LeanTween", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"add","is":true,"t":8,"pi":[{"n":"a","pt":System.Array.type(UnityEngine.Vector3),"ps":0},{"n":"b","pt":$n[3].Vector3,"ps":1}],"sn":"add","rt":System.Array.type(UnityEngine.Vector3),"p":[System.Array.type(UnityEngine.Vector3),$n[3].Vector3]},{"a":2,"n":"addListener","is":true,"t":8,"pi":[{"n":"eventId","pt":$n[0].Int32,"ps":0},{"n":"callback","pt":Function,"ps":1}],"sn":"addListener","rt":$n[0].Void,"p":[$n[0].Int32,Function]},{"a":2,"n":"addListener","is":true,"t":8,"pi":[{"n":"caller","pt":$n[3].GameObject,"ps":0},{"n":"eventId","pt":$n[0].Int32,"ps":1},{"n":"callback","pt":Function,"ps":2}],"sn":"addListener$1","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Int32,Function]},{"a":2,"n":"alpha","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"alpha","rt":LTDescr,"p":[LTRect,$n[0].Single,$n[0].Single]},{"a":2,"n":"alpha","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"alpha$1","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"alpha","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"alpha$2","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"alphaCanvas","is":true,"t":8,"pi":[{"n":"canvasGroup","pt":$n[3].CanvasGroup,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"alphaCanvas","rt":LTDescr,"p":[$n[3].CanvasGroup,$n[0].Single,$n[0].Single]},{"a":2,"n":"alphaText","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"alphaText","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"alphaVertex","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"alphaVertex","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"cancel$1","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"cancel$3","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].RectTransform,"ps":0}],"sn":"cancel$6","rt":$n[0].Void,"p":[$n[3].RectTransform]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0},{"n":"uniqueId","pt":$n[0].Int32,"ps":1}],"sn":"cancel","rt":$n[0].Void,"p":[LTRect,$n[0].Int32]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0},{"n":"callOnComplete","pt":$n[0].Boolean,"ps":1}],"sn":"cancel$2","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnComplete","pt":$n[0].Boolean,"ps":1},{"n":"matchType","dv":51,"o":true,"pt":TweenAction,"ps":2}],"sn":"cancel$4","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Boolean,TweenAction]},{"a":2,"n":"cancel","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"uniqueId","pt":$n[0].Int32,"ps":1},{"n":"callOnComplete","dv":false,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"cancel$5","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"cancelAll","is":true,"t":8,"sn":"cancelAll","rt":$n[0].Void},{"a":2,"n":"cancelAll","is":true,"t":8,"pi":[{"n":"callComplete","pt":$n[0].Boolean,"ps":0}],"sn":"cancelAll$1","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"clerp","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"clerp","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"closestRot","is":true,"t":8,"pi":[{"n":"from","pt":$n[0].Single,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1}],"sn":"closestRot","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"color","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"color","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Color,$n[0].Single]},{"a":2,"n":"color","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"color$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Color,$n[0].Single]},{"a":2,"n":"colorText","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"colorText","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Color,$n[0].Single]},{"a":2,"n":"delayedCall","is":true,"t":8,"pi":[{"n":"delayTime","pt":$n[0].Single,"ps":0},{"n":"callback","pt":Function,"ps":1}],"sn":"delayedCall","rt":LTDescr,"p":[$n[0].Single,Function]},{"a":2,"n":"delayedCall","is":true,"t":8,"pi":[{"n":"delayTime","pt":$n[0].Single,"ps":0},{"n":"callback","pt":Function,"ps":1}],"sn":"delayedCall$1","rt":LTDescr,"p":[$n[0].Single,Function]},{"a":2,"n":"delayedCall","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"delayTime","pt":$n[0].Single,"ps":1},{"n":"callback","pt":Function,"ps":2}],"sn":"delayedCall$2","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,Function]},{"a":2,"n":"delayedCall","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"delayTime","pt":$n[0].Single,"ps":1},{"n":"callback","pt":Function,"ps":2}],"sn":"delayedCall$3","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,Function]},{"a":2,"n":"delayedSound","is":true,"t":8,"pi":[{"n":"audio","pt":$n[3].AudioClip,"ps":0},{"n":"pos","pt":$n[3].Vector3,"ps":1},{"n":"volume","pt":$n[0].Single,"ps":2}],"sn":"delayedSound","rt":LTDescr,"p":[$n[3].AudioClip,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"delayedSound","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"audio","pt":$n[3].AudioClip,"ps":1},{"n":"pos","pt":$n[3].Vector3,"ps":2},{"n":"volume","pt":$n[0].Single,"ps":3}],"sn":"delayedSound$1","rt":LTDescr,"p":[$n[3].GameObject,$n[3].AudioClip,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"descr","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"descr","rt":LTDescr,"p":[$n[0].Int32]},{"a":2,"n":"description","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"description","rt":LTDescr,"p":[$n[0].Int32]},{"a":2,"n":"descriptions","is":true,"t":8,"pi":[{"n":"gameObject","dv":null,"o":true,"pt":$n[3].GameObject,"ps":0}],"sn":"descriptions","rt":System.Array.type(LTDescr),"p":[$n[3].GameObject]},{"a":2,"n":"destroyAfter","is":true,"t":8,"pi":[{"n":"rect","pt":LTRect,"ps":0},{"n":"delayTime","pt":$n[0].Single,"ps":1}],"sn":"destroyAfter","rt":LTDescr,"p":[LTRect,$n[0].Single]},{"a":2,"n":"dispatchEvent","is":true,"t":8,"pi":[{"n":"eventId","pt":$n[0].Int32,"ps":0}],"sn":"dispatchEvent","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"dispatchEvent","is":true,"t":8,"pi":[{"n":"eventId","pt":$n[0].Int32,"ps":0},{"n":"data","pt":$n[0].Object,"ps":1}],"sn":"dispatchEvent$1","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Object]},{"a":2,"n":"drawBezierPath","is":true,"t":8,"pi":[{"n":"a","pt":$n[3].Vector3,"ps":0},{"n":"b","pt":$n[3].Vector3,"ps":1},{"n":"c","pt":$n[3].Vector3,"ps":2},{"n":"d","pt":$n[3].Vector3,"ps":3},{"n":"arrowSize","dv":0.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"arrowTransform","dv":null,"o":true,"pt":$n[3].Transform,"ps":5}],"sn":"drawBezierPath","rt":$n[0].Void,"p":[$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[0].Single,$n[3].Transform]},{"a":2,"n":"easeInBack","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"overshoot","dv":1.0,"o":true,"pt":$n[0].Single,"ps":3}],"sn":"easeInBack","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInBounce","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInBounce","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInCirc","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInCirc","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInCubic","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInCubic","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInElastic","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"overshoot","dv":1.0,"o":true,"pt":$n[0].Single,"ps":3},{"n":"period","dv":0.3,"o":true,"pt":$n[0].Single,"ps":4}],"sn":"easeInElastic","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInExpo","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInExpo","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutBack","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"overshoot","dv":1.0,"o":true,"pt":$n[0].Single,"ps":3}],"sn":"easeInOutBack","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutBounce","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutBounce","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutCirc","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutCirc","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutCubic","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutCubic","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutElastic","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"overshoot","dv":1.0,"o":true,"pt":$n[0].Single,"ps":3},{"n":"period","dv":0.3,"o":true,"pt":$n[0].Single,"ps":4}],"sn":"easeInOutElastic","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutExpo","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutExpo","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutQuad","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutQuad","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutQuadOpt","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"diff","pt":$n[0].Single,"ps":1},{"n":"ratioPassed","pt":$n[0].Single,"ps":2}],"sn":"easeInOutQuadOpt","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutQuadOpt","is":true,"t":8,"pi":[{"n":"start","pt":$n[3].Vector3,"ps":0},{"n":"diff","pt":$n[3].Vector3,"ps":1},{"n":"ratioPassed","pt":$n[0].Single,"ps":2}],"sn":"easeInOutQuadOpt$1","rt":$n[3].Vector3,"p":[$n[3].Vector3,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"easeInOutQuadOpt2","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"diffBy2","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"val2","pt":$n[0].Single,"ps":3}],"sn":"easeInOutQuadOpt2","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutQuart","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutQuart","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutQuint","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutQuint","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInOutSine","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInOutSine","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInQuad","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInQuad","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInQuadOpt","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"diff","pt":$n[0].Single,"ps":1},{"n":"ratioPassed","pt":$n[0].Single,"ps":2}],"sn":"easeInQuadOpt","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInQuart","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInQuart","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInQuint","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInQuint","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeInSine","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeInSine","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutBack","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"overshoot","dv":1.0,"o":true,"pt":$n[0].Single,"ps":3}],"sn":"easeOutBack","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutBounce","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutBounce","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutCirc","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutCirc","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutCubic","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutCubic","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutElastic","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2},{"n":"overshoot","dv":1.0,"o":true,"pt":$n[0].Single,"ps":3},{"n":"period","dv":0.3,"o":true,"pt":$n[0].Single,"ps":4}],"sn":"easeOutElastic","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutExpo","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutExpo","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutQuad","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutQuad","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutQuadOpt","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"diff","pt":$n[0].Single,"ps":1},{"n":"ratioPassed","pt":$n[0].Single,"ps":2}],"sn":"easeOutQuadOpt","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutQuart","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutQuart","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutQuint","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutQuint","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeOutSine","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"easeOutSine","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"followBounceOut","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"target","pt":$n[3].Transform,"ps":1},{"n":"prop","pt":LeanProp,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":6},{"n":"hitDamping","dv":0.9,"o":true,"pt":$n[0].Single,"ps":7}],"sn":"followBounceOut","rt":LTDescr,"p":[$n[3].Transform,$n[3].Transform,LeanProp,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"followDamp","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"target","pt":$n[3].Transform,"ps":1},{"n":"prop","pt":LeanProp,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4}],"sn":"followDamp","rt":LTDescr,"p":[$n[3].Transform,$n[3].Transform,LeanProp,$n[0].Single,$n[0].Single]},{"a":2,"n":"followLinear","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"target","pt":$n[3].Transform,"ps":1},{"n":"prop","pt":LeanProp,"ps":2},{"n":"moveSpeed","pt":$n[0].Single,"ps":3}],"sn":"followLinear","rt":LTDescr,"p":[$n[3].Transform,$n[3].Transform,LeanProp,$n[0].Single]},{"a":2,"n":"followSpring","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"target","pt":$n[3].Transform,"ps":1},{"n":"prop","pt":LeanProp,"ps":2},{"n":"smoothTime","pt":$n[0].Single,"ps":3},{"n":"maxSpeed","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"friction","dv":2.0,"o":true,"pt":$n[0].Single,"ps":5},{"n":"accelRate","dv":0.5,"o":true,"pt":$n[0].Single,"ps":6}],"sn":"followSpring","rt":LTDescr,"p":[$n[3].Transform,$n[3].Transform,LeanProp,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"init","is":true,"t":8,"sn":"init","rt":$n[0].Void},{"a":2,"n":"init","is":true,"t":8,"pi":[{"n":"maxSimultaneousTweens","pt":$n[0].Int32,"ps":0}],"sn":"init$1","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"init","is":true,"t":8,"pi":[{"n":"maxSimultaneousTweens","pt":$n[0].Int32,"ps":0},{"n":"maxSimultaneousSequences","pt":$n[0].Int32,"ps":1}],"sn":"init$2","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32]},{"a":1,"n":"internalOnLevelWasLoaded","is":true,"t":8,"pi":[{"n":"lvl","pt":$n[0].Int32,"ps":0}],"sn":"internalOnLevelWasLoaded","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"isPaused","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"isPaused","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isPaused","is":true,"t":8,"pi":[{"n":"gameObject","dv":null,"o":true,"pt":$n[3].GameObject,"ps":0}],"sn":"isPaused$1","rt":$n[0].Boolean,"p":[$n[3].GameObject],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isPaused","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].RectTransform,"ps":0}],"sn":"isPaused$2","rt":$n[0].Boolean,"p":[$n[3].RectTransform],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isTweening","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0}],"sn":"isTweening","rt":$n[0].Boolean,"p":[LTRect],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isTweening","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"isTweening$1","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isTweening","is":true,"t":8,"pi":[{"n":"gameObject","dv":null,"o":true,"pt":$n[3].GameObject,"ps":0}],"sn":"isTweening$2","rt":$n[0].Boolean,"p":[$n[3].GameObject],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isTweening","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].RectTransform,"ps":0}],"sn":"isTweening$3","rt":$n[0].Boolean,"p":[$n[3].RectTransform],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"linear","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"linear","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"logError","is":true,"t":8,"pi":[{"n":"error","pt":$n[0].String,"ps":0}],"sn":"logError","rt":$n[0].Object,"p":[$n[0].String]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move","rt":LTDescr,"p":[LTRect,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTBezierPath,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$1","rt":LTDescr,"p":[$n[3].GameObject,LTBezierPath,$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$2","rt":LTDescr,"p":[$n[3].GameObject,LTSpline,$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Transform,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$3","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Transform,$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$4","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$5","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$6","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"move","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"move$7","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"moveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTBezierPath,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocal","rt":LTDescr,"p":[$n[3].GameObject,LTBezierPath,$n[0].Single]},{"a":2,"n":"moveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocal$1","rt":LTDescr,"p":[$n[3].GameObject,LTSpline,$n[0].Single]},{"a":2,"n":"moveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocal$2","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"moveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocal$3","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"moveLocalX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocalX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveLocalY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocalY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveLocalZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveLocalZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveMargin","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveMargin","rt":LTDescr,"p":[LTRect,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"moveSpline","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveSpline","rt":LTDescr,"p":[$n[3].GameObject,LTSpline,$n[0].Single]},{"a":2,"n":"moveSpline","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveSpline$1","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"moveSplineLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveSplineLocal","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"moveX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveX","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveX$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveY","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveY$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"moveZ","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"moveZ$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":1,"n":"onLevelWasLoaded54","is":true,"t":8,"pi":[{"n":"scene","pt":LunaUnity.Objects.Scene,"ps":0},{"n":"mode","pt":$n[7].LoadSceneMode,"ps":1}],"sn":"onLevelWasLoaded54","rt":$n[0].Void,"p":[LunaUnity.Objects.Scene,$n[7].LoadSceneMode]},{"a":2,"n":"options","is":true,"t":8,"sn":"options","rt":LTDescr},{"a":2,"n":"options","is":true,"t":8,"pi":[{"n":"seed","pt":LTDescr,"ps":0}],"sn":"options$1","rt":LTDescr,"p":[LTDescr]},{"a":2,"n":"pause","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"pause","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"pause","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"pause$1","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":2,"n":"pause","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"uniqueId","pt":$n[0].Int32,"ps":1}],"sn":"pause$2","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Int32]},{"a":2,"n":"pauseAll","is":true,"t":8,"sn":"pauseAll","rt":$n[0].Void},{"a":2,"n":"play","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"sprites","pt":System.Array.type(UnityEngine.Sprite),"ps":1}],"sn":"play","rt":LTDescr,"p":[$n[3].RectTransform,System.Array.type(UnityEngine.Sprite)]},{"a":1,"n":"pushNewTween","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2},{"n":"tween","pt":LTDescr,"ps":3}],"sn":"pushNewTween","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single,LTDescr]},{"a":2,"n":"removeListener","is":true,"t":8,"pi":[{"n":"eventId","pt":$n[0].Int32,"ps":0}],"sn":"removeListener","rt":$n[0].Boolean,"p":[$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"removeListener","is":true,"t":8,"pi":[{"n":"eventId","pt":$n[0].Int32,"ps":0},{"n":"callback","pt":Function,"ps":1}],"sn":"removeListener$1","rt":$n[0].Boolean,"p":[$n[0].Int32,Function],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"removeListener","is":true,"t":8,"pi":[{"n":"caller","pt":$n[3].GameObject,"ps":0},{"n":"eventId","pt":$n[0].Int32,"ps":1},{"n":"callback","pt":Function,"ps":2}],"sn":"removeListener$2","rt":$n[0].Boolean,"p":[$n[3].GameObject,$n[0].Int32,Function],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"removeTween","is":true,"t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0},{"n":"shouldReset","dv":true,"o":true,"pt":$n[0].Boolean,"ps":1}],"sn":"removeTween","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"removeTween","is":true,"t":8,"pi":[{"n":"i","pt":$n[0].Int32,"ps":0},{"n":"uniqueId","pt":$n[0].Int32,"ps":1}],"sn":"removeTween$1","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"reset","is":true,"t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"resume","is":true,"t":8,"pi":[{"n":"uniqueId","pt":$n[0].Int32,"ps":0}],"sn":"resume","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"resume","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"resume$1","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":2,"n":"resume","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"uniqueId","pt":$n[0].Int32,"ps":1}],"sn":"resume$2","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Int32]},{"a":2,"n":"resumeAll","is":true,"t":8,"sn":"resumeAll","rt":$n[0].Void},{"a":2,"n":"rotate","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotate","rt":LTDescr,"p":[LTRect,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotate","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotate$1","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"rotate","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotate$2","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotate","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotate$3","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"rotateAround","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"rotateAround","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotateAround","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"rotateAround$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotateAroundLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"rotateAroundLocal","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotateAroundLocal","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"rotateAroundLocal$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotateLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotateLocal","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"rotateX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotateX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotateY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotateY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"rotateZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"rotateZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"scale","is":true,"t":8,"pi":[{"n":"ltRect","pt":LTRect,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"scale","rt":LTDescr,"p":[LTRect,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"scale","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"scale$1","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"scale","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"scale$2","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"scaleX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"scaleX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"scaleY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"scaleY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"scaleZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"scaleZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"sequence","is":true,"t":8,"pi":[{"n":"initSequence","dv":true,"o":true,"pt":$n[0].Boolean,"ps":0}],"sn":"sequence","rt":LTSeq,"p":[$n[0].Boolean]},{"a":2,"n":"size","is":true,"t":8,"pi":[{"n":"rectTrans","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"size","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"spring","is":true,"t":8,"pi":[{"n":"start","pt":$n[0].Single,"ps":0},{"n":"end","pt":$n[0].Single,"ps":1},{"n":"val","pt":$n[0].Single,"ps":2}],"sn":"spring","rt":$n[0].Single,"p":[$n[0].Single,$n[0].Single,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"textAlpha","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"textAlpha","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"textColor","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"textColor","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Color,$n[0].Single]},{"a":2,"n":"tweenOnCurve","is":true,"t":8,"pi":[{"n":"tweenDescr","pt":LTDescr,"ps":0},{"n":"ratioPassed","pt":$n[0].Single,"ps":1}],"sn":"tweenOnCurve","rt":$n[0].Single,"p":[LTDescr,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"tweenOnCurveVector","is":true,"t":8,"pi":[{"n":"tweenDescr","pt":LTDescr,"ps":0},{"n":"ratioPassed","pt":$n[0].Single,"ps":1}],"sn":"tweenOnCurveVector","rt":$n[3].Vector3,"p":[LTDescr,$n[0].Single]},{"a":2,"n":"update","is":true,"t":8,"sn":"update","rt":$n[0].Void},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"from","pt":$n[0].Single,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"value","rt":LTDescr,"p":[$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"value$8","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[3].Color,"ps":1},{"n":"to","pt":$n[3].Color,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"value$9","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[3].Vector2,"ps":1},{"n":"to","pt":$n[3].Vector2,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"value$10","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector2,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[3].Vector3,"ps":1},{"n":"to","pt":$n[3].Vector3,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"value$11","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[0].Single,"ps":2},{"n":"to","pt":$n[0].Single,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$1","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdateRatio","pt":Function,"ps":1},{"n":"from","pt":$n[0].Single,"ps":2},{"n":"to","pt":$n[0].Single,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$6","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[0].Single,"ps":2},{"n":"to","pt":$n[0].Single,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$5","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Color,"ps":2},{"n":"to","pt":$n[3].Color,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$2","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Color,"ps":2},{"n":"to","pt":$n[3].Color,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$7","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Vector2,"ps":2},{"n":"to","pt":$n[3].Vector2,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$3","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Vector2,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"value","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Vector3,"ps":2},{"n":"to","pt":$n[3].Vector3,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"value$4","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Vector3,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"maxSearch","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_maxSearch","t":8,"rt":$n[0].Int32,"fg":"maxSearch","is":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"maxSearch"},{"a":2,"n":"maxSimulataneousTweens","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_maxSimulataneousTweens","t":8,"rt":$n[0].Int32,"fg":"maxSimulataneousTweens","is":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"maxSimulataneousTweens"},{"a":2,"n":"tweenEmpty","is":true,"t":16,"rt":$n[3].GameObject,"g":{"a":2,"n":"get_tweenEmpty","t":8,"rt":$n[3].GameObject,"fg":"tweenEmpty","is":true},"fn":"tweenEmpty"},{"a":2,"n":"tweensRunning","is":true,"t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_tweensRunning","t":8,"rt":$n[0].Int32,"fg":"tweensRunning","is":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"tweensRunning"},{"a":2,"n":"EVENTS_MAX","is":true,"t":4,"rt":$n[0].Int32,"sn":"EVENTS_MAX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"INIT_LISTENERS_MAX","is":true,"t":4,"rt":$n[0].Int32,"sn":"INIT_LISTENERS_MAX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"LISTENERS_MAX","is":true,"t":4,"rt":$n[0].Int32,"sn":"LISTENERS_MAX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PI_DIV2","is":true,"t":4,"rt":$n[0].Single,"sn":"PI_DIV2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"_tweenEmpty","is":true,"t":4,"rt":$n[3].GameObject,"sn":"_tweenEmpty"},{"a":2,"n":"d","is":true,"t":4,"rt":LTDescr,"sn":"d"},{"a":2,"n":"dtActual","is":true,"t":4,"rt":$n[0].Single,"sn":"dtActual","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"dtEstimated","is":true,"t":4,"rt":$n[0].Single,"sn":"dtEstimated","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"dtManual","is":true,"t":4,"rt":$n[0].Single,"sn":"dtManual","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"eventListeners","is":true,"t":4,"rt":$n[0].Array.type(Function),"sn":"eventListeners"},{"a":1,"n":"eventsMaxSearch","is":true,"t":4,"rt":$n[0].Int32,"sn":"eventsMaxSearch","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"finishedCnt","is":true,"t":4,"rt":$n[0].Int32,"sn":"finishedCnt","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"frameRendered","is":true,"t":4,"rt":$n[0].Int32,"sn":"frameRendered","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"global_counter","is":true,"t":4,"rt":$n[0].UInt32,"sn":"global_counter","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":1,"n":"goListeners","is":true,"t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"goListeners"},{"a":1,"n":"i","is":true,"t":4,"rt":$n[0].Int32,"sn":"i","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"j","is":true,"t":4,"rt":$n[0].Int32,"sn":"j","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"maxSequences","is":true,"t":4,"rt":$n[0].Int32,"sn":"maxSequences","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"maxTweenReached","is":true,"t":4,"rt":$n[0].Int32,"sn":"maxTweenReached","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"maxTweens","is":true,"t":4,"rt":$n[0].Int32,"sn":"maxTweens","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"punch","is":true,"t":4,"rt":pc.AnimationCurve,"sn":"punch"},{"a":1,"n":"sequences","is":true,"t":4,"rt":System.Array.type(LTSeq),"sn":"sequences"},{"a":2,"n":"shake","is":true,"t":4,"rt":pc.AnimationCurve,"sn":"shake"},{"a":2,"n":"startSearch","is":true,"t":4,"rt":$n[0].Int32,"sn":"startSearch","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"tau","is":true,"t":4,"rt":$n[0].Single,"sn":"tau","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"throwErrors","is":true,"t":4,"rt":$n[0].Boolean,"sn":"throwErrors","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"tween","is":true,"t":4,"rt":LTDescr,"sn":"tween"},{"a":1,"n":"tweenMaxSearch","is":true,"t":4,"rt":$n[0].Int32,"sn":"tweenMaxSearch","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"tweens","is":true,"t":4,"rt":System.Array.type(LTDescr),"sn":"tweens"},{"a":1,"n":"tweensFinished","is":true,"t":4,"rt":$n[0].Array.type(System.Int32),"sn":"tweensFinished"},{"a":1,"n":"tweensFinishedIds","is":true,"t":4,"rt":$n[0].Array.type(System.Int32),"sn":"tweensFinishedIds"}]}; }, $n);
    /*LeanTween end.*/

    /*LTUtility start.*/
    $m("LTUtility", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"reverse","is":true,"t":8,"pi":[{"n":"arr","pt":System.Array.type(UnityEngine.Vector3),"ps":0}],"sn":"reverse","rt":System.Array.type(UnityEngine.Vector3),"p":[System.Array.type(UnityEngine.Vector3)]}]}; }, $n);
    /*LTUtility end.*/

    /*LTBezier start.*/
    $m("LTBezier", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[3].Vector3,$n[0].Single],"pi":[{"n":"a","pt":$n[3].Vector3,"ps":0},{"n":"b","pt":$n[3].Vector3,"ps":1},{"n":"c","pt":$n[3].Vector3,"ps":2},{"n":"d","pt":$n[3].Vector3,"ps":3},{"n":"precision","pt":$n[0].Single,"ps":4}],"sn":"ctor"},{"a":1,"n":"bezierPoint","t":8,"pi":[{"n":"t","pt":$n[0].Single,"ps":0}],"sn":"bezierPoint","rt":$n[3].Vector3,"p":[$n[0].Single]},{"a":1,"n":"map","t":8,"pi":[{"n":"u","pt":$n[0].Single,"ps":0}],"sn":"map","rt":$n[0].Single,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"point","t":8,"pi":[{"n":"t","pt":$n[0].Single,"ps":0}],"sn":"point","rt":$n[3].Vector3,"p":[$n[0].Single]},{"a":1,"n":"a","t":4,"rt":$n[3].Vector3,"sn":"a"},{"a":1,"n":"aa","t":4,"rt":$n[3].Vector3,"sn":"aa"},{"a":1,"n":"arcLengths","t":4,"rt":$n[0].Array.type(System.Single),"sn":"arcLengths"},{"a":1,"n":"bb","t":4,"rt":$n[3].Vector3,"sn":"bb"},{"a":1,"n":"cc","t":4,"rt":$n[3].Vector3,"sn":"cc"},{"a":1,"n":"len","t":4,"rt":$n[0].Single,"sn":"len","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"length","t":4,"rt":$n[0].Single,"sn":"length","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*LTBezier end.*/

    /*LTBezierPath start.*/
    $m("LTBezierPath", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(UnityEngine.Vector3)],"pi":[{"n":"pts_","pt":System.Array.type(UnityEngine.Vector3),"ps":0}],"sn":"$ctor1"},{"a":2,"n":"gizmoDraw","t":8,"pi":[{"n":"t","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":0}],"sn":"gizmoDraw","rt":$n[0].Void,"p":[$n[0].Single]},{"a":2,"n":"place","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"place","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"place","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1},{"n":"worldUp","pt":$n[3].Vector3,"ps":2}],"sn":"place$1","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[3].Vector3]},{"a":2,"n":"place2d","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"place2d","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"placeLocal","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"placeLocal","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"placeLocal","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1},{"n":"worldUp","pt":$n[3].Vector3,"ps":2}],"sn":"placeLocal$1","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[3].Vector3]},{"a":2,"n":"placeLocal2d","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"placeLocal2d","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"point","t":8,"pi":[{"n":"ratio","pt":$n[0].Single,"ps":0}],"sn":"point","rt":$n[3].Vector3,"p":[$n[0].Single]},{"a":2,"n":"ratioAtPoint","t":8,"pi":[{"n":"pt","pt":$n[3].Vector3,"ps":0},{"n":"precision","dv":0.01,"o":true,"pt":$n[0].Single,"ps":1}],"sn":"ratioAtPoint","rt":$n[0].Single,"p":[$n[3].Vector3,$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"setPoints","t":8,"pi":[{"n":"pts_","pt":System.Array.type(UnityEngine.Vector3),"ps":0}],"sn":"setPoints","rt":$n[0].Void,"p":[System.Array.type(UnityEngine.Vector3)]},{"a":2,"n":"distance","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_distance","t":8,"rt":$n[0].Single,"fg":"distance","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"fn":"distance"},{"a":1,"n":"beziers","t":4,"rt":System.Array.type(LTBezier),"sn":"beziers"},{"a":1,"n":"currentBezier","t":4,"rt":$n[0].Int32,"sn":"currentBezier","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"length","t":4,"rt":$n[0].Single,"sn":"length","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"lengthRatio","t":4,"rt":$n[0].Array.type(System.Single),"sn":"lengthRatio"},{"a":2,"n":"orientToPath","t":4,"rt":$n[0].Boolean,"sn":"orientToPath","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"orientToPath2d","t":4,"rt":$n[0].Boolean,"sn":"orientToPath2d","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"previousBezier","t":4,"rt":$n[0].Int32,"sn":"previousBezier","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"pts","t":4,"rt":System.Array.type(UnityEngine.Vector3),"sn":"pts"}]}; }, $n);
    /*LTBezierPath end.*/

    /*LTSpline start.*/
    $m("LTSpline", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"p":[System.Array.type(UnityEngine.Vector3)],"pi":[{"n":"pts","pt":System.Array.type(UnityEngine.Vector3),"ps":0}],"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[System.Array.type(UnityEngine.Vector3),$n[0].Boolean],"pi":[{"n":"pts","pt":System.Array.type(UnityEngine.Vector3),"ps":0},{"n":"constantSpeed","pt":$n[0].Boolean,"ps":1}],"sn":"$ctor1"},{"a":2,"n":"drawGizmo","t":8,"pi":[{"n":"color","pt":$n[3].Color,"ps":0}],"sn":"drawGizmo","rt":$n[0].Void,"p":[$n[3].Color]},{"a":2,"n":"drawGizmo","is":true,"t":8,"pi":[{"n":"arr","pt":System.Array.type(UnityEngine.Transform),"ps":0},{"n":"color","pt":$n[3].Color,"ps":1}],"sn":"drawGizmo","rt":$n[0].Void,"p":[System.Array.type(UnityEngine.Transform),$n[3].Color]},{"a":2,"n":"drawLine","is":true,"t":8,"pi":[{"n":"arr","pt":System.Array.type(UnityEngine.Transform),"ps":0},{"n":"width","pt":$n[0].Single,"ps":1},{"n":"color","pt":$n[3].Color,"ps":2}],"sn":"drawLine","rt":$n[0].Void,"p":[System.Array.type(UnityEngine.Transform),$n[0].Single,$n[3].Color]},{"a":2,"n":"generateVectors","t":8,"sn":"generateVectors","rt":System.Array.type(UnityEngine.Vector3)},{"a":2,"n":"gizmoDraw","t":8,"pi":[{"n":"t","dv":-1.0,"o":true,"pt":$n[0].Single,"ps":0}],"sn":"gizmoDraw","rt":$n[0].Void,"p":[$n[0].Single]},{"a":1,"n":"init","t":8,"pi":[{"n":"pts","pt":System.Array.type(UnityEngine.Vector3),"ps":0},{"n":"constantSpeed","pt":$n[0].Boolean,"ps":1}],"sn":"init","rt":$n[0].Void,"p":[System.Array.type(UnityEngine.Vector3),$n[0].Boolean]},{"a":2,"n":"interp","t":8,"pi":[{"n":"t","pt":$n[0].Single,"ps":0}],"sn":"interp","rt":$n[3].Vector3,"p":[$n[0].Single]},{"a":2,"n":"map","t":8,"pi":[{"n":"u","pt":$n[0].Single,"ps":0}],"sn":"map","rt":$n[3].Vector3,"p":[$n[0].Single]},{"a":2,"n":"place","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"place","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"place","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1},{"n":"worldUp","pt":$n[3].Vector3,"ps":2}],"sn":"place$1","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[3].Vector3]},{"a":2,"n":"place2d","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"place2d","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"placeLocal","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"placeLocal","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"placeLocal","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1},{"n":"worldUp","pt":$n[3].Vector3,"ps":2}],"sn":"placeLocal$1","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[3].Vector3]},{"a":2,"n":"placeLocal2d","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"ratio","pt":$n[0].Single,"ps":1}],"sn":"placeLocal2d","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"point","t":8,"pi":[{"n":"ratio","pt":$n[0].Single,"ps":0}],"sn":"point","rt":$n[3].Vector3,"p":[$n[0].Single]},{"a":2,"n":"ratioAtPoint","t":8,"pi":[{"n":"pt","pt":$n[3].Vector3,"ps":0}],"sn":"ratioAtPoint","rt":$n[0].Single,"p":[$n[3].Vector3],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"DISTANCE_COUNT","is":true,"t":4,"rt":$n[0].Int32,"sn":"DISTANCE_COUNT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"SUBLINE_COUNT","is":true,"t":4,"rt":$n[0].Int32,"sn":"SUBLINE_COUNT","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"constantSpeed","t":4,"rt":$n[0].Boolean,"sn":"constantSpeed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"currPt","t":4,"rt":$n[0].Int32,"sn":"currPt","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"distance","t":4,"rt":$n[0].Single,"sn":"distance","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"numSections","t":4,"rt":$n[0].Int32,"sn":"numSections","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"orientToPath","t":4,"rt":$n[0].Boolean,"sn":"orientToPath","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"orientToPath2d","t":4,"rt":$n[0].Boolean,"sn":"orientToPath2d","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"pts","t":4,"rt":System.Array.type(UnityEngine.Vector3),"sn":"pts"},{"a":2,"n":"ptsAdj","t":4,"rt":System.Array.type(UnityEngine.Vector3),"sn":"ptsAdj"},{"a":2,"n":"ptsAdjLength","t":4,"rt":$n[0].Int32,"sn":"ptsAdjLength","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*LTSpline end.*/

    /*LTRect start.*/
    $m("LTRect", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[3].Rect],"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0}],"sn":"$ctor4"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"pi":[{"n":"x","pt":$n[0].Single,"ps":0},{"n":"y","pt":$n[0].Single,"ps":1},{"n":"width","pt":$n[0].Single,"ps":2},{"n":"height","pt":$n[0].Single,"ps":3}],"sn":"$ctor1"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"pi":[{"n":"x","pt":$n[0].Single,"ps":0},{"n":"y","pt":$n[0].Single,"ps":1},{"n":"width","pt":$n[0].Single,"ps":2},{"n":"height","pt":$n[0].Single,"ps":3},{"n":"alpha","pt":$n[0].Single,"ps":4}],"sn":"$ctor2"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single,$n[0].Single],"pi":[{"n":"x","pt":$n[0].Single,"ps":0},{"n":"y","pt":$n[0].Single,"ps":1},{"n":"width","pt":$n[0].Single,"ps":2},{"n":"height","pt":$n[0].Single,"ps":3},{"n":"alpha","pt":$n[0].Single,"ps":4},{"n":"rotation","pt":$n[0].Single,"ps":5}],"sn":"$ctor3"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":2,"n":"reset","t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"resetForRotation","t":8,"sn":"resetForRotation","rt":$n[0].Void},{"a":2,"n":"setAlpha","t":8,"pi":[{"n":"alpha","pt":$n[0].Single,"ps":0}],"sn":"setAlpha","rt":LTRect,"p":[$n[0].Single]},{"a":2,"n":"setColor","t":8,"pi":[{"n":"color","pt":$n[3].Color,"ps":0}],"sn":"setColor","rt":LTRect,"p":[$n[3].Color]},{"a":2,"n":"setFontScaleToFit","t":8,"pi":[{"n":"fontScaleToFit","pt":$n[0].Boolean,"ps":0}],"sn":"setFontScaleToFit","rt":LTRect,"p":[$n[0].Boolean]},{"a":2,"n":"setId","t":8,"pi":[{"n":"id","pt":$n[0].Int32,"ps":0},{"n":"counter","pt":$n[0].Int32,"ps":1}],"sn":"setId","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Int32]},{"a":2,"n":"setLabel","t":8,"pi":[{"n":"str","pt":$n[0].String,"ps":0}],"sn":"setLabel","rt":LTRect,"p":[$n[0].String]},{"a":2,"n":"setSizeByHeight","t":8,"pi":[{"n":"sizeByHeight","pt":$n[0].Boolean,"ps":0}],"sn":"setSizeByHeight","rt":LTRect,"p":[$n[0].Boolean]},{"a":2,"n":"setStyle","t":8,"pi":[{"n":"style","pt":( pc.stubProxy.generateConstructorFor( 'UnityEngine.GUIStyle' ) ),"ps":0}],"sn":"setStyle","rt":LTRect,"p":[( pc.stubProxy.generateConstructorFor( 'UnityEngine.GUIStyle' ) )]},{"a":2,"n":"setUseSimpleScale","t":8,"pi":[{"n":"useSimpleScale","pt":$n[0].Boolean,"ps":0}],"sn":"setUseSimpleScale","rt":LTRect,"p":[$n[0].Boolean]},{"a":2,"n":"setUseSimpleScale","t":8,"pi":[{"n":"useSimpleScale","pt":$n[0].Boolean,"ps":0},{"n":"relativeRect","pt":$n[3].Rect,"ps":1}],"sn":"setUseSimpleScale$1","rt":LTRect,"p":[$n[0].Boolean,$n[3].Rect]},{"a":2,"n":"hasInitiliazed","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_hasInitiliazed","t":8,"rt":$n[0].Boolean,"fg":"hasInitiliazed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"hasInitiliazed"},{"a":2,"n":"height","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_height","t":8,"rt":$n[0].Single,"fg":"height","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_height","t":8,"p":[$n[0].Single],"rt":$n[0].Void,"fs":"height"},"fn":"height"},{"a":2,"n":"id","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_id","t":8,"rt":$n[0].Int32,"fg":"id","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"id"},{"a":2,"n":"rect","t":16,"rt":$n[3].Rect,"g":{"a":2,"n":"get_rect","t":8,"rt":$n[3].Rect,"fg":"rect"},"s":{"a":2,"n":"set_rect","t":8,"p":[$n[3].Rect],"rt":$n[0].Void,"fs":"rect"},"fn":"rect"},{"a":2,"n":"width","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_width","t":8,"rt":$n[0].Single,"fg":"width","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_width","t":8,"p":[$n[0].Single],"rt":$n[0].Void,"fs":"width"},"fn":"width"},{"a":2,"n":"x","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_x","t":8,"rt":$n[0].Single,"fg":"x","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_x","t":8,"p":[$n[0].Single],"rt":$n[0].Void,"fs":"x"},"fn":"x"},{"a":2,"n":"y","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_y","t":8,"rt":$n[0].Single,"fg":"y","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_y","t":8,"p":[$n[0].Single],"rt":$n[0].Void,"fs":"y"},"fn":"y"},{"a":1,"n":"_id","t":4,"rt":$n[0].Int32,"sn":"_id","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"_rect","t":4,"rt":$n[3].Rect,"sn":"_rect"},{"a":2,"n":"alpha","t":4,"rt":$n[0].Single,"sn":"alpha","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"alphaEnabled","t":4,"rt":$n[0].Boolean,"sn":"alphaEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"color","t":4,"rt":$n[3].Color,"sn":"color"},{"a":2,"n":"colorTouched","is":true,"t":4,"rt":$n[0].Boolean,"sn":"colorTouched","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"counter","t":4,"rt":$n[0].Int32,"sn":"counter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"fontScaleToFit","t":4,"rt":$n[0].Boolean,"sn":"fontScaleToFit","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"labelStr","t":4,"rt":$n[0].String,"sn":"labelStr"},{"a":2,"n":"margin","t":4,"rt":$n[3].Vector2,"sn":"margin"},{"a":2,"n":"pivot","t":4,"rt":$n[3].Vector2,"sn":"pivot"},{"a":2,"n":"relativeRect","t":4,"rt":$n[3].Rect,"sn":"relativeRect"},{"a":2,"n":"rotateEnabled","t":4,"rt":$n[0].Boolean,"sn":"rotateEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"rotateFinished","t":4,"rt":$n[0].Boolean,"sn":"rotateFinished","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"rotation","t":4,"rt":$n[0].Single,"sn":"rotation","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"sizeByHeight","t":4,"rt":$n[0].Boolean,"sn":"sizeByHeight","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"style","t":4,"rt":( pc.stubProxy.generateConstructorFor( 'UnityEngine.GUIStyle' ) ),"sn":"style"},{"a":2,"n":"texture","t":4,"rt":$n[3].Texture,"sn":"texture"},{"a":2,"n":"type","t":4,"rt":LTGUI.Element_Type,"sn":"type","box":function ($v) { return Bridge.box($v, LTGUI.Element_Type, System.Enum.toStringFn(LTGUI.Element_Type));}},{"a":2,"n":"useColor","t":4,"rt":$n[0].Boolean,"sn":"useColor","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"useSimpleScale","t":4,"rt":$n[0].Boolean,"sn":"useSimpleScale","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*LTRect end.*/

    /*LTEvent start.*/
    $m("LTEvent", function () { return {"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[0].Int32,$n[0].Object],"pi":[{"n":"id","pt":$n[0].Int32,"ps":0},{"n":"data","pt":$n[0].Object,"ps":1}],"sn":"ctor"},{"a":2,"n":"data","t":4,"rt":$n[0].Object,"sn":"data"},{"a":2,"n":"id","t":4,"rt":$n[0].Int32,"sn":"id","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*LTEvent end.*/

    /*LTGUI start.*/
    $m("LTGUI", function () { return {"nested":[LTGUI.Element_Type],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"checkOnScreen","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0}],"sn":"checkOnScreen","rt":$n[0].Boolean,"p":[$n[3].Rect],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"checkWithinRect","is":true,"t":8,"pi":[{"n":"vec2","pt":$n[3].Vector2,"ps":0},{"n":"rect","pt":$n[3].Rect,"ps":1}],"sn":"checkWithinRect","rt":$n[0].Boolean,"p":[$n[3].Vector2,$n[3].Rect],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"destroy","is":true,"t":8,"pi":[{"n":"id","pt":$n[0].Int32,"ps":0}],"sn":"destroy","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"destroyAll","is":true,"t":8,"pi":[{"n":"depth","pt":$n[0].Int32,"ps":0}],"sn":"destroyAll","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"element","is":true,"t":8,"pi":[{"n":"rect","pt":LTRect,"ps":0},{"n":"depth","pt":$n[0].Int32,"ps":1}],"sn":"element","rt":LTRect,"p":[LTRect,$n[0].Int32]},{"a":2,"n":"firstTouch","is":true,"t":8,"sn":"firstTouch","rt":$n[3].Vector2},{"a":2,"n":"hasNoOverlap","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0},{"n":"depth","pt":$n[0].Int32,"ps":1}],"sn":"hasNoOverlap","rt":$n[0].Boolean,"p":[$n[3].Rect,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"init","is":true,"t":8,"sn":"init","rt":$n[0].Void},{"a":2,"n":"initRectCheck","is":true,"t":8,"sn":"initRectCheck","rt":$n[0].Void},{"a":2,"n":"label","is":true,"t":8,"pi":[{"n":"rect","pt":LTRect,"ps":0},{"n":"label","pt":$n[0].String,"ps":1},{"n":"depth","pt":$n[0].Int32,"ps":2}],"sn":"label","rt":LTRect,"p":[LTRect,$n[0].String,$n[0].Int32]},{"a":2,"n":"label","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0},{"n":"label","pt":$n[0].String,"ps":1},{"n":"depth","pt":$n[0].Int32,"ps":2}],"sn":"label$1","rt":LTRect,"p":[$n[3].Rect,$n[0].String,$n[0].Int32]},{"a":2,"n":"pressedWithinRect","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0}],"sn":"pressedWithinRect","rt":$n[0].Boolean,"p":[$n[3].Rect],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"reset","is":true,"t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"texture","is":true,"t":8,"pi":[{"n":"rect","pt":LTRect,"ps":0},{"n":"texture","pt":$n[3].Texture,"ps":1},{"n":"depth","pt":$n[0].Int32,"ps":2}],"sn":"texture","rt":LTRect,"p":[LTRect,$n[3].Texture,$n[0].Int32]},{"a":2,"n":"texture","is":true,"t":8,"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0},{"n":"texture","pt":$n[3].Texture,"ps":1},{"n":"depth","pt":$n[0].Int32,"ps":2}],"sn":"texture$1","rt":LTRect,"p":[$n[3].Rect,$n[3].Texture,$n[0].Int32]},{"a":2,"n":"update","is":true,"t":8,"pi":[{"n":"updateLevel","pt":$n[0].Int32,"ps":0}],"sn":"update","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"BUTTONS_MAX","is":true,"t":4,"rt":$n[0].Int32,"sn":"BUTTONS_MAX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"RECTS_PER_LEVEL","is":true,"t":4,"rt":$n[0].Int32,"sn":"RECTS_PER_LEVEL","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"RECT_LEVELS","is":true,"t":4,"rt":$n[0].Int32,"sn":"RECT_LEVELS","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"buttonLastFrame","is":true,"t":4,"rt":$n[0].Array.type(System.Int32),"sn":"buttonLastFrame"},{"a":1,"n":"buttonLevels","is":true,"t":4,"rt":$n[0].Array.type(System.Int32),"sn":"buttonLevels"},{"a":1,"n":"buttons","is":true,"t":4,"rt":System.Array.type(UnityEngine.Rect),"sn":"buttons"},{"a":1,"n":"color","is":true,"t":4,"rt":$n[3].Color,"sn":"color"},{"a":1,"n":"global_counter","is":true,"t":4,"rt":$n[0].Int32,"sn":"global_counter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"isGUIEnabled","is":true,"t":4,"rt":$n[0].Boolean,"sn":"isGUIEnabled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"levelDepths","is":true,"t":4,"rt":$n[0].Array.type(System.Int32),"sn":"levelDepths"},{"a":1,"n":"levels","is":true,"t":4,"rt":System.Array.type(LTRect),"sn":"levels"},{"a":1,"n":"r","is":true,"t":4,"rt":LTRect,"sn":"r"}]}; }, $n);
    /*LTGUI end.*/

    /*LTGUI+Element_Type start.*/
    $m("LTGUI.Element_Type", function () { return {"td":LTGUI,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Label","is":true,"t":4,"rt":LTGUI.Element_Type,"sn":"Label","box":function ($v) { return Bridge.box($v, LTGUI.Element_Type, System.Enum.toStringFn(LTGUI.Element_Type));}},{"a":2,"n":"Texture","is":true,"t":4,"rt":LTGUI.Element_Type,"sn":"Texture","box":function ($v) { return Bridge.box($v, LTGUI.Element_Type, System.Enum.toStringFn(LTGUI.Element_Type));}}]}; }, $n);
    /*LTGUI+Element_Type end.*/

    /*LeanTweenExt start.*/
    $m("LeanTweenExt", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"LeanAlpha","is":true,"t":8,"pi":[{"n":"canvas","pt":$n[3].CanvasGroup,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanAlpha","rt":LTDescr,"p":[$n[3].CanvasGroup,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanAlpha","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanAlpha$1","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanAlpha","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanAlpha$2","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanAlphaText","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanAlphaText","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanAlphaVertex","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanAlphaVertex","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanCancel","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"LeanCancel","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":2,"n":"LeanCancel","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0}],"sn":"LeanCancel$3","rt":$n[0].Void,"p":[$n[3].RectTransform]},{"a":2,"n":"LeanCancel","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnComplete","pt":$n[0].Boolean,"ps":1}],"sn":"LeanCancel$1","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Boolean]},{"a":2,"n":"LeanCancel","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"uniqueId","pt":$n[0].Int32,"ps":1},{"n":"callOnComplete","dv":false,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"LeanCancel$2","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"LeanColor","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0}],"sn":"LeanColor$1","rt":$n[3].Color,"p":[$n[3].Transform]},{"a":2,"n":"LeanColor","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanColor","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Color,$n[0].Single]},{"a":2,"n":"LeanColorText","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanColorText","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Color,$n[0].Single]},{"a":2,"n":"LeanDelayedCall","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"delayTime","pt":$n[0].Single,"ps":1},{"n":"callback","pt":Function,"ps":2}],"sn":"LeanDelayedCall","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,Function]},{"a":2,"n":"LeanDelayedCall","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"delayTime","pt":$n[0].Single,"ps":1},{"n":"callback","pt":Function,"ps":2}],"sn":"LeanDelayedCall$1","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,Function]},{"a":2,"n":"LeanIsPaused","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"LeanIsPaused","rt":$n[0].Boolean,"p":[$n[3].GameObject],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"LeanIsPaused","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0}],"sn":"LeanIsPaused$1","rt":$n[0].Boolean,"p":[$n[3].RectTransform],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"LeanIsTweening","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"LeanIsTweening","rt":$n[0].Boolean,"p":[$n[3].GameObject],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTBezierPath,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove","rt":LTDescr,"p":[$n[3].GameObject,LTBezierPath,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$1","rt":LTDescr,"p":[$n[3].GameObject,LTSpline,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$2","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$3","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$4","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$5","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":LTBezierPath,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$6","rt":LTDescr,"p":[$n[3].Transform,LTBezierPath,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$7","rt":LTDescr,"p":[$n[3].Transform,LTSpline,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$8","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$9","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanMove","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMove$10","rt":LTDescr,"p":[$n[3].Transform,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"LeanMoveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTBezierPath,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocal","rt":LTDescr,"p":[$n[3].GameObject,LTBezierPath,$n[0].Single]},{"a":2,"n":"LeanMoveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocal$1","rt":LTDescr,"p":[$n[3].GameObject,LTSpline,$n[0].Single]},{"a":2,"n":"LeanMoveLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocal$2","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanMoveLocal","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":LTBezierPath,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocal$3","rt":LTDescr,"p":[$n[3].Transform,LTBezierPath,$n[0].Single]},{"a":2,"n":"LeanMoveLocal","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocal$4","rt":LTDescr,"p":[$n[3].Transform,LTSpline,$n[0].Single]},{"a":2,"n":"LeanMoveLocal","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocal$5","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanMoveLocalX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocalX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveLocalX","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocalX$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveLocalY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocalY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveLocalY","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocalY$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveLocalZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocalZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveLocalZ","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveLocalZ$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveSpline","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveSpline","rt":LTDescr,"p":[$n[3].GameObject,LTSpline,$n[0].Single]},{"a":2,"n":"LeanMoveSpline","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveSpline$1","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"LeanMoveSpline","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":LTSpline,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveSpline$2","rt":LTDescr,"p":[$n[3].Transform,LTSpline,$n[0].Single]},{"a":2,"n":"LeanMoveSpline","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveSpline$3","rt":LTDescr,"p":[$n[3].Transform,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"LeanMoveSplineLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveSplineLocal","rt":LTDescr,"p":[$n[3].GameObject,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"LeanMoveSplineLocal","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveSplineLocal$1","rt":LTDescr,"p":[$n[3].Transform,System.Array.type(UnityEngine.Vector3),$n[0].Single]},{"a":2,"n":"LeanMoveX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveX","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveX$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveX","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveX$2","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveY","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveY$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveY","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveY$2","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveZ","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveZ$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanMoveZ","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanMoveZ$2","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanPause","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"LeanPause","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":2,"n":"LeanPlay","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"sprites","pt":System.Array.type(UnityEngine.Sprite),"ps":1}],"sn":"LeanPlay","rt":LTDescr,"p":[$n[3].RectTransform,System.Array.type(UnityEngine.Sprite)]},{"a":2,"n":"LeanResume","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"LeanResume","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":2,"n":"LeanRotate","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotate","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanRotate","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotate$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanRotate","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotate$2","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanRotateAround","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanRotateAround","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateAround","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanRotateAround$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateAround","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanRotateAround$2","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateAroundLocal","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanRotateAroundLocal","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateAroundLocal","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanRotateAroundLocal$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateAroundLocal","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"axis","pt":$n[3].Vector3,"ps":1},{"n":"add","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanRotateAroundLocal$2","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector3,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotateX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateX","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotateX$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotateY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateY","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotateY$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotateZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanRotateZ","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanRotateZ$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanScale","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScale","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanScale","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScale$1","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanScale","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScale$2","rt":LTDescr,"p":[$n[3].Transform,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanScaleX","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScaleX","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanScaleX","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScaleX$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanScaleY","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScaleY","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanScaleY","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScaleY$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanScaleZ","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScaleZ","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanScaleZ","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanScaleZ$1","rt":LTDescr,"p":[$n[3].Transform,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanSetLocalPosX","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"LeanSetLocalPosX","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"LeanSetLocalPosY","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"LeanSetLocalPosY","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"LeanSetLocalPosZ","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"LeanSetLocalPosZ","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"LeanSetPosX","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"LeanSetPosX","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"LeanSetPosY","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"LeanSetPosY","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"LeanSetPosZ","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"LeanSetPosZ","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"LeanSize","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].Vector2,"ps":1},{"n":"time","pt":$n[0].Single,"ps":2}],"sn":"LeanSize","rt":LTDescr,"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanValue$6","rt":LTDescr,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[3].Color,"ps":1},{"n":"to","pt":$n[3].Color,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanValue$7","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[3].Vector2,"ps":1},{"n":"to","pt":$n[3].Vector2,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanValue$8","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector2,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[3].Vector3,"ps":1},{"n":"to","pt":$n[3].Vector3,"ps":2},{"n":"time","pt":$n[0].Single,"ps":3}],"sn":"LeanValue$9","rt":LTDescr,"p":[$n[3].GameObject,$n[3].Vector3,$n[3].Vector3,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[0].Single,"ps":2},{"n":"to","pt":$n[0].Single,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"LeanValue","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[0].Single,"ps":2},{"n":"to","pt":$n[0].Single,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"LeanValue$5","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[0].Single,"ps":2},{"n":"to","pt":$n[0].Single,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"LeanValue$4","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Color,"ps":2},{"n":"to","pt":$n[3].Color,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"LeanValue$1","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Vector2,"ps":2},{"n":"to","pt":$n[3].Vector2,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"LeanValue$2","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Vector2,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"LeanValue","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callOnUpdate","pt":Function,"ps":1},{"n":"from","pt":$n[3].Vector3,"ps":2},{"n":"to","pt":$n[3].Vector3,"ps":3},{"n":"time","pt":$n[0].Single,"ps":4}],"sn":"LeanValue$3","rt":LTDescr,"p":[$n[3].GameObject,Function,$n[3].Vector3,$n[3].Vector3,$n[0].Single]}]}; }, $n);
    /*LeanTweenExt end.*/

    /*LTDescr start.*/
    $m("LTDescr", function () { return {"nested":[Function,Function],"att":1048577,"a":2,"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"ToString","t":8,"sn":"toString","rt":$n[0].String},{"a":1,"n":"alphaRecursive","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1},{"n":"recursiveLevel","dv":0,"o":true,"pt":$n[0].Int32,"ps":2}],"sn":"alphaRecursive","rt":$n[0].Void,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Int32]},{"a":1,"n":"alphaRecursive","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1},{"n":"useRecursion","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"alphaRecursive$1","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[0].Boolean]},{"a":1,"n":"alphaRecursiveSprite","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"alphaRecursiveSprite","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single]},{"a":2,"n":"callOnCompletes","t":8,"sn":"callOnCompletes","rt":$n[0].Void},{"a":1,"n":"callback","t":8,"sn":"callback","rt":$n[0].Void},{"a":2,"n":"cancel","t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0}],"sn":"cancel","rt":LTDescr,"p":[$n[3].GameObject]},{"a":1,"n":"colorRecursive","is":true,"t":8,"pi":[{"n":"rectTransform","pt":$n[3].RectTransform,"ps":0},{"n":"toColor","pt":$n[3].Color,"ps":1}],"sn":"colorRecursive","rt":$n[0].Void,"p":[$n[3].RectTransform,$n[3].Color]},{"a":1,"n":"colorRecursive","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"toColor","pt":$n[3].Color,"ps":1},{"n":"useRecursion","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"colorRecursive$1","rt":$n[0].Void,"p":[$n[3].Transform,$n[3].Color,$n[0].Boolean]},{"a":1,"n":"colorRecursiveSprite","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0},{"n":"toColor","pt":$n[3].Color,"ps":1}],"sn":"colorRecursiveSprite","rt":$n[0].Void,"p":[$n[3].Transform,$n[3].Color]},{"a":1,"n":"easeInBack","t":8,"sn":"easeInBack","rt":$n[3].Vector3},{"a":1,"n":"easeInBounce","t":8,"sn":"easeInBounce","rt":$n[3].Vector3},{"a":1,"n":"easeInCirc","t":8,"sn":"easeInCirc","rt":$n[3].Vector3},{"a":1,"n":"easeInCubic","t":8,"sn":"easeInCubic","rt":$n[3].Vector3},{"a":1,"n":"easeInElastic","t":8,"sn":"easeInElastic","rt":$n[3].Vector3},{"a":1,"n":"easeInExpo","t":8,"sn":"easeInExpo","rt":$n[3].Vector3},{"a":1,"n":"easeInOutBack","t":8,"sn":"easeInOutBack","rt":$n[3].Vector3},{"a":1,"n":"easeInOutBounce","t":8,"sn":"easeInOutBounce","rt":$n[3].Vector3},{"a":1,"n":"easeInOutCirc","t":8,"sn":"easeInOutCirc","rt":$n[3].Vector3},{"a":1,"n":"easeInOutCubic","t":8,"sn":"easeInOutCubic","rt":$n[3].Vector3},{"a":1,"n":"easeInOutElastic","t":8,"sn":"easeInOutElastic","rt":$n[3].Vector3},{"a":1,"n":"easeInOutExpo","t":8,"sn":"easeInOutExpo","rt":$n[3].Vector3},{"a":1,"n":"easeInOutQuad","t":8,"sn":"easeInOutQuad","rt":$n[3].Vector3},{"a":1,"n":"easeInOutQuart","t":8,"sn":"easeInOutQuart","rt":$n[3].Vector3},{"a":1,"n":"easeInOutQuint","t":8,"sn":"easeInOutQuint","rt":$n[3].Vector3},{"a":1,"n":"easeInOutSine","t":8,"sn":"easeInOutSine","rt":$n[3].Vector3},{"a":1,"n":"easeInQuad","t":8,"sn":"easeInQuad","rt":$n[3].Vector3},{"a":1,"n":"easeInQuart","t":8,"sn":"easeInQuart","rt":$n[3].Vector3},{"a":1,"n":"easeInQuint","t":8,"sn":"easeInQuint","rt":$n[3].Vector3},{"a":1,"n":"easeInSine","t":8,"sn":"easeInSine","rt":$n[3].Vector3},{"a":1,"n":"easeLinear","t":8,"sn":"easeLinear","rt":$n[3].Vector3},{"a":1,"n":"easeOutBack","t":8,"sn":"easeOutBack","rt":$n[3].Vector3},{"a":1,"n":"easeOutBounce","t":8,"sn":"easeOutBounce","rt":$n[3].Vector3},{"a":1,"n":"easeOutCirc","t":8,"sn":"easeOutCirc","rt":$n[3].Vector3},{"a":1,"n":"easeOutCubic","t":8,"sn":"easeOutCubic","rt":$n[3].Vector3},{"a":1,"n":"easeOutElastic","t":8,"sn":"easeOutElastic","rt":$n[3].Vector3},{"a":1,"n":"easeOutExpo","t":8,"sn":"easeOutExpo","rt":$n[3].Vector3},{"a":1,"n":"easeOutQuad","t":8,"sn":"easeOutQuad","rt":$n[3].Vector3},{"a":1,"n":"easeOutQuart","t":8,"sn":"easeOutQuart","rt":$n[3].Vector3},{"a":1,"n":"easeOutQuint","t":8,"sn":"easeOutQuint","rt":$n[3].Vector3},{"a":1,"n":"easeOutSine","t":8,"sn":"easeOutSine","rt":$n[3].Vector3},{"a":1,"n":"easeSpring","t":8,"sn":"easeSpring","rt":$n[3].Vector3},{"a":1,"n":"init","t":8,"sn":"init","rt":$n[0].Void},{"a":1,"n":"initCanvasRotateAround","t":8,"sn":"initCanvasRotateAround","rt":$n[0].Void},{"a":1,"n":"initFromInternal","t":8,"sn":"initFromInternal","rt":$n[0].Void},{"a":1,"n":"initSpeed","t":8,"sn":"initSpeed","rt":$n[0].Void},{"a":2,"n":"pause","t":8,"sn":"pause","rt":LTDescr},{"a":2,"n":"reset","t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"resume","t":8,"sn":"resume","rt":LTDescr},{"a":2,"n":"setAlpha","t":8,"sn":"setAlpha","rt":LTDescr},{"a":2,"n":"setAlphaVertex","t":8,"sn":"setAlphaVertex","rt":LTDescr},{"a":2,"n":"setAudio","t":8,"pi":[{"n":"audio","pt":$n[0].Object,"ps":0}],"sn":"setAudio","rt":LTDescr,"p":[$n[0].Object]},{"a":2,"n":"setAxis","t":8,"pi":[{"n":"axis","pt":$n[3].Vector3,"ps":0}],"sn":"setAxis","rt":LTDescr,"p":[$n[3].Vector3]},{"a":2,"n":"setCallback","t":8,"sn":"setCallback","rt":LTDescr},{"a":2,"n":"setCallbackColor","t":8,"sn":"setCallbackColor","rt":LTDescr},{"a":2,"n":"setCanvasAlpha","t":8,"sn":"setCanvasAlpha","rt":LTDescr},{"a":2,"n":"setCanvasColor","t":8,"sn":"setCanvasColor","rt":LTDescr},{"a":2,"n":"setCanvasGroupAlpha","t":8,"sn":"setCanvasGroupAlpha","rt":LTDescr},{"a":2,"n":"setCanvasMove","t":8,"sn":"setCanvasMove","rt":LTDescr},{"a":2,"n":"setCanvasMoveX","t":8,"sn":"setCanvasMoveX","rt":LTDescr},{"a":2,"n":"setCanvasMoveY","t":8,"sn":"setCanvasMoveY","rt":LTDescr},{"a":2,"n":"setCanvasMoveZ","t":8,"sn":"setCanvasMoveZ","rt":LTDescr},{"a":2,"n":"setCanvasPlaySprite","t":8,"sn":"setCanvasPlaySprite","rt":LTDescr},{"a":2,"n":"setCanvasRotateAround","t":8,"sn":"setCanvasRotateAround","rt":LTDescr},{"a":2,"n":"setCanvasRotateAroundLocal","t":8,"sn":"setCanvasRotateAroundLocal","rt":LTDescr},{"a":2,"n":"setCanvasScale","t":8,"sn":"setCanvasScale","rt":LTDescr},{"a":2,"n":"setCanvasSizeDelta","t":8,"sn":"setCanvasSizeDelta","rt":LTDescr},{"a":2,"n":"setColor","t":8,"sn":"setColor","rt":LTDescr},{"a":2,"n":"setDelay","t":8,"pi":[{"n":"delay","pt":$n[0].Single,"ps":0}],"sn":"setDelay","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setDelayedSound","t":8,"sn":"setDelayedSound","rt":LTDescr},{"a":2,"n":"setDestroyOnComplete","t":8,"pi":[{"n":"doesDestroy","pt":$n[0].Boolean,"ps":0}],"sn":"setDestroyOnComplete","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setDiff","t":8,"pi":[{"n":"diff","pt":$n[3].Vector3,"ps":0}],"sn":"setDiff","rt":LTDescr,"p":[$n[3].Vector3]},{"a":2,"n":"setDirection","t":8,"pi":[{"n":"direction","pt":$n[0].Single,"ps":0}],"sn":"setDirection","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setEase","t":8,"pi":[{"n":"easeType","pt":LeanTweenType,"ps":0}],"sn":"setEase","rt":LTDescr,"p":[LeanTweenType]},{"a":2,"n":"setEase","t":8,"pi":[{"n":"easeCurve","pt":pc.AnimationCurve,"ps":0}],"sn":"setEase$1","rt":LTDescr,"p":[pc.AnimationCurve]},{"a":2,"n":"setEaseInBack","t":8,"sn":"setEaseInBack","rt":LTDescr},{"a":2,"n":"setEaseInBounce","t":8,"sn":"setEaseInBounce","rt":LTDescr},{"a":2,"n":"setEaseInCirc","t":8,"sn":"setEaseInCirc","rt":LTDescr},{"a":2,"n":"setEaseInCubic","t":8,"sn":"setEaseInCubic","rt":LTDescr},{"a":2,"n":"setEaseInElastic","t":8,"sn":"setEaseInElastic","rt":LTDescr},{"a":2,"n":"setEaseInExpo","t":8,"sn":"setEaseInExpo","rt":LTDescr},{"a":2,"n":"setEaseInOutBack","t":8,"sn":"setEaseInOutBack","rt":LTDescr},{"a":2,"n":"setEaseInOutBounce","t":8,"sn":"setEaseInOutBounce","rt":LTDescr},{"a":2,"n":"setEaseInOutCirc","t":8,"sn":"setEaseInOutCirc","rt":LTDescr},{"a":2,"n":"setEaseInOutCubic","t":8,"sn":"setEaseInOutCubic","rt":LTDescr},{"a":2,"n":"setEaseInOutElastic","t":8,"sn":"setEaseInOutElastic","rt":LTDescr},{"a":2,"n":"setEaseInOutExpo","t":8,"sn":"setEaseInOutExpo","rt":LTDescr},{"a":2,"n":"setEaseInOutQuad","t":8,"sn":"setEaseInOutQuad","rt":LTDescr},{"a":2,"n":"setEaseInOutQuart","t":8,"sn":"setEaseInOutQuart","rt":LTDescr},{"a":2,"n":"setEaseInOutQuint","t":8,"sn":"setEaseInOutQuint","rt":LTDescr},{"a":2,"n":"setEaseInOutSine","t":8,"sn":"setEaseInOutSine","rt":LTDescr},{"a":2,"n":"setEaseInQuad","t":8,"sn":"setEaseInQuad","rt":LTDescr},{"a":2,"n":"setEaseInQuart","t":8,"sn":"setEaseInQuart","rt":LTDescr},{"a":2,"n":"setEaseInQuint","t":8,"sn":"setEaseInQuint","rt":LTDescr},{"a":2,"n":"setEaseInSine","t":8,"sn":"setEaseInSine","rt":LTDescr},{"a":2,"n":"setEaseLinear","t":8,"sn":"setEaseLinear","rt":LTDescr},{"a":2,"n":"setEaseOutBack","t":8,"sn":"setEaseOutBack","rt":LTDescr},{"a":2,"n":"setEaseOutBounce","t":8,"sn":"setEaseOutBounce","rt":LTDescr},{"a":2,"n":"setEaseOutCirc","t":8,"sn":"setEaseOutCirc","rt":LTDescr},{"a":2,"n":"setEaseOutCubic","t":8,"sn":"setEaseOutCubic","rt":LTDescr},{"a":2,"n":"setEaseOutElastic","t":8,"sn":"setEaseOutElastic","rt":LTDescr},{"a":2,"n":"setEaseOutExpo","t":8,"sn":"setEaseOutExpo","rt":LTDescr},{"a":2,"n":"setEaseOutQuad","t":8,"sn":"setEaseOutQuad","rt":LTDescr},{"a":2,"n":"setEaseOutQuart","t":8,"sn":"setEaseOutQuart","rt":LTDescr},{"a":2,"n":"setEaseOutQuint","t":8,"sn":"setEaseOutQuint","rt":LTDescr},{"a":2,"n":"setEaseOutSine","t":8,"sn":"setEaseOutSine","rt":LTDescr},{"a":2,"n":"setEasePunch","t":8,"sn":"setEasePunch","rt":LTDescr},{"a":2,"n":"setEaseShake","t":8,"sn":"setEaseShake","rt":LTDescr},{"a":2,"n":"setEaseSpring","t":8,"sn":"setEaseSpring","rt":LTDescr},{"a":2,"n":"setFollow","t":8,"sn":"setFollow","rt":LTDescr},{"a":2,"n":"setFrameRate","t":8,"pi":[{"n":"frameRate","pt":$n[0].Single,"ps":0}],"sn":"setFrameRate","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setFrom","t":8,"pi":[{"n":"from","pt":$n[0].Single,"ps":0}],"sn":"setFrom","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setFrom","t":8,"pi":[{"n":"from","pt":$n[3].Vector3,"ps":0}],"sn":"setFrom$1","rt":LTDescr,"p":[$n[3].Vector3]},{"a":2,"n":"setFromColor","t":8,"pi":[{"n":"col","pt":$n[3].Color,"ps":0}],"sn":"setFromColor","rt":LTDescr,"p":[$n[3].Color]},{"a":2,"n":"setGUIAlpha","t":8,"sn":"setGUIAlpha","rt":LTDescr},{"a":2,"n":"setGUIMove","t":8,"sn":"setGUIMove","rt":LTDescr},{"a":2,"n":"setGUIMoveMargin","t":8,"sn":"setGUIMoveMargin","rt":LTDescr},{"a":2,"n":"setGUIRotate","t":8,"sn":"setGUIRotate","rt":LTDescr},{"a":2,"n":"setGUIScale","t":8,"sn":"setGUIScale","rt":LTDescr},{"a":2,"n":"setHasInitialized","t":8,"pi":[{"n":"has","pt":$n[0].Boolean,"ps":0}],"sn":"setHasInitialized","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setId","t":8,"pi":[{"n":"id","pt":$n[0].UInt32,"ps":0},{"n":"global_counter","pt":$n[0].UInt32,"ps":1}],"sn":"setId","rt":LTDescr,"p":[$n[0].UInt32,$n[0].UInt32]},{"a":2,"n":"setIgnoreTimeScale","t":8,"pi":[{"n":"useUnScaledTime","pt":$n[0].Boolean,"ps":0}],"sn":"setIgnoreTimeScale","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setLoopClamp","t":8,"sn":"setLoopClamp","rt":LTDescr},{"a":2,"n":"setLoopClamp","t":8,"pi":[{"n":"loops","pt":$n[0].Int32,"ps":0}],"sn":"setLoopClamp$1","rt":LTDescr,"p":[$n[0].Int32]},{"a":2,"n":"setLoopCount","t":8,"pi":[{"n":"loopCount","pt":$n[0].Int32,"ps":0}],"sn":"setLoopCount","rt":LTDescr,"p":[$n[0].Int32]},{"a":2,"n":"setLoopOnce","t":8,"sn":"setLoopOnce","rt":LTDescr},{"a":2,"n":"setLoopPingPong","t":8,"sn":"setLoopPingPong","rt":LTDescr},{"a":2,"n":"setLoopPingPong","t":8,"pi":[{"n":"loops","pt":$n[0].Int32,"ps":0}],"sn":"setLoopPingPong$1","rt":LTDescr,"p":[$n[0].Int32]},{"a":2,"n":"setLoopType","t":8,"pi":[{"n":"loopType","pt":LeanTweenType,"ps":0}],"sn":"setLoopType","rt":LTDescr,"p":[LeanTweenType]},{"a":2,"n":"setMove","t":8,"sn":"setMove","rt":LTDescr},{"a":2,"n":"setMoveCurved","t":8,"sn":"setMoveCurved","rt":LTDescr},{"a":2,"n":"setMoveCurvedLocal","t":8,"sn":"setMoveCurvedLocal","rt":LTDescr},{"a":2,"n":"setMoveLocal","t":8,"sn":"setMoveLocal","rt":LTDescr},{"a":2,"n":"setMoveLocalX","t":8,"sn":"setMoveLocalX","rt":LTDescr},{"a":2,"n":"setMoveLocalY","t":8,"sn":"setMoveLocalY","rt":LTDescr},{"a":2,"n":"setMoveLocalZ","t":8,"sn":"setMoveLocalZ","rt":LTDescr},{"a":2,"n":"setMoveSpline","t":8,"sn":"setMoveSpline","rt":LTDescr},{"a":2,"n":"setMoveSplineLocal","t":8,"sn":"setMoveSplineLocal","rt":LTDescr},{"a":2,"n":"setMoveToTransform","t":8,"sn":"setMoveToTransform","rt":LTDescr},{"a":2,"n":"setMoveX","t":8,"sn":"setMoveX","rt":LTDescr},{"a":2,"n":"setMoveY","t":8,"sn":"setMoveY","rt":LTDescr},{"a":2,"n":"setMoveZ","t":8,"sn":"setMoveZ","rt":LTDescr},{"a":2,"n":"setOffset","t":8,"pi":[{"n":"offset","pt":$n[3].Vector3,"ps":0}],"sn":"setOffset","rt":LTDescr,"p":[$n[3].Vector3]},{"a":2,"n":"setOnComplete","t":8,"pi":[{"n":"onComplete","pt":Function,"ps":0}],"sn":"setOnComplete","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnComplete","t":8,"pi":[{"n":"onComplete","pt":Function,"ps":0}],"sn":"setOnComplete$1","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnComplete","t":8,"pi":[{"n":"onComplete","pt":Function,"ps":0},{"n":"onCompleteParam","pt":$n[0].Object,"ps":1}],"sn":"setOnComplete$2","rt":LTDescr,"p":[Function,$n[0].Object]},{"a":2,"n":"setOnCompleteOnRepeat","t":8,"pi":[{"n":"isOn","pt":$n[0].Boolean,"ps":0}],"sn":"setOnCompleteOnRepeat","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setOnCompleteOnStart","t":8,"pi":[{"n":"isOn","pt":$n[0].Boolean,"ps":0}],"sn":"setOnCompleteOnStart","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setOnCompleteParam","t":8,"pi":[{"n":"onCompleteParam","pt":$n[0].Object,"ps":0}],"sn":"setOnCompleteParam","rt":LTDescr,"p":[$n[0].Object]},{"a":2,"n":"setOnStart","t":8,"pi":[{"n":"onStart","pt":Function,"ps":0}],"sn":"setOnStart","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdate","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdate$1","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdate$5","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0},{"n":"onUpdateParam","dv":null,"o":true,"pt":$n[0].Object,"ps":1}],"sn":"setOnUpdate$4","rt":LTDescr,"p":[Function,$n[0].Object]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0},{"n":"onUpdateParam","dv":null,"o":true,"pt":$n[0].Object,"ps":1}],"sn":"setOnUpdate$6","rt":LTDescr,"p":[Function,$n[0].Object]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0},{"n":"onUpdateParam","dv":null,"o":true,"pt":$n[0].Object,"ps":1}],"sn":"setOnUpdate$2","rt":LTDescr,"p":[Function,$n[0].Object]},{"a":2,"n":"setOnUpdate","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0},{"n":"onUpdateParam","dv":null,"o":true,"pt":$n[0].Object,"ps":1}],"sn":"setOnUpdate$3","rt":LTDescr,"p":[Function,$n[0].Object]},{"a":2,"n":"setOnUpdateColor","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdateColor","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdateColor","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdateColor$1","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdateObject","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdateObject","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdateParam","t":8,"pi":[{"n":"onUpdateParam","pt":$n[0].Object,"ps":0}],"sn":"setOnUpdateParam","rt":LTDescr,"p":[$n[0].Object]},{"a":2,"n":"setOnUpdateRatio","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdateRatio","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdateVector2","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdateVector2","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOnUpdateVector3","t":8,"pi":[{"n":"onUpdate","pt":Function,"ps":0}],"sn":"setOnUpdateVector3","rt":LTDescr,"p":[Function]},{"a":2,"n":"setOrientToPath","t":8,"pi":[{"n":"doesOrient","pt":$n[0].Boolean,"ps":0}],"sn":"setOrientToPath","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setOrientToPath2d","t":8,"pi":[{"n":"doesOrient2d","pt":$n[0].Boolean,"ps":0}],"sn":"setOrientToPath2d","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setOvershoot","t":8,"pi":[{"n":"overshoot","pt":$n[0].Single,"ps":0}],"sn":"setOvershoot","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setPassed","t":8,"pi":[{"n":"passed","pt":$n[0].Single,"ps":0}],"sn":"setPassed","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setPath","t":8,"pi":[{"n":"path","pt":LTBezierPath,"ps":0}],"sn":"setPath","rt":LTDescr,"p":[LTBezierPath]},{"a":2,"n":"setPeriod","t":8,"pi":[{"n":"period","pt":$n[0].Single,"ps":0}],"sn":"setPeriod","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setPoint","t":8,"pi":[{"n":"point","pt":$n[3].Vector3,"ps":0}],"sn":"setPoint","rt":LTDescr,"p":[$n[3].Vector3]},{"a":2,"n":"setRect","t":8,"pi":[{"n":"rect","pt":LTRect,"ps":0}],"sn":"setRect","rt":LTDescr,"p":[LTRect]},{"a":2,"n":"setRect","t":8,"pi":[{"n":"rect","pt":$n[3].Rect,"ps":0}],"sn":"setRect$1","rt":LTDescr,"p":[$n[3].Rect]},{"a":2,"n":"setRect","t":8,"pi":[{"n":"rect","pt":$n[3].RectTransform,"ps":0}],"sn":"setRect$2","rt":LTDescr,"p":[$n[3].RectTransform]},{"a":2,"n":"setRecursive","t":8,"pi":[{"n":"useRecursion","pt":$n[0].Boolean,"ps":0}],"sn":"setRecursive","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setRepeat","t":8,"pi":[{"n":"repeat","pt":$n[0].Int32,"ps":0}],"sn":"setRepeat","rt":LTDescr,"p":[$n[0].Int32]},{"a":2,"n":"setRotate","t":8,"sn":"setRotate","rt":LTDescr},{"a":2,"n":"setRotateAround","t":8,"sn":"setRotateAround","rt":LTDescr},{"a":2,"n":"setRotateAroundLocal","t":8,"sn":"setRotateAroundLocal","rt":LTDescr},{"a":2,"n":"setRotateLocal","t":8,"sn":"setRotateLocal","rt":LTDescr},{"a":2,"n":"setRotateX","t":8,"sn":"setRotateX","rt":LTDescr},{"a":2,"n":"setRotateY","t":8,"sn":"setRotateY","rt":LTDescr},{"a":2,"n":"setRotateZ","t":8,"sn":"setRotateZ","rt":LTDescr},{"a":2,"n":"setScale","t":8,"sn":"setScale","rt":LTDescr},{"a":2,"n":"setScale","t":8,"pi":[{"n":"scale","pt":$n[0].Single,"ps":0}],"sn":"setScale$1","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setScaleX","t":8,"sn":"setScaleX","rt":LTDescr},{"a":2,"n":"setScaleY","t":8,"sn":"setScaleY","rt":LTDescr},{"a":2,"n":"setScaleZ","t":8,"sn":"setScaleZ","rt":LTDescr},{"a":2,"n":"setSpeed","t":8,"pi":[{"n":"speed","pt":$n[0].Single,"ps":0}],"sn":"setSpeed","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setSprites","t":8,"pi":[{"n":"sprites","pt":System.Array.type(UnityEngine.Sprite),"ps":0}],"sn":"setSprites","rt":LTDescr,"p":[System.Array.type(UnityEngine.Sprite)]},{"a":2,"n":"setTarget","t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0}],"sn":"setTarget","rt":LTDescr,"p":[$n[3].Transform]},{"a":2,"n":"setTextAlpha","t":8,"sn":"setTextAlpha","rt":LTDescr},{"a":2,"n":"setTextColor","t":8,"sn":"setTextColor","rt":LTDescr},{"a":2,"n":"setTime","t":8,"pi":[{"n":"time","pt":$n[0].Single,"ps":0}],"sn":"setTime","rt":LTDescr,"p":[$n[0].Single]},{"a":2,"n":"setTo","t":8,"pi":[{"n":"to","pt":$n[3].Transform,"ps":0}],"sn":"setTo","rt":LTDescr,"p":[$n[3].Transform]},{"a":2,"n":"setTo","t":8,"pi":[{"n":"to","pt":$n[3].Vector3,"ps":0}],"sn":"setTo$1","rt":LTDescr,"p":[$n[3].Vector3]},{"a":2,"n":"setUseEstimatedTime","t":8,"pi":[{"n":"useEstimatedTime","pt":$n[0].Boolean,"ps":0}],"sn":"setUseEstimatedTime","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setUseFrames","t":8,"pi":[{"n":"useFrames","pt":$n[0].Boolean,"ps":0}],"sn":"setUseFrames","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setUseManualTime","t":8,"pi":[{"n":"useManualTime","pt":$n[0].Boolean,"ps":0}],"sn":"setUseManualTime","rt":LTDescr,"p":[$n[0].Boolean]},{"a":2,"n":"setValue3","t":8,"sn":"setValue3","rt":LTDescr},{"a":1,"n":"textAlphaChildrenRecursive","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1},{"n":"useRecursion","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"textAlphaChildrenRecursive","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[0].Boolean]},{"a":1,"n":"textAlphaRecursive","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1},{"n":"useRecursion","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"textAlphaRecursive","rt":$n[0].Void,"p":[$n[3].Transform,$n[0].Single,$n[0].Boolean]},{"a":1,"n":"textColorRecursive","is":true,"t":8,"pi":[{"n":"trans","pt":$n[3].Transform,"ps":0},{"n":"toColor","pt":$n[3].Color,"ps":1}],"sn":"textColorRecursive","rt":$n[0].Void,"p":[$n[3].Transform,$n[3].Color]},{"a":1,"n":"tweenColor","is":true,"t":8,"pi":[{"n":"tween","pt":LTDescr,"ps":0},{"n":"val","pt":$n[0].Single,"ps":1}],"sn":"tweenColor","rt":$n[3].Color,"p":[LTDescr,$n[0].Single]},{"a":1,"n":"tweenOnCurve","t":8,"sn":"tweenOnCurve","rt":$n[3].Vector3},{"a":2,"n":"updateInternal","t":8,"sn":"updateInternal","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"updateNow","t":8,"sn":"updateNow","rt":LTDescr},{"a":2,"n":"easeInternal","t":16,"rt":Function,"g":{"a":2,"n":"get_easeInternal","t":8,"rt":Function,"fg":"easeInternal"},"s":{"a":2,"n":"set_easeInternal","t":8,"p":[Function],"rt":$n[0].Void,"fs":"easeInternal"},"fn":"easeInternal"},{"a":2,"n":"from","t":16,"rt":$n[3].Vector3,"g":{"a":2,"n":"get_from","t":8,"rt":$n[3].Vector3,"fg":"from"},"s":{"a":2,"n":"set_from","t":8,"p":[$n[3].Vector3],"rt":$n[0].Void,"fs":"from"},"fn":"from"},{"a":2,"n":"id","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_id","t":8,"rt":$n[0].Int32,"fg":"id","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"id"},{"a":2,"n":"initInternal","t":16,"rt":Function,"g":{"a":2,"n":"get_initInternal","t":8,"rt":Function,"fg":"initInternal"},"s":{"a":2,"n":"set_initInternal","t":8,"p":[Function],"rt":$n[0].Void,"fs":"initInternal"},"fn":"initInternal"},{"a":2,"n":"optional","t":16,"rt":LTDescrOptional,"g":{"a":2,"n":"get_optional","t":8,"rt":LTDescrOptional,"fg":"optional"},"s":{"a":2,"n":"set_optional","t":8,"p":[LTDescrOptional],"rt":$n[0].Void,"fs":"optional"},"fn":"optional"},{"a":2,"n":"to","t":16,"rt":$n[3].Vector3,"g":{"a":2,"n":"get_to","t":8,"rt":$n[3].Vector3,"fg":"to"},"s":{"a":2,"n":"set_to","t":8,"p":[$n[3].Vector3],"rt":$n[0].Void,"fs":"to"},"fn":"to"},{"a":2,"n":"toTrans","t":16,"rt":$n[3].Transform,"g":{"a":2,"n":"get_toTrans","t":8,"rt":$n[3].Transform,"fg":"toTrans"},"fn":"toTrans"},{"a":2,"n":"uniqueId","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_uniqueId","t":8,"rt":$n[0].Int32,"fg":"uniqueId","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"uniqueId"},{"a":1,"n":"_id","t":4,"rt":$n[0].UInt32,"sn":"_id","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"_optional","t":4,"rt":LTDescrOptional,"sn":"_optional"},{"a":2,"n":"counter","t":4,"rt":$n[0].UInt32,"sn":"counter","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"delay","t":4,"rt":$n[0].Single,"sn":"delay","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"destroyOnComplete","t":4,"rt":$n[0].Boolean,"sn":"destroyOnComplete","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":4,"n":"diff","t":4,"rt":$n[3].Vector3,"sn":"diff"},{"a":4,"n":"diffDiv2","t":4,"rt":$n[3].Vector3,"sn":"diffDiv2"},{"a":2,"n":"direction","t":4,"rt":$n[0].Single,"sn":"direction","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"directionLast","t":4,"rt":$n[0].Single,"sn":"directionLast","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"dt","is":true,"t":4,"rt":$n[0].Single,"sn":"dt","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"easeMethod","t":4,"rt":Function,"sn":"easeMethod"},{"a":1,"n":"easeType","t":4,"rt":LeanTweenType,"sn":"easeType","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":4,"n":"fromInternal","t":4,"rt":$n[3].Vector3,"sn":"fromInternal"},{"a":2,"n":"hasExtraOnCompletes","t":4,"rt":$n[0].Boolean,"sn":"hasExtraOnCompletes","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"hasInitiliazed","t":4,"rt":$n[0].Boolean,"sn":"hasInitiliazed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"hasPhysics","t":4,"rt":$n[0].Boolean,"sn":"hasPhysics","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"hasUpdateCallback","t":4,"rt":$n[0].Boolean,"sn":"hasUpdateCallback","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"lastVal","t":4,"rt":$n[0].Single,"sn":"lastVal","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"loopCount","t":4,"rt":$n[0].Int32,"sn":"loopCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"loopType","t":4,"rt":LeanTweenType,"sn":"loopType","box":function ($v) { return Bridge.box($v, LeanTweenType, System.Enum.toStringFn(LeanTweenType));}},{"a":2,"n":"newVect","is":true,"t":4,"rt":$n[3].Vector3,"sn":"newVect"},{"a":2,"n":"onCompleteOnRepeat","t":4,"rt":$n[0].Boolean,"sn":"onCompleteOnRepeat","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"onCompleteOnStart","t":4,"rt":$n[0].Boolean,"sn":"onCompleteOnStart","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"overshoot","t":4,"rt":$n[0].Single,"sn":"overshoot","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"passed","t":4,"rt":$n[0].Single,"sn":"passed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"period","t":4,"rt":$n[0].Single,"sn":"period","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"ratioPassed","t":4,"rt":$n[0].Single,"sn":"ratioPassed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"rawImage","t":4,"rt":$n[4].RawImage,"sn":"rawImage"},{"a":2,"n":"rectTransform","t":4,"rt":$n[3].RectTransform,"sn":"rectTransform"},{"a":2,"n":"scale","t":4,"rt":$n[0].Single,"sn":"scale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"speed","t":4,"rt":$n[0].Single,"sn":"speed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"spriteRen","t":4,"rt":$n[3].SpriteRenderer,"sn":"spriteRen"},{"a":2,"n":"sprites","t":4,"rt":System.Array.type(UnityEngine.Sprite),"sn":"sprites"},{"a":2,"n":"time","t":4,"rt":$n[0].Single,"sn":"time","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":4,"n":"toInternal","t":4,"rt":$n[3].Vector3,"sn":"toInternal"},{"a":2,"n":"toggle","t":4,"rt":$n[0].Boolean,"sn":"toggle","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"trans","t":4,"rt":$n[3].Transform,"sn":"trans"},{"a":2,"n":"type","t":4,"rt":TweenAction,"sn":"type","box":function ($v) { return Bridge.box($v, TweenAction, System.Enum.toStringFn(TweenAction));}},{"a":2,"n":"uiImage","t":4,"rt":$n[4].Image,"sn":"uiImage"},{"a":2,"n":"uiText","t":4,"rt":$n[4].Text,"sn":"uiText"},{"a":2,"n":"useEstimatedTime","t":4,"rt":$n[0].Boolean,"sn":"useEstimatedTime","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"useFrames","t":4,"rt":$n[0].Boolean,"sn":"useFrames","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"useManualTime","t":4,"rt":$n[0].Boolean,"sn":"useManualTime","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"useRecursion","t":4,"rt":$n[0].Boolean,"sn":"useRecursion","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"usesNormalDt","t":4,"rt":$n[0].Boolean,"sn":"usesNormalDt","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"val","is":true,"t":4,"rt":$n[0].Single,"sn":"val","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"backing":true,"n":"<easeInternal>k__BackingField","t":4,"rt":Function,"sn":"easeInternal"},{"a":1,"backing":true,"n":"<initInternal>k__BackingField","t":4,"rt":Function,"sn":"initInternal"}]}; }, $n);
    /*LTDescr end.*/

    /*LTDescrOptional start.*/
    $m("LTDescrOptional", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"callOnUpdate","t":8,"pi":[{"n":"val","pt":$n[0].Single,"ps":0},{"n":"ratioPassed","pt":$n[0].Single,"ps":1}],"sn":"callOnUpdate","rt":$n[0].Void,"p":[$n[0].Single,$n[0].Single]},{"a":2,"n":"reset","t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"axis","t":16,"rt":$n[3].Vector3,"g":{"a":2,"n":"get_axis","t":8,"rt":$n[3].Vector3,"fg":"axis"},"s":{"a":2,"n":"set_axis","t":8,"p":[$n[3].Vector3],"rt":$n[0].Void,"fs":"axis"},"fn":"axis"},{"a":2,"n":"lastVal","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_lastVal","t":8,"rt":$n[0].Single,"fg":"lastVal","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"s":{"a":2,"n":"set_lastVal","t":8,"p":[$n[0].Single],"rt":$n[0].Void,"fs":"lastVal"},"fn":"lastVal"},{"a":2,"n":"ltRect","t":16,"rt":LTRect,"g":{"a":2,"n":"get_ltRect","t":8,"rt":LTRect,"fg":"ltRect"},"s":{"a":2,"n":"set_ltRect","t":8,"p":[LTRect],"rt":$n[0].Void,"fs":"ltRect"},"fn":"ltRect"},{"a":2,"n":"onComplete","t":16,"rt":Function,"g":{"a":2,"n":"get_onComplete","t":8,"rt":Function,"fg":"onComplete"},"s":{"a":2,"n":"set_onComplete","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onComplete"},"fn":"onComplete"},{"a":2,"n":"onCompleteObject","t":16,"rt":Function,"g":{"a":2,"n":"get_onCompleteObject","t":8,"rt":Function,"fg":"onCompleteObject"},"s":{"a":2,"n":"set_onCompleteObject","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onCompleteObject"},"fn":"onCompleteObject"},{"a":2,"n":"onCompleteParam","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_onCompleteParam","t":8,"rt":$n[0].Object,"fg":"onCompleteParam"},"s":{"a":2,"n":"set_onCompleteParam","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"onCompleteParam"},"fn":"onCompleteParam"},{"a":2,"n":"onStart","t":16,"rt":Function,"g":{"a":2,"n":"get_onStart","t":8,"rt":Function,"fg":"onStart"},"s":{"a":2,"n":"set_onStart","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onStart"},"fn":"onStart"},{"a":2,"n":"onUpdateColor","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateColor","t":8,"rt":Function,"fg":"onUpdateColor"},"s":{"a":2,"n":"set_onUpdateColor","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateColor"},"fn":"onUpdateColor"},{"a":2,"n":"onUpdateColorObject","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateColorObject","t":8,"rt":Function,"fg":"onUpdateColorObject"},"s":{"a":2,"n":"set_onUpdateColorObject","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateColorObject"},"fn":"onUpdateColorObject"},{"a":2,"n":"onUpdateFloat","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateFloat","t":8,"rt":Function,"fg":"onUpdateFloat"},"s":{"a":2,"n":"set_onUpdateFloat","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateFloat"},"fn":"onUpdateFloat"},{"a":2,"n":"onUpdateFloatObject","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateFloatObject","t":8,"rt":Function,"fg":"onUpdateFloatObject"},"s":{"a":2,"n":"set_onUpdateFloatObject","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateFloatObject"},"fn":"onUpdateFloatObject"},{"a":2,"n":"onUpdateFloatRatio","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateFloatRatio","t":8,"rt":Function,"fg":"onUpdateFloatRatio"},"s":{"a":2,"n":"set_onUpdateFloatRatio","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateFloatRatio"},"fn":"onUpdateFloatRatio"},{"a":2,"n":"onUpdateParam","t":16,"rt":$n[0].Object,"g":{"a":2,"n":"get_onUpdateParam","t":8,"rt":$n[0].Object,"fg":"onUpdateParam"},"s":{"a":2,"n":"set_onUpdateParam","t":8,"p":[$n[0].Object],"rt":$n[0].Void,"fs":"onUpdateParam"},"fn":"onUpdateParam"},{"a":2,"n":"onUpdateVector2","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateVector2","t":8,"rt":Function,"fg":"onUpdateVector2"},"s":{"a":2,"n":"set_onUpdateVector2","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateVector2"},"fn":"onUpdateVector2"},{"a":2,"n":"onUpdateVector3","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateVector3","t":8,"rt":Function,"fg":"onUpdateVector3"},"s":{"a":2,"n":"set_onUpdateVector3","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateVector3"},"fn":"onUpdateVector3"},{"a":2,"n":"onUpdateVector3Object","t":16,"rt":Function,"g":{"a":2,"n":"get_onUpdateVector3Object","t":8,"rt":Function,"fg":"onUpdateVector3Object"},"s":{"a":2,"n":"set_onUpdateVector3Object","t":8,"p":[Function],"rt":$n[0].Void,"fs":"onUpdateVector3Object"},"fn":"onUpdateVector3Object"},{"a":2,"n":"origRotation","t":16,"rt":$n[3].Quaternion,"g":{"a":2,"n":"get_origRotation","t":8,"rt":$n[3].Quaternion,"fg":"origRotation"},"s":{"a":2,"n":"set_origRotation","t":8,"p":[$n[3].Quaternion],"rt":$n[0].Void,"fs":"origRotation"},"fn":"origRotation"},{"a":2,"n":"path","t":16,"rt":LTBezierPath,"g":{"a":2,"n":"get_path","t":8,"rt":LTBezierPath,"fg":"path"},"s":{"a":2,"n":"set_path","t":8,"p":[LTBezierPath],"rt":$n[0].Void,"fs":"path"},"fn":"path"},{"a":2,"n":"point","t":16,"rt":$n[3].Vector3,"g":{"a":2,"n":"get_point","t":8,"rt":$n[3].Vector3,"fg":"point"},"s":{"a":2,"n":"set_point","t":8,"p":[$n[3].Vector3],"rt":$n[0].Void,"fs":"point"},"fn":"point"},{"a":2,"n":"spline","t":16,"rt":LTSpline,"g":{"a":2,"n":"get_spline","t":8,"rt":LTSpline,"fg":"spline"},"s":{"a":2,"n":"set_spline","t":8,"p":[LTSpline],"rt":$n[0].Void,"fs":"spline"},"fn":"spline"},{"a":2,"n":"toTrans","t":16,"rt":$n[3].Transform,"g":{"a":2,"n":"get_toTrans","t":8,"rt":$n[3].Transform,"fg":"toTrans"},"s":{"a":2,"n":"set_toTrans","t":8,"p":[$n[3].Transform],"rt":$n[0].Void,"fs":"toTrans"},"fn":"toTrans"},{"a":2,"n":"animationCurve","t":4,"rt":pc.AnimationCurve,"sn":"animationCurve"},{"a":2,"n":"color","t":4,"rt":$n[3].Color,"sn":"color"},{"a":2,"n":"initFrameCount","t":4,"rt":$n[0].Int32,"sn":"initFrameCount","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<axis>k__BackingField","t":4,"rt":$n[3].Vector3,"sn":"axis"},{"a":1,"backing":true,"n":"<lastVal>k__BackingField","t":4,"rt":$n[0].Single,"sn":"lastVal","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"backing":true,"n":"<ltRect>k__BackingField","t":4,"rt":LTRect,"sn":"ltRect"},{"a":1,"backing":true,"n":"<onComplete>k__BackingField","t":4,"rt":Function,"sn":"onComplete"},{"a":1,"backing":true,"n":"<onCompleteObject>k__BackingField","t":4,"rt":Function,"sn":"onCompleteObject"},{"a":1,"backing":true,"n":"<onCompleteParam>k__BackingField","t":4,"rt":$n[0].Object,"sn":"onCompleteParam"},{"a":1,"backing":true,"n":"<onStart>k__BackingField","t":4,"rt":Function,"sn":"onStart"},{"a":1,"backing":true,"n":"<onUpdateColor>k__BackingField","t":4,"rt":Function,"sn":"onUpdateColor"},{"a":1,"backing":true,"n":"<onUpdateColorObject>k__BackingField","t":4,"rt":Function,"sn":"onUpdateColorObject"},{"a":1,"backing":true,"n":"<onUpdateFloat>k__BackingField","t":4,"rt":Function,"sn":"onUpdateFloat"},{"a":1,"backing":true,"n":"<onUpdateFloatObject>k__BackingField","t":4,"rt":Function,"sn":"onUpdateFloatObject"},{"a":1,"backing":true,"n":"<onUpdateFloatRatio>k__BackingField","t":4,"rt":Function,"sn":"onUpdateFloatRatio"},{"a":1,"backing":true,"n":"<onUpdateParam>k__BackingField","t":4,"rt":$n[0].Object,"sn":"onUpdateParam"},{"a":1,"backing":true,"n":"<onUpdateVector2>k__BackingField","t":4,"rt":Function,"sn":"onUpdateVector2"},{"a":1,"backing":true,"n":"<onUpdateVector3>k__BackingField","t":4,"rt":Function,"sn":"onUpdateVector3"},{"a":1,"backing":true,"n":"<onUpdateVector3Object>k__BackingField","t":4,"rt":Function,"sn":"onUpdateVector3Object"},{"a":1,"backing":true,"n":"<origRotation>k__BackingField","t":4,"rt":$n[3].Quaternion,"sn":"origRotation"},{"a":1,"backing":true,"n":"<path>k__BackingField","t":4,"rt":LTBezierPath,"sn":"path"},{"a":1,"backing":true,"n":"<point>k__BackingField","t":4,"rt":$n[3].Vector3,"sn":"point"},{"a":1,"backing":true,"n":"<spline>k__BackingField","t":4,"rt":LTSpline,"sn":"spline"},{"a":1,"backing":true,"n":"<toTrans>k__BackingField","t":4,"rt":$n[3].Transform,"sn":"toTrans"}]}; }, $n);
    /*LTDescrOptional end.*/

    /*LTSeq start.*/
    $m("LTSeq", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"addOn","t":8,"sn":"addOn","rt":LTSeq},{"a":1,"n":"addPreviousDelays","t":8,"sn":"addPreviousDelays","rt":$n[0].Single,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"append","t":8,"pi":[{"n":"tween","pt":LTDescr,"ps":0}],"sn":"append","rt":LTSeq,"p":[LTDescr]},{"a":2,"n":"append","t":8,"pi":[{"n":"callback","pt":Function,"ps":0}],"sn":"append$1","rt":LTSeq,"p":[Function]},{"a":2,"n":"append","t":8,"pi":[{"n":"delay","pt":$n[0].Single,"ps":0}],"sn":"append$3","rt":LTSeq,"p":[$n[0].Single]},{"a":2,"n":"append","t":8,"pi":[{"n":"callback","pt":Function,"ps":0},{"n":"obj","pt":$n[0].Object,"ps":1}],"sn":"append$2","rt":LTSeq,"p":[Function,$n[0].Object]},{"a":2,"n":"append","t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callback","pt":Function,"ps":1}],"sn":"append$4","rt":LTSeq,"p":[$n[3].GameObject,Function]},{"a":2,"n":"append","t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"callback","pt":Function,"ps":1},{"n":"obj","pt":$n[0].Object,"ps":2}],"sn":"append$5","rt":LTSeq,"p":[$n[3].GameObject,Function,$n[0].Object]},{"a":2,"n":"init","t":8,"pi":[{"n":"id","pt":$n[0].UInt32,"ps":0},{"n":"global_counter","pt":$n[0].UInt32,"ps":1}],"sn":"init","rt":$n[0].Void,"p":[$n[0].UInt32,$n[0].UInt32]},{"a":2,"n":"insert","t":8,"pi":[{"n":"tween","pt":LTDescr,"ps":0}],"sn":"insert","rt":LTSeq,"p":[LTDescr]},{"a":2,"n":"reset","t":8,"sn":"reset","rt":$n[0].Void},{"a":2,"n":"reverse","t":8,"sn":"reverse","rt":LTSeq},{"a":2,"n":"setScale","t":8,"pi":[{"n":"timeScale","pt":$n[0].Single,"ps":0}],"sn":"setScale","rt":LTSeq,"p":[$n[0].Single]},{"a":1,"n":"setScaleRecursive","t":8,"pi":[{"n":"seq","pt":LTSeq,"ps":0},{"n":"timeScale","pt":$n[0].Single,"ps":1},{"n":"count","pt":$n[0].Int32,"ps":2}],"sn":"setScaleRecursive","rt":$n[0].Void,"p":[LTSeq,$n[0].Single,$n[0].Int32]},{"a":2,"n":"id","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_id","t":8,"rt":$n[0].Int32,"fg":"id","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"id"},{"a":1,"n":"_id","t":4,"rt":$n[0].UInt32,"sn":"_id","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"counter","t":4,"rt":$n[0].UInt32,"sn":"counter","box":function ($v) { return Bridge.box($v, System.UInt32);}},{"a":2,"n":"current","t":4,"rt":LTSeq,"sn":"current"},{"a":1,"n":"debugIter","t":4,"rt":$n[0].Int32,"sn":"debugIter","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"previous","t":4,"rt":LTSeq,"sn":"previous"},{"a":2,"n":"timeScale","t":4,"rt":$n[0].Single,"sn":"timeScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"toggle","t":4,"rt":$n[0].Boolean,"sn":"toggle","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"totalDelay","t":4,"rt":$n[0].Single,"sn":"totalDelay","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"tween","t":4,"rt":LTDescr,"sn":"tween"}]}; }, $n);
    /*LTSeq end.*/

    /*DataGameMode start.*/
    $m("DataGameMode", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BOMB_10X10","is":true,"t":4,"rt":DataGameMode,"sn":"BOMB_10X10","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"BOMB_8X8","is":true,"t":4,"rt":DataGameMode,"sn":"BOMB_8X8","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"CLASSIC_10X10","is":true,"t":4,"rt":DataGameMode,"sn":"CLASSIC_10X10","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"CLASSIC_8X8","is":true,"t":4,"rt":DataGameMode,"sn":"CLASSIC_8X8","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"HEXA","is":true,"t":4,"rt":DataGameMode,"sn":"HEXA","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"TIME_10X10","is":true,"t":4,"rt":DataGameMode,"sn":"TIME_10X10","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"TIME_8X8","is":true,"t":4,"rt":DataGameMode,"sn":"TIME_8X8","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}}]}; }, $n);
    /*DataGameMode end.*/

    /*DataInGame start.*/
    $m("DataInGame", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"FindDataMode","t":8,"pi":[{"n":"dataGameMode","pt":DataGameMode,"ps":0}],"sn":"FindDataMode","rt":DataMode,"p":[DataGameMode]},{"a":2,"n":"Load","t":8,"sn":"Load","rt":$n[0].Void},{"a":2,"n":"Save","t":8,"sn":"Save","rt":$n[0].Void},{"a":2,"n":"SaveDataMode","t":8,"pi":[{"n":"dataMode","pt":DataMode,"ps":0}],"sn":"SaveDataMode","rt":$n[0].Void,"p":[DataMode]},{"a":2,"n":"dataGameModes","t":4,"rt":$n[5].List$1(DataMode),"sn":"dataGameModes"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"jsonGameMode","t":4,"rt":$n[0].String,"sn":"jsonGameMode"}]}; }, $n);
    /*DataInGame end.*/

    /*DataMode start.*/
    $m("DataMode", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AddDataPlacePiece","t":8,"pi":[{"n":"data","pt":DataPlacePiece,"ps":0}],"sn":"AddDataPlacePiece","rt":$n[0].Void,"p":[DataPlacePiece]},{"a":2,"n":"ClearData","t":8,"sn":"ClearData","rt":$n[0].Void},{"a":2,"n":"Load","t":8,"sn":"Load","rt":$n[0].Void},{"a":2,"n":"Save","t":8,"sn":"Save","rt":$n[0].Void},{"a":2,"n":"bestScore","t":4,"rt":$n[0].Int32,"sn":"bestScore","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"blocksModeIndex","t":4,"rt":$n[5].List$1(System.Int32),"sn":"blocksModeIndex"},{"a":2,"n":"bombDetails","t":4,"rt":$n[5].List$1(BombDetail),"sn":"bombDetails"},{"a":2,"n":"currentScore","t":4,"rt":$n[0].Int32,"sn":"currentScore","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"dataGameMode","t":4,"rt":DataGameMode,"sn":"dataGameMode","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"dataPlacePieces","t":4,"rt":$n[5].List$1(DataPlacePiece),"sn":"dataPlacePieces"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"jsonPlacePieces","t":4,"rt":$n[0].String,"sn":"jsonPlacePieces"},{"a":2,"n":"piecesId","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"piecesId"},{"a":2,"n":"stepBomb","t":4,"rt":$n[0].Int32,"sn":"stepBomb","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*DataMode end.*/

    /*BombDetail start.*/
    $m("BombDetail", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"bombIndex","t":4,"rt":$n[0].Int32,"sn":"bombIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"stepBomb","t":4,"rt":$n[0].Int32,"sn":"stepBomb","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*BombDetail end.*/

    /*DataPlacePiece start.*/
    $m("DataPlacePiece", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Load","t":8,"sn":"Load","rt":$n[0].Void},{"a":2,"n":"Save","t":8,"sn":"Save","rt":$n[0].Void},{"a":2,"n":"DestroyLine","t":4,"rt":$n[0].Boolean,"sn":"DestroyLine","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"blocksHideIndex","t":4,"rt":$n[5].List$1(System.Int32),"sn":"blocksHideIndex"},{"a":2,"n":"blocksShowIndex","t":4,"rt":$n[5].List$1(System.Int32),"sn":"blocksShowIndex"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"dataBombsIndex","t":4,"rt":$n[0].String,"sn":"dataBombsIndex"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"dataPieces","t":4,"rt":$n[0].String,"sn":"dataPieces"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"dataPiecesShape","t":4,"rt":$n[0].String,"sn":"dataPiecesShape"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"dataPosition","t":4,"rt":$n[0].String,"sn":"dataPosition"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"datablocksHideIndex","t":4,"rt":$n[0].String,"sn":"datablocksHideIndex"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"datablocksShowIndex","t":4,"rt":$n[0].String,"sn":"datablocksShowIndex"},{"a":2,"n":"pieces","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"pieces"}]}; }, $n);
    /*DataPlacePiece end.*/

    /*GameSetting start.*/
    $m("GameSetting", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"fillTimer","t":4,"rt":$n[0].Single,"sn":"fillTimer","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"muteMusic","t":4,"rt":$n[0].Boolean,"sn":"muteMusic","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"muteSound","t":4,"rt":$n[0].Boolean,"sn":"muteSound","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"tutorialClassic","t":4,"rt":$n[0].Boolean,"sn":"tutorialClassic","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"tutorialHexa","t":4,"rt":$n[0].Boolean,"sn":"tutorialHexa","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*GameSetting end.*/

    /*BlockBoard start.*/
    $m("BlockBoard", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"DestroyAnimation","t":8,"pi":[{"n":"destroy","pt":$n[0].Boolean,"ps":0}],"sn":"DestroyAnimation","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":1,"n":"FullBlockCross1","t":8,"sn":"FullBlockCross1","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"FullBlockCross2","t":8,"sn":"FullBlockCross2","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"GetBlocksCrossDestroy","t":8,"sn":"GetBlocksCrossDestroy","rt":$n[5].List$1(BlockBoard)},{"a":2,"n":"MultiplySortingOrder","t":8,"pi":[{"n":"amount","pt":$n[0].Single,"ps":0}],"sn":"MultiplySortingOrder","rt":$n[0].Void,"p":[$n[0].Single]},{"a":2,"n":"SetBlockGem","t":8,"pi":[{"n":"gemCol","pt":BlockGemColor,"ps":0}],"sn":"SetBlockGem","rt":$n[0].Void,"p":[BlockGemColor]},{"a":2,"n":"SetBlockImage","t":8,"pi":[{"n":"image","pt":$n[3].Sprite,"ps":0}],"sn":"SetBlockImage","rt":$n[0].Void,"p":[$n[3].Sprite]},{"a":2,"n":"SetLayer","t":8,"pi":[{"n":"tutorial","pt":$n[0].Boolean,"ps":0}],"sn":"SetLayer","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"ShowBlocksCrossCanDestroy","t":8,"pi":[{"n":"blocksDestroy","pt":$n[5].List$1(BlockBoard),"ps":0}],"sn":"ShowBlocksCrossCanDestroy","rt":$n[0].Boolean,"p":[$n[5].List$1(BlockBoard)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ShowPlaceBlock","t":8,"pi":[{"n":"place","pt":$n[0].Boolean,"ps":0}],"sn":"ShowPlaceBlock","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"ToggleActiveBlockGFX","t":8,"pi":[{"n":"on","pt":$n[0].Boolean,"ps":0}],"sn":"ToggleActiveBlockGFX","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"VisibleBlock","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleBlock","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"VisibleHightLight","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleHightLight","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"BlockObj","t":16,"rt":BlockObj,"g":{"a":2,"n":"get_BlockObj","t":8,"rt":BlockObj,"fg":"BlockObj"},"s":{"a":2,"n":"set_BlockObj","t":8,"p":[BlockObj],"rt":$n[0].Void,"fs":"BlockObj"},"fn":"BlockObj"},{"a":2,"n":"BombItem","t":16,"rt":BombItem,"g":{"a":2,"n":"get_BombItem","t":8,"rt":BombItem,"fg":"BombItem"},"s":{"a":2,"n":"set_BombItem","t":8,"p":[BombItem],"rt":$n[0].Void,"fs":"BombItem"},"fn":"BombItem"},{"a":2,"n":"CanPlace","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_CanPlace","t":8,"rt":$n[0].Boolean,"fg":"CanPlace","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanPlace"},{"a":2,"n":"HighLight","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_HighLight","t":8,"rt":$n[0].Boolean,"fg":"HighLight","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"HighLight"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"block","t":4,"rt":$n[3].SpriteRenderer,"sn":"block"},{"a":1,"n":"blockEmpty","t":4,"rt":$n[3].SpriteRenderer,"sn":"blockEmpty"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockHightLight","t":4,"rt":$n[3].SpriteRenderer,"sn":"blockHightLight"},{"a":2,"n":"blockIndex","t":4,"rt":$n[0].Int32,"sn":"blockIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksBoardCross1","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksBoardCross1"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksBoardCross2","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksBoardCross2"},{"a":1,"n":"blocksDestroy","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksDestroy"},{"a":2,"n":"color","t":4,"rt":BlockColor,"sn":"color","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"emptyBlock","t":4,"rt":$n[3].SpriteRenderer,"sn":"emptyBlock"},{"a":2,"n":"gemColor","t":4,"rt":BlockGemColor,"sn":"gemColor","box":function ($v) { return Bridge.box($v, BlockGemColor, System.Enum.toStringFn(BlockGemColor));}},{"a":2,"n":"gemSR","t":4,"rt":$n[3].SpriteRenderer,"sn":"gemSR"},{"a":2,"n":"x","t":4,"rt":$n[0].Int32,"sn":"x","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"y","t":4,"rt":$n[0].Int32,"sn":"y","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<BlockObj>k__BackingField","t":4,"rt":BlockObj,"sn":"BlockObj"},{"a":1,"backing":true,"n":"<BombItem>k__BackingField","t":4,"rt":BombItem,"sn":"BombItem"}]}; }, $n);
    /*BlockBoard end.*/

    /*BottomObj start.*/
    $m("BottomObj", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"objs","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"objs"},{"a":2,"n":"positionY","t":4,"rt":$n[0].Int32,"sn":"positionY","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*BottomObj end.*/

    /*BlockObj start.*/
    $m("BlockObj", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BlockCanMove","t":8,"sn":"BlockCanMove","rt":$n[0].Void},{"a":2,"n":"SetBlockColor","t":8,"pi":[{"n":"newCol","pt":$n[3].Color,"ps":0}],"sn":"SetBlockColor","rt":$n[0].Void,"p":[$n[3].Color]},{"a":2,"n":"SetBlockImage","t":8,"pi":[{"n":"image","pt":$n[3].Sprite,"ps":0}],"sn":"SetBlockImage","rt":$n[0].Void,"p":[$n[3].Sprite]},{"a":2,"n":"SetSelected","t":8,"pi":[{"n":"selected","pt":$n[0].Boolean,"ps":0}],"sn":"SetSelected","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"SetSortingOrder","t":8,"pi":[{"n":"sorting","pt":$n[0].Int32,"ps":0}],"sn":"SetSortingOrder","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":2,"n":"VisibleBlockDestroyLine","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleBlockDestroyLine","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"canMoveBlock","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_canMoveBlock","t":8,"rt":$n[0].Boolean,"fg":"canMoveBlock","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_canMoveBlock","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"canMoveBlock"},"fn":"canMoveBlock"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"block","t":4,"rt":$n[3].SpriteRenderer,"sn":"block"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockDestroyLine","t":4,"rt":$n[3].SpriteRenderer,"sn":"blockDestroyLine"},{"a":1,"n":"sortingOrder","t":4,"rt":$n[0].Int32,"sn":"sortingOrder","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"backing":true,"n":"<canMoveBlock>k__BackingField","t":4,"rt":$n[0].Boolean,"sn":"canMoveBlock","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*BlockObj end.*/

    /*BoardContainer start.*/
    $m("BoardContainer", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BlocksFall","t":8,"sn":"BlocksFall","rt":$n[6].IEnumerator},{"a":2,"n":"BlocksHasChild","t":8,"sn":"BlocksHasChild","rt":$n[5].List$1(BlockBoard)},{"a":2,"n":"BoardGrowBlockAnimation","t":8,"sn":"BoardGrowBlockAnimation","rt":$n[1].Task},{"a":1,"n":"CameraShake","t":8,"sn":"CameraShake","rt":$n[0].Void},{"a":1,"n":"ChangeGridSize","t":8,"pi":[{"n":"newSize","pt":$n[0].Int32,"ps":0}],"sn":"ChangeGridSize","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"CollectGem","t":8,"pi":[{"n":"gem","pt":$n[3].SpriteRenderer,"ps":0},{"n":"delay","pt":$n[0].Single,"ps":1}],"sn":"CollectGem","rt":$n[0].Void,"p":[$n[3].SpriteRenderer,$n[0].Single]},{"a":2,"n":"GameOver","t":8,"sn":"GameOver","rt":$n[6].IEnumerator},{"a":2,"n":"GetBlockPosition","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0},{"n":"y","pt":$n[0].Int32,"ps":1},{"n":"nextBlock","pt":$n[3].Vector2,"ps":2}],"sn":"GetBlockPosition","rt":$n[3].Vector3,"p":[$n[0].Int32,$n[0].Int32,$n[3].Vector2]},{"a":2,"n":"GetNextBlockPos","t":8,"sn":"GetNextBlockPos","rt":$n[3].Vector2},{"a":1,"n":"MinimizeGrid","t":8,"pi":[{"n":"originalGrid","pt":$n[5].List$1(BlockBoard),"ps":0},{"n":"newGridSize","pt":$n[0].Int32,"ps":1}],"sn":"MinimizeGrid","rt":$n[5].List$1(BlockBoard),"p":[$n[5].List$1(BlockBoard),$n[0].Int32]},{"a":2,"n":"NextGridSize","t":8,"sn":"NextGridSize","rt":$n[1].Task},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[0].Void},{"a":1,"n":"ScaleBorder","t":8,"pi":[{"n":"blockAmount","pt":$n[0].Int32,"ps":0}],"sn":"ScaleBorder","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"SetBlockImage","t":8,"pi":[{"n":"image","pt":$n[3].Sprite,"ps":0}],"sn":"SetBlockImage","rt":$n[0].Void,"p":[$n[3].Sprite]},{"a":1,"n":"SetBlockScale","t":8,"sn":"SetBlockScale","rt":$n[6].IEnumerator},{"a":2,"n":"ShakeBoard","t":8,"sn":"ShakeBoard","rt":$n[0].Void},{"a":2,"n":"SortInSpiralOrder","is":true,"t":8,"pi":[{"n":"blocks","pt":$n[5].List$1(BlockBoard),"ps":0}],"sn":"SortInSpiralOrder","rt":$n[5].List$1(BlockBoard),"p":[$n[5].List$1(BlockBoard)]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"VisibleBlock","t":8,"pi":[{"n":"index","pt":$n[0].Int32,"ps":0},{"n":"visible","pt":$n[0].Boolean,"ps":1}],"sn":"VisibleBlock","rt":BlockBoard,"p":[$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"GetAllBlocks","t":16,"rt":$n[5].List$1(BlockBoard),"g":{"a":2,"n":"get_GetAllBlocks","t":8,"rt":$n[5].List$1(BlockBoard),"fg":"GetAllBlocks"},"fn":"GetAllBlocks"},{"a":2,"n":"GetBlockScale","t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_GetBlockScale","t":8,"rt":$n[0].Single,"fg":"GetBlockScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"fn":"GetBlockScale"},{"a":2,"n":"GetBlocks","t":16,"rt":$n[5].List$1(BlockBoard),"g":{"a":2,"n":"get_GetBlocks","t":8,"rt":$n[5].List$1(BlockBoard),"fg":"GetBlocks"},"fn":"GetBlocks"},{"a":2,"n":"GetHeight","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_GetHeight","t":8,"rt":$n[0].Int32,"fg":"GetHeight","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"GetHeight"},{"a":2,"n":"GetWidth","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_GetWidth","t":8,"rt":$n[0].Int32,"fg":"GetWidth","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"GetWidth"},{"at":[new UnityEngine.HeaderAttribute("Animation"),new UnityEngine.SerializeFieldAttribute()],"a":2,"n":"AnimateBoardGrow","t":4,"rt":$n[0].Boolean,"sn":"AnimateBoardGrow","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"allBlocksInBoard","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"allBlocksInBoard"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockLandAnimCurve","t":4,"rt":pc.AnimationCurve,"sn":"blockLandAnimCurve"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockPrefab","t":4,"rt":$n[3].GameObject,"sn":"blockPrefab"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockRiseTime","t":4,"rt":$n[0].Single,"sn":"blockRiseTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockScale","t":4,"rt":$n[0].Single,"sn":"blockScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocks","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocks"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardOffsetPerStep","t":4,"rt":$n[0].Single,"sn":"boardOffsetPerStep","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Border control"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"border","t":4,"rt":$n[3].SpriteRenderer,"sn":"border"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"borderSizeOffset","t":4,"rt":$n[0].Single,"sn":"borderSizeOffset","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"borderSizePerUnit","t":4,"rt":$n[0].Single,"sn":"borderSizePerUnit","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"cameraController","t":4,"rt":CameraController,"sn":"cameraController"},{"a":1,"n":"currentBlockAnimationTimeIndex","t":4,"rt":$n[0].Int32,"sn":"currentBlockAnimationTimeIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"currentGridSizeIndex","t":4,"rt":$n[0].Int32,"sn":"currentGridSizeIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.HeaderAttribute("Camere shake"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"duration","t":4,"rt":$n[0].Single,"sn":"duration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gemCounters","t":4,"rt":System.Array.type(GemCounter),"sn":"gemCounters"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gridSizeSteps","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"gridSizeSteps"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"height","t":4,"rt":$n[0].Int32,"sn":"height","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"nextBlockHeight","t":4,"rt":$n[3].Transform,"sn":"nextBlockHeight"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"nextBlockWidth","t":4,"rt":$n[3].Transform,"sn":"nextBlockWidth"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"placeBlockPoint","t":4,"rt":$n[3].Transform,"sn":"placeBlockPoint"},{"a":1,"n":"resizeInProgress","t":4,"rt":$n[0].Boolean,"sn":"resizeInProgress","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"shake","t":4,"rt":$n[3].Animation,"sn":"shake"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"strength","t":4,"rt":$n[3].Vector3,"sn":"strength"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"totalBlockAnimationTimes","t":4,"rt":$n[0].Array.type(System.Single),"sn":"totalBlockAnimationTimes"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"vibrato","t":4,"rt":$n[0].Int32,"sn":"vibrato","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"width","t":4,"rt":$n[0].Int32,"sn":"width","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*BoardContainer end.*/

    /*BombItem start.*/
    $m("BombItem", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"DestroyBomb","t":8,"pi":[{"n":"destroy","dv":false,"o":true,"pt":$n[0].Boolean,"ps":0}],"sn":"DestroyBomb","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":1,"n":"RemoveBomb","t":8,"sn":"RemoveBomb","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"pi":[{"n":"blockBoard","pt":BlockBoard,"ps":0},{"n":"step","pt":$n[0].Int32,"ps":1},{"n":"bombDetail","pt":BombDetail,"ps":2}],"sn":"Setup","rt":$n[0].Void,"p":[BlockBoard,$n[0].Int32,BombDetail]},{"a":2,"n":"UpdateStepBomb","t":8,"pi":[{"n":"value","pt":$n[0].Int32,"ps":0}],"sn":"UpdateStepBomb","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"blockBoard","t":4,"rt":BlockBoard,"sn":"blockBoard"},{"a":1,"n":"bombDetail","t":4,"rt":BombDetail,"sn":"bombDetail"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bugStandObj","t":4,"rt":$n[3].GameObject,"sn":"bugStandObj"},{"a":1,"n":"destroy","t":4,"rt":$n[0].Boolean,"sn":"destroy","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"eff_warning","t":4,"rt":$n[3].ParticleSystem,"sn":"eff_warning"},{"a":1,"n":"step","t":4,"rt":$n[0].Int32,"sn":"step","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"stepText","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"stepText"},{"a":1,"n":"stepWarning","t":4,"rt":$n[0].Int32,"sn":"stepWarning","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*BombItem end.*/

    /*BoosterMoveDestroy start.*/
    $m("BoosterMoveDestroy", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"GUIEditor","t":8,"sn":"GUIEditor","rt":$n[0].Void},{"a":2,"n":"Move","t":8,"pi":[{"n":"position","pt":$n[3].Vector3,"ps":0}],"sn":"Move","rt":$n[0].Void,"p":[$n[3].Vector3]},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[0].Void},{"a":1,"n":"OnTriggerEnter2D","t":8,"pi":[{"n":"collision","pt":$n[3].Collider2D,"ps":0}],"sn":"OnTriggerEnter2D","rt":$n[0].Void,"p":[$n[3].Collider2D]},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"horizontal","t":4,"rt":$n[0].Boolean,"sn":"horizontal","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"rig2D","t":4,"rt":$n[3].Rigidbody2D,"sn":"rig2D"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"speed","t":4,"rt":$n[0].Single,"sn":"speed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*BoosterMoveDestroy end.*/

    /*CameraSize start.*/
    $m("CameraSize", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Initialize","t":8,"sn":"Initialize","rt":$n[0].Void},{"a":1,"n":"SetupPlayGame","t":8,"sn":"SetupPlayGame","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"aspect","t":4,"rt":$n[0].Single,"sn":"aspect","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"cameraObj","t":4,"rt":$n[3].Camera,"sn":"cameraObj"},{"a":1,"n":"originPosition","t":4,"rt":$n[3].Vector3,"sn":"originPosition"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"sizeCamera","t":4,"rt":$n[0].Single,"sn":"sizeCamera","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"sizeCameraInBoard10x10","t":4,"rt":$n[0].Single,"sn":"sizeCameraInBoard10x10","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*CameraSize end.*/

    /*EffectDestroyBlock3D start.*/
    $m("EffectDestroyBlock3D", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Acitve","t":8,"sn":"Acitve","rt":$n[0].Void},{"a":1,"n":"OnDisable","t":8,"sn":"OnDisable","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"GetRigidbody","t":16,"rt":$n[3].Rigidbody,"g":{"a":1,"n":"get_GetRigidbody","t":8,"rt":$n[3].Rigidbody,"fg":"GetRigidbody"},"fn":"GetRigidbody"},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"jump","t":4,"rt":$n[0].Boolean,"sn":"jump","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"jumpForce","t":4,"rt":$n[3].Vector3,"sn":"jumpForce"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"m_EulerAngleVelocity","t":4,"rt":$n[3].Vector3,"sn":"m_EulerAngleVelocity"},{"a":1,"n":"rigidbody","t":4,"rt":$n[3].Rigidbody,"sn":"rigidbody"}]}; }, $n);
    /*EffectDestroyBlock3D end.*/

    /*EffectObj start.*/
    $m("EffectObj", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Play","t":8,"sn":"Play","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":2,"n":"GetCurveMove","t":16,"rt":CurveMove,"g":{"a":2,"n":"get_GetCurveMove","t":8,"rt":CurveMove,"fg":"GetCurveMove"},"fn":"GetCurveMove"},{"a":1,"n":"curveMove","t":4,"rt":CurveMove,"sn":"curveMove"},{"a":1,"n":"particleSystems","t":4,"rt":System.Array.type(UnityEngine.ParticleSystem),"sn":"particleSystems"}]}; }, $n);
    /*EffectObj end.*/

    /*IGameMode start.*/
    $m("IGameMode", function () { return {"att":161,"a":2,"m":[{"ab":true,"a":2,"n":"ActionDestroyBlock","t":8,"sn":"IGameMode$ActionDestroyBlock","rt":$n[0].Void},{"ab":true,"a":2,"n":"ActionPlacePiece","t":8,"sn":"IGameMode$ActionPlacePiece","rt":$n[0].Void},{"ab":true,"a":2,"n":"GetGameMode","t":8,"sn":"IGameMode$GetGameMode","rt":GameMode,"box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"ab":true,"a":2,"n":"NextPiece","t":8,"sn":"IGameMode$NextPiece","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"ab":true,"a":2,"n":"Reset","t":8,"sn":"IGameMode$Reset","rt":$n[0].Void},{"ab":true,"a":2,"n":"ReturnHome","t":8,"sn":"IGameMode$ReturnHome","rt":$n[0].Void},{"ab":true,"a":2,"n":"Setup","t":8,"sn":"IGameMode$Setup","rt":$n[0].Void}]}; }, $n);
    /*IGameMode end.*/

    /*BombMode start.*/
    $m("BombMode", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ActionDestroyBlock","t":8,"sn":"ActionDestroyBlock","rt":$n[0].Void},{"a":2,"n":"ActionPlacePiece","t":8,"sn":"ActionPlacePiece","rt":$n[0].Void},{"a":2,"n":"GetGameMode","t":8,"sn":"GetGameMode","rt":GameMode,"box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"a":2,"n":"NextPiece","t":8,"sn":"NextPiece","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[0].Void},{"a":2,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"VisibleObjs","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleObjs","rt":$n[0].Void,"p":[$n[0].Boolean]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bombItems","t":4,"rt":$n[5].List$1(BombItem),"sn":"bombItems"},{"a":1,"n":"countStep","t":4,"rt":$n[0].Int32,"sn":"countStep","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gameMode","t":4,"rt":GameMode,"sn":"gameMode","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"objsUsedInMode","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"objsUsedInMode"}]}; }, $n);
    /*BombMode end.*/

    /*EmptyMode start.*/
    $m("EmptyMode", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ActionDestroyBlock","t":8,"sn":"ActionDestroyBlock","rt":$n[0].Void},{"a":2,"n":"ActionPlacePiece","t":8,"sn":"ActionPlacePiece","rt":$n[0].Void},{"a":2,"n":"GetGameMode","t":8,"sn":"GetGameMode","rt":GameMode,"box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"a":2,"n":"NextPiece","t":8,"sn":"NextPiece","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[0].Void},{"a":2,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"VisibleObjs","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleObjs","rt":$n[0].Void,"p":[$n[0].Boolean]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gameMode","t":4,"rt":GameMode,"sn":"gameMode","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"objsUsedInMode","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"objsUsedInMode"}]}; }, $n);
    /*EmptyMode end.*/

    /*TimeMode start.*/
    $m("TimeMode", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ActionDestroyBlock","t":8,"sn":"ActionDestroyBlock","rt":$n[0].Void},{"a":2,"n":"ActionPlacePiece","t":8,"sn":"ActionPlacePiece","rt":$n[0].Void},{"a":1,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[0].Void},{"a":2,"n":"GetGameMode","t":8,"sn":"GetGameMode","rt":GameMode,"box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"a":2,"n":"NextPiece","t":8,"sn":"NextPiece","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Reset","t":8,"sn":"Reset","rt":$n[0].Void},{"a":2,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":1,"n":"ShowEffectTime","t":8,"pi":[{"n":"totalLine","pt":$n[0].Int32,"ps":0}],"sn":"ShowEffectTime","rt":$n[6].IEnumerator,"p":[$n[0].Int32]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"UpdateProcessFill","t":8,"pi":[{"n":"value","pt":$n[0].Single,"ps":0}],"sn":"UpdateProcessFill","rt":$n[0].Void,"p":[$n[0].Single]},{"a":1,"n":"VisibleObjs","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleObjs","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":1,"n":"fill","t":4,"rt":$n[0].Single,"sn":"fill","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gameMode","t":4,"rt":GameMode,"sn":"gameMode","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"iconTime","t":4,"rt":$n[3].Transform,"sn":"iconTime"},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"objsUsedInMode","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"objsUsedInMode"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"processTime","t":4,"rt":$n[4].Image,"sn":"processTime"}]}; }, $n);
    /*TimeMode end.*/

    /*PieceShape start.*/
    $m("PieceShape", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"shapes","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"shapes"}]}; }, $n);
    /*PieceShape end.*/

    /*Piece start.*/
    $m("Piece", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CanPlacePieceOnBoard","t":8,"sn":"CanPlacePieceOnBoard","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CheckPieceCanPlaceBoard","t":8,"sn":"CheckPieceCanPlaceBoard","rt":$n[6].IEnumerator},{"a":1,"n":"FullBlockX","t":8,"pi":[{"n":"blockBoard","pt":BlockBoard,"ps":0}],"sn":"FullBlockX","rt":$n[0].Boolean,"p":[BlockBoard],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"FullBlockY","t":8,"pi":[{"n":"blockBoard","pt":BlockBoard,"ps":0}],"sn":"FullBlockY","rt":$n[0].Boolean,"p":[BlockBoard],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"GetRandomBlockColor","t":8,"sn":"GetRandomBlockColor","rt":BlockColor,"box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"GetWorldScale","t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0}],"sn":"GetWorldScale","rt":$n[3].Vector3,"p":[$n[3].Transform]},{"a":1,"n":"PlacePiece","t":8,"sn":"PlacePiece","rt":$n[0].Void},{"a":1,"n":"SetBlockColor","t":8,"pi":[{"n":"newCol","pt":$n[3].Color,"ps":0}],"sn":"SetBlockColor","rt":$n[0].Void,"p":[$n[3].Color]},{"a":1,"n":"SetBlockImage","t":8,"pi":[{"n":"image","pt":$n[3].Sprite,"ps":0}],"sn":"SetBlockImage","rt":$n[0].Void,"p":[$n[3].Sprite]},{"a":1,"n":"SetBlockScale","t":8,"pi":[{"n":"newScale","pt":$n[0].Single,"ps":0}],"sn":"SetBlockScale","rt":$n[0].Void,"p":[$n[0].Single]},{"a":2,"n":"SetSelectPosition","t":8,"pi":[{"n":"position","pt":$n[3].Vector3,"ps":0}],"sn":"SetSelectPosition","rt":$n[0].Void,"p":[$n[3].Vector3]},{"a":2,"n":"SetSelected","t":8,"pi":[{"n":"selected","pt":$n[0].Boolean,"ps":0}],"sn":"SetSelected","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"Setup","t":8,"pi":[{"n":"blockVisible","pt":$n[0].Boolean,"ps":0}],"sn":"Setup","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"SetupPieceClone","t":8,"pi":[{"n":"pieceClone","pt":Piece,"ps":0}],"sn":"SetupPieceClone","rt":$n[0].Void,"p":[Piece]},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"VisibleBlocks","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleBlocks","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"CanPlacePiece","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_CanPlacePiece","t":8,"rt":$n[0].Boolean,"fg":"CanPlacePiece","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_CanPlacePiece","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"CanPlacePiece"},"fn":"CanPlacePiece"},{"a":2,"n":"GetBlockObjs","t":16,"rt":$n[5].List$1(BlockObj),"g":{"a":2,"n":"get_GetBlockObjs","t":8,"rt":$n[5].List$1(BlockObj),"fg":"GetBlockObjs"},"fn":"GetBlockObjs"},{"a":2,"n":"GetPieceID","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_GetPieceID","t":8,"rt":$n[0].Int32,"fg":"GetPieceID","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"GetPieceID"},{"a":2,"n":"PieceIndex","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_PieceIndex","t":8,"rt":$n[0].Int32,"fg":"PieceIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_PieceIndex","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"PieceIndex"},"fn":"PieceIndex"},{"a":2,"n":"Score","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_Score","t":8,"rt":$n[0].Int32,"fg":"Score","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"Score"},{"a":2,"n":"CanSeleted","t":4,"rt":$n[0].Boolean,"sn":"CanSeleted","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockObjs","t":4,"rt":$n[5].List$1(BlockObj),"sn":"blockObjs"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockScale","t":4,"rt":$n[0].Single,"sn":"blockScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksOnBoard","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksOnBoard"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksOnBoardHightLight","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksOnBoardHightLight"},{"a":1,"n":"col","t":4,"rt":$n[3].Collider,"sn":"col"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"color","t":4,"rt":BlockColor,"sn":"color","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"dstList","t":4,"rt":$n[5].List$1(System.Single),"sn":"dstList"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"hexaBlock","t":4,"rt":$n[0].Boolean,"sn":"hexaBlock","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"isClone","t":4,"rt":$n[0].Boolean,"sn":"isClone","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"originScale","t":4,"rt":$n[0].Single,"sn":"originScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"pieceCheckPlaceBoard","t":4,"rt":Piece,"sn":"pieceCheckPlaceBoard"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"pieceID","t":4,"rt":$n[0].Int32,"sn":"pieceID","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"pieceShapes","t":4,"rt":System.Array.type(PieceShape),"sn":"pieceShapes"},{"a":1,"n":"setupColor","t":4,"rt":$n[0].Boolean,"sn":"setupColor","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<CanPlacePiece>k__BackingField","t":4,"rt":$n[0].Boolean,"sn":"CanPlacePiece","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<PieceIndex>k__BackingField","t":4,"rt":$n[0].Int32,"sn":"PieceIndex","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*Piece end.*/

    /*RestartStage start.*/
    $m("RestartStage", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"RestartCurrentStage","t":8,"sn":"RestartCurrentStage","rt":$n[0].Void},{"a":2,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void}]}; }, $n);
    /*RestartStage end.*/

    /*TutorialBoardData start.*/
    $m("TutorialBoardData", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"CanPlacePiece","t":8,"pi":[{"n":"blockBoards","pt":$n[5].List$1(BlockBoard),"ps":0}],"sn":"CanPlacePiece","rt":$n[0].Boolean,"p":[$n[5].List$1(BlockBoard)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"EndStep","t":8,"sn":"EndStep","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"beginHand","t":4,"rt":$n[3].Transform,"sn":"beginHand"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksBoardCanPlace","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksBoardCanPlace"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardTutorial","t":4,"rt":BoardContainer,"sn":"boardTutorial"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"piecesID","t":4,"rt":$n[0].Array.type(System.Int32),"sn":"piecesID"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"targetHand","t":4,"rt":$n[3].Transform,"sn":"targetHand"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"tutorialData","t":4,"rt":$n[5].List$1(System.Boolean),"sn":"tutorialData"}]}; }, $n);
    /*TutorialBoardData end.*/

    /*TutorialManager start.*/
    $m("TutorialManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ActiveTutorialClassic","t":8,"sn":"ActiveTutorialClassic","rt":$n[0].Void},{"a":2,"n":"ActiveTutorialHexa","t":8,"sn":"ActiveTutorialHexa","rt":$n[0].Void},{"a":2,"n":"Clicked","t":8,"pi":[{"n":"click","pt":$n[0].Boolean,"ps":0}],"sn":"Clicked","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"EndStep","t":8,"sn":"EndStep","rt":$n[0].Void},{"a":2,"n":"MoveHand","t":8,"pi":[{"n":"from","pt":$n[3].Vector3,"ps":0},{"n":"to","pt":$n[3].Vector3,"ps":1}],"sn":"MoveHand","rt":$n[0].Void,"p":[$n[3].Vector3,$n[3].Vector3]},{"a":1,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":2,"n":"Setup","t":8,"sn":"Setup","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"CurrentTutorialBoardData","t":16,"rt":TutorialBoardData,"g":{"a":2,"n":"get_CurrentTutorialBoardData","t":8,"rt":TutorialBoardData,"fg":"CurrentTutorialBoardData"},"fn":"CurrentTutorialBoardData"},{"a":2,"n":"NextTutorial","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_NextTutorial","t":8,"rt":$n[0].Boolean,"fg":"NextTutorial","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_NextTutorial","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"NextTutorial"},"fn":"NextTutorial"},{"a":1,"n":"classicIndex","t":4,"rt":$n[0].Int32,"sn":"classicIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"fadePopup","t":4,"rt":$n[8].Popup,"sn":"fadePopup"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"from","t":4,"rt":$n[3].Vector3,"sn":"from"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"handObject","t":4,"rt":$n[3].GameObject,"sn":"handObject"},{"a":1,"n":"hexaIndex","t":4,"rt":$n[0].Int32,"sn":"hexaIndex","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"highLightPiecePlace","t":4,"rt":$n[3].GameObject,"sn":"highLightPiecePlace"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"layerPopupOrigin","t":4,"rt":$n[0].Int32,"sn":"layerPopupOrigin","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layerPopupTutorial","t":4,"rt":$n[0].Int32,"sn":"layerPopupTutorial","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.HeaderAttribute("Canvas Popup"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"popupCanvas","t":4,"rt":$n[3].Canvas,"sn":"popupCanvas"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"smoothSpeed","t":4,"rt":$n[0].Single,"sn":"smoothSpeed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"to","t":4,"rt":$n[3].Vector3,"sn":"to"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"tutorialBoardDatasClassic","t":4,"rt":$n[5].List$1(TutorialBoardData),"sn":"tutorialBoardDatasClassic"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"tutorialBoardDatasClassic10x10","t":4,"rt":$n[5].List$1(TutorialBoardData),"sn":"tutorialBoardDatasClassic10x10"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"tutorialBoardDatasHexa","t":4,"rt":$n[5].List$1(TutorialBoardData),"sn":"tutorialBoardDatasHexa"},{"a":1,"n":"velocity","t":4,"rt":$n[3].Vector3,"sn":"velocity"},{"a":1,"backing":true,"n":"<NextTutorial>k__BackingField","t":4,"rt":$n[0].Boolean,"sn":"NextTutorial","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*TutorialManager end.*/

    /*BoosterManager start.*/
    $m("BoosterManager", function () { return {"nested":[BoosterManager.BoosterInfor,BoosterManager.HintInfor,BoosterManager.BoosterType],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ActiveEffectBooster","t":8,"pi":[{"n":"blockBoard","pt":BlockBoard,"ps":0}],"sn":"ActiveEffectBooster","rt":$n[0].Boolean,"p":[BlockBoard],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"AddHint","t":8,"pi":[{"n":"booster","pt":$n[0].Int32,"ps":0}],"sn":"AddHint","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"AnimationScale","t":8,"pi":[{"n":"rect","pt":$n[3].RectTransform,"ps":0},{"n":"scale","pt":$n[0].Boolean,"ps":1},{"n":"duration","dv":0.2,"o":true,"pt":$n[0].Single,"ps":2}],"sn":"AnimationScale","rt":$n[0].Void,"p":[$n[3].RectTransform,$n[0].Boolean,$n[0].Single]},{"a":2,"n":"CompleteUsedBooster","t":8,"pi":[{"n":"Booster","pt":$n[0].Int32,"ps":0}],"sn":"CompleteUsedBooster","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"EffectOneBlockDestroy","t":8,"pi":[{"n":"position","pt":$n[3].Vector3,"ps":0}],"sn":"EffectOneBlockDestroy","rt":$n[0].Void,"p":[$n[3].Vector3]},{"a":2,"n":"OnEventBoosterCancel","t":8,"sn":"OnEventBoosterCancel","rt":$n[0].Void},{"a":2,"n":"OnEventUseBooster","t":8,"pi":[{"n":"booster","pt":$n[0].Int32,"ps":0}],"sn":"OnEventUseBooster","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"Restart","t":8,"sn":"Restart","rt":$n[0].Void},{"a":2,"n":"SetBoosterType","t":8,"pi":[{"n":"boosterType","pt":BoosterManager.BoosterType,"ps":0}],"sn":"SetBoosterType","rt":$n[0].Void,"p":[BoosterManager.BoosterType]},{"a":1,"n":"SetupPlayGame","t":8,"sn":"SetupPlayGame","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"UpdateTexNumberBooster","t":8,"sn":"UpdateTexNumberBooster","rt":$n[0].Void},{"a":2,"n":"VisibleButtonUndo","t":8,"sn":"VisibleButtonUndo","rt":$n[0].Void},{"a":2,"n":"GetBoosterType","t":16,"rt":BoosterManager.BoosterType,"g":{"a":2,"n":"get_GetBoosterType","t":8,"rt":BoosterManager.BoosterType,"fg":"GetBoosterType","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},"fn":"GetBoosterType"},{"a":2,"n":"destroyObj","t":16,"rt":$n[3].GameObject,"g":{"a":2,"n":"get_destroyObj","t":8,"rt":$n[3].GameObject,"fg":"destroyObj"},"s":{"a":2,"n":"set_destroyObj","t":8,"p":[$n[3].GameObject],"rt":$n[0].Void,"fs":"destroyObj"},"fn":"destroyObj"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boosterType","t":4,"rt":BoosterManager.BoosterType,"sn":"boosterType","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},{"a":1,"n":"btnUndo","t":4,"rt":$n[4].Button,"sn":"btnUndo"},{"a":1,"n":"currentBooster","t":4,"rt":$n[0].Int32,"sn":"currentBooster","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"hammerAnimation","t":4,"rt":$n[3].Animation,"sn":"hammerAnimation"},{"at":[new UnityEngine.HeaderAttribute("Hammer Booster"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"hammerObj","t":4,"rt":$n[3].GameObject,"sn":"hammerObj"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"hintInfors","t":4,"rt":$n[5].List$1(BoosterManager.HintInfor),"sn":"hintInfors"},{"a":1,"n":"maxAdsGetBoosterOneGame","is":true,"t":4,"rt":$n[0].Int32,"sn":"maxAdsGetBoosterOneGame","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"rectButtonsBooster","t":4,"rt":System.Array.type(UnityEngine.RectTransform),"sn":"rectButtonsBooster"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"testMode","t":4,"rt":$n[0].Boolean,"sn":"testMode","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"textBoosterBack","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"textBoosterBack"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"textBoosterOneBlock","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"textBoosterOneBlock"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"textBoosterOneHorizontal","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"textBoosterOneHorizontal"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"textBoosterOneVertical","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"textBoosterOneVertical"},{"a":1,"backing":true,"n":"<destroyObj>k__BackingField","t":4,"rt":$n[3].GameObject,"sn":"destroyObj"}]}; }, $n);
    /*BoosterManager end.*/

    /*BoosterManager+BoosterInfor start.*/
    $m("BoosterManager.BoosterInfor", function () { return {"td":BoosterManager,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"nameBooster","t":4,"rt":$n[0].String,"sn":"nameBooster"},{"a":2,"n":"numberBoosterStartGame","t":4,"rt":$n[0].Int32,"sn":"numberBoosterStartGame","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"numberTakeAds","t":4,"rt":$n[0].Int32,"sn":"numberTakeAds","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*BoosterManager+BoosterInfor end.*/

    /*BoosterManager+HintInfor start.*/
    $m("BoosterManager.HintInfor", function () { return {"td":BoosterManager,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"LoadHintInfor","t":8,"sn":"LoadHintInfor","rt":$n[0].Void},{"a":2,"n":"SaveHintInfor","t":8,"sn":"SaveHintInfor","rt":$n[0].Void},{"a":2,"n":"adsCanGet","t":4,"rt":$n[0].Int32,"sn":"adsCanGet","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"boosterType","t":4,"rt":BoosterManager.BoosterType,"sn":"boosterType","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},{"a":2,"n":"current","t":4,"rt":$n[0].Int32,"sn":"current","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"start","t":4,"rt":$n[0].Int32,"sn":"start","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*BoosterManager+HintInfor end.*/

    /*BoosterManager+BoosterType start.*/
    $m("BoosterManager.BoosterType", function () { return {"td":BoosterManager,"att":8450,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BACK","is":true,"t":4,"rt":BoosterManager.BoosterType,"sn":"BACK","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},{"a":2,"n":"NONE","is":true,"t":4,"rt":BoosterManager.BoosterType,"sn":"NONE","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},{"a":2,"n":"ONE_BLOCK_DESTROY","is":true,"t":4,"rt":BoosterManager.BoosterType,"sn":"ONE_BLOCK_DESTROY","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},{"a":2,"n":"ONE_HORIZONTAL","is":true,"t":4,"rt":BoosterManager.BoosterType,"sn":"ONE_HORIZONTAL","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}},{"a":2,"n":"ONE_VERTICAL","is":true,"t":4,"rt":BoosterManager.BoosterType,"sn":"ONE_VERTICAL","box":function ($v) { return Bridge.box($v, BoosterManager.BoosterType, System.Enum.toStringFn(BoosterManager.BoosterType));}}]}; }, $n);
    /*BoosterManager+BoosterType end.*/

    /*EffectManager start.*/
    $m("EffectManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"RegisterArrowObj","t":8,"sn":"RegisterArrowObj","rt":BoosterMoveDestroy},{"a":2,"n":"RegisterBombItem","t":8,"sn":"RegisterBombItem","rt":BombItem},{"a":2,"n":"RegisterEffectDestroyBlock","t":8,"sn":"RegisterEffectDestroyBlock","rt":EffectObj},{"a":2,"n":"RegisterEffectDestroyBlockHexa","t":8,"sn":"RegisterEffectDestroyBlockHexa","rt":EffectObj},{"a":2,"n":"RegisterEffectTime","t":8,"sn":"RegisterEffectTime","rt":EffectObj},{"a":2,"n":"RegisterScoreTextEffect","t":8,"sn":"RegisterScoreTextEffect","rt":$n[3].Rigidbody2D},{"a":2,"n":"RegisterSwordObj","t":8,"sn":"RegisterSwordObj","rt":BoosterMoveDestroy},{"a":1,"n":"ArrowsDestroy","t":4,"rt":$n[5].List$1(BoosterMoveDestroy),"sn":"ArrowsDestroy"},{"a":1,"n":"bombItems","t":4,"rt":$n[5].List$1(BombItem),"sn":"bombItems"},{"a":1,"n":"destroyBlocks","t":4,"rt":$n[5].List$1(EffectObj),"sn":"destroyBlocks"},{"a":1,"n":"destroyBlocksHexa","t":4,"rt":$n[5].List$1(EffectObj),"sn":"destroyBlocksHexa"},{"a":1,"n":"effectsTime","t":4,"rt":$n[5].List$1(EffectObj),"sn":"effectsTime"},{"a":1,"n":"scoresTextEffect","t":4,"rt":$n[5].List$1(UnityEngine.Rigidbody2D),"sn":"scoresTextEffect"},{"a":1,"n":"swordsDestroy","t":4,"rt":$n[5].List$1(BoosterMoveDestroy),"sn":"swordsDestroy"}]}; }, $n);
    /*EffectManager end.*/

    /*BoardType start.*/
    $m("BoardType", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Classic_10x10","is":true,"t":4,"rt":BoardType,"sn":"Classic_10x10","box":function ($v) { return Bridge.box($v, BoardType, System.Enum.toStringFn(BoardType));}},{"a":2,"n":"Classic_8x8","is":true,"t":4,"rt":BoardType,"sn":"Classic_8x8","box":function ($v) { return Bridge.box($v, BoardType, System.Enum.toStringFn(BoardType));}},{"a":2,"n":"Hexa","is":true,"t":4,"rt":BoardType,"sn":"Hexa","box":function ($v) { return Bridge.box($v, BoardType, System.Enum.toStringFn(BoardType));}}]}; }, $n);
    /*BoardType end.*/

    /*GameMode start.*/
    $m("GameMode", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"BOMB","is":true,"t":4,"rt":GameMode,"sn":"BOMB","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"a":2,"n":"CLASSIC","is":true,"t":4,"rt":GameMode,"sn":"CLASSIC","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"a":2,"n":"HEXA","is":true,"t":4,"rt":GameMode,"sn":"HEXA","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"a":2,"n":"TIME","is":true,"t":4,"rt":GameMode,"sn":"TIME","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}}]}; }, $n);
    /*GameMode end.*/

    /*GameManager start.*/
    $m("GameManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake$1","rt":$n[0].Void},{"a":1,"n":"ClearData","t":8,"sn":"ClearData","rt":$n[0].Void},{"a":2,"n":"GameOver","t":8,"sn":"GameOver","rt":$n[0].Void},{"a":2,"n":"GameOverProccess","t":8,"sn":"GameOverProccess","rt":$n[0].Void},{"a":2,"n":"GoHome","t":8,"sn":"GoHome","rt":$n[0].Void},{"a":1,"n":"LoadData","t":8,"sn":"LoadData","rt":$n[0].Void},{"a":1,"n":"LoadSetting","t":8,"sn":"LoadSetting","rt":$n[0].Void},{"a":2,"n":"PlayGame","t":8,"sn":"PlayGame","rt":$n[0].Void},{"a":2,"n":"ReplayGame","t":8,"sn":"ReplayGame","rt":$n[0].Void},{"a":2,"n":"SaveDataMode","t":8,"sn":"SaveDataMode","rt":$n[0].Void},{"a":2,"n":"SaveSetting","t":8,"sn":"SaveSetting","rt":$n[0].Void},{"a":1,"n":"SecondChance","t":8,"sn":"SecondChance","rt":$n[0].Void},{"a":2,"n":"SetBoardType","t":8,"pi":[{"n":"boardType","pt":BoardType,"ps":0}],"sn":"SetBoardType","rt":$n[0].Void,"p":[BoardType]},{"a":2,"n":"SetGameMode","t":8,"pi":[{"n":"gameMode","pt":GameMode,"ps":0}],"sn":"SetGameMode","rt":$n[0].Void,"p":[GameMode]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"UpdateScore","t":8,"pi":[{"n":"score","pt":$n[0].Int32,"ps":0}],"sn":"UpdateScore","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"VisibleButton","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisibleButton","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"GetBoardType","t":16,"rt":BoardType,"g":{"a":2,"n":"get_GetBoardType","t":8,"rt":BoardType,"fg":"GetBoardType","box":function ($v) { return Bridge.box($v, BoardType, System.Enum.toStringFn(BoardType));}},"fn":"GetBoardType"},{"a":2,"n":"GetCurrentDataMode","t":16,"rt":DataMode,"g":{"a":2,"n":"get_GetCurrentDataMode","t":8,"rt":DataMode,"fg":"GetCurrentDataMode"},"fn":"GetCurrentDataMode"},{"a":2,"n":"GetDataInGame","t":16,"rt":DataInGame,"g":{"a":2,"n":"get_GetDataInGame","t":8,"rt":DataInGame,"fg":"GetDataInGame"},"fn":"GetDataInGame"},{"a":2,"n":"GetGameMode","t":16,"rt":GameMode,"g":{"a":2,"n":"get_GetGameMode","t":8,"rt":GameMode,"fg":"GetGameMode","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},"fn":"GetGameMode"},{"a":2,"n":"GetGameSetting","t":16,"rt":GameSetting,"g":{"a":2,"n":"get_GetGameSetting","t":8,"rt":GameSetting,"fg":"GetGameSetting"},"fn":"GetGameSetting"},{"a":2,"n":"GetRateURL","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_GetRateURL","t":8,"rt":$n[0].String,"fg":"GetRateURL"},"fn":"GetRateURL"},{"a":2,"n":"TutorialMode","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_TutorialMode","t":8,"rt":$n[0].Boolean,"fg":"TutorialMode","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_TutorialMode","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"TutorialMode"},"fn":"TutorialMode"},{"a":2,"n":"currentBoard","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_currentBoard","t":8,"rt":$n[0].Int32,"fg":"currentBoard","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":2,"n":"set_currentBoard","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"currentBoard"},"fn":"currentBoard"},{"a":2,"n":"BOARD_10X10","is":true,"t":4,"rt":$n[0].Int32,"sn":"BOARD_10X10","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"BOARD_8X8","is":true,"t":4,"rt":$n[0].Int32,"sn":"BOARD_8X8","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"BOARD_HEXA","is":true,"t":4,"rt":$n[0].Int32,"sn":"BOARD_HEXA","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"CurrentDataGameMode","t":4,"rt":DataGameMode,"sn":"CurrentDataGameMode","box":function ($v) { return Bridge.box($v, DataGameMode, System.Enum.toStringFn(DataGameMode));}},{"a":2,"n":"MAX_FILL_TIME","is":true,"t":4,"rt":$n[0].Int32,"sn":"MAX_FILL_TIME","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"MAX_STEPS_BOMB_ITEM","is":true,"t":4,"rt":$n[0].Int32,"sn":"MAX_STEPS_BOMB_ITEM","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"MAX_STEP_SHOW_BOMB","is":true,"t":4,"rt":$n[0].Int32,"sn":"MAX_STEP_SHOW_BOMB","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"SCORE_DESTROY_ONE_BLOCK","t":4,"rt":$n[0].Int32,"sn":"SCORE_DESTROY_ONE_BLOCK","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"SCORE_ONE_BLOCK","t":4,"rt":$n[0].Int32,"sn":"SCORE_ONE_BLOCK","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"bestScore","t":4,"rt":$n[0].Int32,"sn":"bestScore","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bestScoreText","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"bestScoreText"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardType","t":4,"rt":BoardType,"sn":"boardType","box":function ($v) { return Bridge.box($v, BoardType, System.Enum.toStringFn(BoardType));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"buttonsInGame","t":4,"rt":$n[5].List$1(UnityEngine.UI.Button),"sn":"buttonsInGame"},{"a":1,"n":"currentDataMode","t":4,"rt":DataMode,"sn":"currentDataMode"},{"a":1,"n":"currentScore","t":4,"rt":$n[0].Int32,"sn":"currentScore","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"currentScoreText","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"currentScoreText"},{"at":[new UnityEngine.HeaderAttribute("Data Board "),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"dataInGame","t":4,"rt":DataInGame,"sn":"dataInGame"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gameMode","t":4,"rt":GameMode,"sn":"gameMode","box":function ($v) { return Bridge.box($v, GameMode, System.Enum.toStringFn(GameMode));}},{"at":[new UnityEngine.HeaderAttribute("Data Setting "),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gameSetting","t":4,"rt":GameSetting,"sn":"gameSetting"},{"at":[new UnityEngine.HeaderAttribute("Rate URL "),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"rateURL","t":4,"rt":$n[0].String,"sn":"rateURL"},{"a":1,"n":"secondChance","t":4,"rt":$n[0].Boolean,"sn":"secondChance","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ReturnHome","t":2,"ad":{"a":2,"n":"add_ReturnHome","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addReturnHome","rt":$n[0].Void,"p":[Function]},"r":{"a":2,"n":"remove_ReturnHome","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeReturnHome","rt":$n[0].Void,"p":[Function]}},{"a":2,"n":"SetupPlayGame","t":2,"ad":{"a":2,"n":"add_SetupPlayGame","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addSetupPlayGame","rt":$n[0].Void,"p":[Function]},"r":{"a":2,"n":"remove_SetupPlayGame","t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeSetupPlayGame","rt":$n[0].Void,"p":[Function]}},{"a":1,"backing":true,"n":"<TutorialMode>k__BackingField","t":4,"rt":$n[0].Boolean,"sn":"TutorialMode","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<currentBoard>k__BackingField","t":4,"rt":$n[0].Int32,"sn":"currentBoard","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*GameManager end.*/

    /*PieceManager start.*/
    $m("PieceManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"CheckBoardFull","t":8,"sn":"CheckBoardFull","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"CheckGameOver","t":8,"sn":"CheckGameOver","rt":$n[0].Void},{"a":2,"n":"CheckPieceCanPlaceBoard","t":8,"sn":"CheckPieceCanPlaceBoard","rt":$n[6].IEnumerator},{"a":2,"n":"CreateNewPieces","t":8,"pi":[{"n":"random","pt":$n[0].Boolean,"ps":0},{"n":"piecesID","pt":$n[0].Array.type(System.Int32),"ps":1}],"sn":"CreateNewPieces","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Array.type(System.Int32)]},{"a":1,"n":"GetNextPiecesID","t":8,"sn":"GetNextPiecesID","rt":$n[0].Array.type(System.Int32)},{"a":2,"n":"GetRandomPieceId","t":8,"sn":"GetRandomPieceId","rt":$n[0].Int32,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"PlacePieceSuccess","t":8,"pi":[{"n":"piece","pt":Piece,"ps":0},{"n":"destroy","dv":false,"o":true,"pt":$n[0].Boolean,"ps":1}],"sn":"PlacePieceSuccess","rt":$n[0].Void,"p":[Piece,$n[0].Boolean]},{"a":1,"n":"RegisterPiece","t":8,"pi":[{"n":"piecePrefab","pt":Piece,"ps":0},{"n":"placePiece","pt":$n[3].Transform,"ps":1},{"n":"clone","pt":$n[0].Boolean,"ps":2}],"sn":"RegisterPiece","rt":Piece,"p":[Piece,$n[3].Transform,$n[0].Boolean]},{"a":1,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":1,"n":"SetupPlayGame","t":8,"sn":"SetupPlayGame","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"Undo","t":8,"pi":[{"n":"pieces","pt":$n[0].Array.type(System.Int32),"ps":0}],"sn":"Undo","rt":$n[0].Void,"p":[$n[0].Array.type(System.Int32)]},{"a":2,"n":"VisiblePiecesInGame","t":8,"pi":[{"n":"visible","pt":$n[0].Boolean,"ps":0}],"sn":"VisiblePiecesInGame","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"GetPiecesInGame","t":16,"rt":System.Array.type(Piece),"g":{"a":2,"n":"get_GetPiecesInGame","t":8,"rt":System.Array.type(Piece),"fg":"GetPiecesInGame"},"fn":"GetPiecesInGame"},{"a":1,"n":"countPieceOnBoard","t":4,"rt":$n[0].Int32,"sn":"countPieceOnBoard","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"pieces","t":4,"rt":$n[5].List$1(Piece),"sn":"pieces"},{"a":1,"n":"piecesContainer","t":4,"rt":$n[5].List$1(Piece),"sn":"piecesContainer"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"piecesInGame","t":4,"rt":System.Array.type(Piece),"sn":"piecesInGame"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"pointsPlaceBlock","t":4,"rt":$n[5].List$1(UnityEngine.Transform),"sn":"pointsPlaceBlock"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"pointsPlaceNextBlock","t":4,"rt":$n[3].Transform,"sn":"pointsPlaceNextBlock"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"predeterminedPieces","t":4,"rt":$n[5].List$1(System.Int32),"sn":"predeterminedPieces"},{"a":1,"n":"scaleDefault","t":4,"rt":$n[0].Single,"sn":"scaleDefault","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"totalPieceOnBoard","t":4,"rt":$n[0].Int32,"sn":"totalPieceOnBoard","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*PieceManager end.*/

    /*GameState start.*/
    $m("GameState", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"NONE","is":true,"t":4,"rt":GameState,"sn":"NONE","box":function ($v) { return Bridge.box($v, GameState, System.Enum.toStringFn(GameState));}},{"a":2,"n":"OTHER_SCREEN","is":true,"t":4,"rt":GameState,"sn":"OTHER_SCREEN","box":function ($v) { return Bridge.box($v, GameState, System.Enum.toStringFn(GameState));}},{"a":2,"n":"PLAY","is":true,"t":4,"rt":GameState,"sn":"PLAY","box":function ($v) { return Bridge.box($v, GameState, System.Enum.toStringFn(GameState));}},{"a":2,"n":"WATING","is":true,"t":4,"rt":GameState,"sn":"WATING","box":function ($v) { return Bridge.box($v, GameState, System.Enum.toStringFn(GameState));}}]}; }, $n);
    /*GameState end.*/

    /*PlayingManager start.*/
    $m("PlayingManager", function () { return {"nested":[PlayingManager.BlockContainer],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"AddGameMode","t":8,"pi":[{"n":"gameMode","pt":IGameMode,"ps":0}],"sn":"AddGameMode","rt":$n[0].Void,"p":[IGameMode]},{"a":1,"n":"Awake","t":8,"sn":"Awake$1","rt":$n[0].Void},{"a":2,"n":"CanUndo","t":8,"sn":"CanUndo","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ClearData","t":8,"sn":"ClearData","rt":$n[0].Void},{"a":2,"n":"DestroyBlock","t":8,"pi":[{"n":"blocksDestroy","pt":$n[5].List$1(BlockBoard),"ps":0},{"n":"secondChance","dv":false,"o":true,"pt":$n[0].Boolean,"ps":1},{"n":"updateAction","dv":true,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"DestroyBlock","rt":$n[0].Void,"p":[$n[5].List$1(BlockBoard),$n[0].Boolean,$n[0].Boolean]},{"a":2,"n":"DestroyBlockSecondChance","t":8,"sn":"DestroyBlockSecondChance","rt":$n[0].Void},{"a":2,"n":"DestroyBlocksFall","t":8,"sn":"DestroyBlocksFall","rt":$n[0].Void},{"a":2,"n":"DestroyOneBlock","t":8,"pi":[{"n":"blockDestroy","pt":BlockBoard,"ps":0}],"sn":"DestroyOneBlock","rt":$n[0].Void,"p":[BlockBoard]},{"a":1,"n":"ResumeGame","t":8,"sn":"ResumeGame","rt":$n[6].IEnumerator},{"a":1,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":2,"n":"SaveNewStepWhenUseBooster","t":8,"sn":"SaveNewStepWhenUseBooster","rt":$n[0].Void},{"a":1,"n":"SelectedAndDragPiece","t":8,"sn":"SelectedAndDragPiece","rt":$n[0].Void},{"a":1,"n":"SetNewPieces","t":8,"sn":"SetNewPieces","rt":$n[0].Void},{"a":1,"n":"SetupPlayGame","t":8,"sn":"SetupPlayGame","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"Undo","t":8,"sn":"Undo","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"CurrentGameMode","t":16,"rt":IGameMode,"g":{"a":2,"n":"get_CurrentGameMode","t":8,"rt":IGameMode,"fg":"CurrentGameMode"},"s":{"a":1,"n":"set_CurrentGameMode","t":8,"p":[IGameMode],"rt":$n[0].Void,"fs":"CurrentGameMode"},"fn":"CurrentGameMode"},{"a":2,"n":"GetCurrentBoard","t":16,"rt":BoardContainer,"g":{"a":2,"n":"get_GetCurrentBoard","t":8,"rt":BoardContainer,"fg":"GetCurrentBoard"},"fn":"GetCurrentBoard"},{"a":2,"n":"IsDrag","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsDrag","t":8,"rt":$n[0].Boolean,"fg":"IsDrag","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsDrag","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"IsDrag"},"fn":"IsDrag"},{"a":2,"n":"IsGameOver","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsGameOver","t":8,"rt":$n[0].Boolean,"fg":"IsGameOver","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"s":{"a":2,"n":"set_IsGameOver","t":8,"p":[$n[0].Boolean],"rt":$n[0].Void,"fs":"IsGameOver"},"fn":"IsGameOver"},{"a":2,"n":"LastPiece","t":16,"rt":$n[3].Transform,"g":{"a":2,"n":"get_LastPiece","t":8,"rt":$n[3].Transform,"fg":"LastPiece"},"s":{"a":2,"n":"set_LastPiece","t":8,"p":[$n[3].Transform],"rt":$n[0].Void,"fs":"LastPiece"},"fn":"LastPiece"},{"a":2,"n":"TotalBlocksDestroy","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_TotalBlocksDestroy","t":8,"rt":$n[0].Int32,"fg":"TotalBlocksDestroy","box":function ($v) { return Bridge.box($v, System.Int32);}},"s":{"a":1,"n":"set_TotalBlocksDestroy","t":8,"p":[$n[0].Int32],"rt":$n[0].Void,"fs":"TotalBlocksDestroy"},"fn":"TotalBlocksDestroy"},{"a":2,"n":"TotalLineDestroy","t":16,"rt":$n[0].Int32,"g":{"a":2,"n":"get_TotalLineDestroy","t":8,"rt":$n[0].Int32,"fg":"TotalLineDestroy","box":function ($v) { return Bridge.box($v, System.Int32);}},"fn":"TotalLineDestroy"},{"a":2,"n":"CanClickPiece","t":4,"rt":$n[0].Boolean,"sn":"CanClickPiece","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"blocksDestroy","t":4,"rt":$n[5].List$1(BlockBoard),"sn":"blocksDestroy"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardClassic10x10","t":4,"rt":BoardContainer,"sn":"boardClassic10x10"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardClassic8x8","t":4,"rt":BoardContainer,"sn":"boardClassic8x8"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardHexa","t":4,"rt":BoardContainer,"sn":"boardHexa"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"currentBoard","t":4,"rt":BoardContainer,"sn":"currentBoard"},{"at":[new UnityEngine.SpaceAttribute.ctor(),new UnityEngine.HeaderAttribute("Show Infor When Game Playing"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"currentGameState","t":4,"rt":GameState,"sn":"currentGameState","box":function ($v) { return Bridge.box($v, GameState, System.Enum.toStringFn(GameState));}},{"a":1,"n":"gameModes","t":4,"rt":$n[5].List$1(IGameMode),"sn":"gameModes"},{"a":2,"n":"gridInGame","t":4,"rt":System.Array.type(BlockBoard, 2),"sn":"gridInGame"},{"a":1,"n":"lengthX","t":4,"rt":$n[0].Int32,"sn":"lengthX","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"lengthY","t":4,"rt":$n[0].Int32,"sn":"lengthY","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"selectedPiece","t":4,"rt":Piece,"sn":"selectedPiece"},{"a":1,"backing":true,"n":"<CurrentGameMode>k__BackingField","t":4,"rt":IGameMode,"sn":"CurrentGameMode"},{"a":1,"backing":true,"n":"<IsDrag>k__BackingField","t":4,"rt":$n[0].Boolean,"sn":"IsDrag","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<IsGameOver>k__BackingField","t":4,"rt":$n[0].Boolean,"sn":"IsGameOver","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<LastPiece>k__BackingField","t":4,"rt":$n[3].Transform,"sn":"LastPiece"},{"a":1,"backing":true,"n":"<TotalBlocksDestroy>k__BackingField","t":4,"rt":$n[0].Int32,"sn":"TotalBlocksDestroy","box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*PlayingManager end.*/

    /*PlayingManager+BlockContainer start.*/
    $m("PlayingManager.BlockContainer", function () { return {"td":PlayingManager,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"blocks","t":4,"rt":$n[5].List$1(BlockObj),"sn":"blocks"}]}; }, $n);
    /*PlayingManager+BlockContainer end.*/

    /*PrefabsManager start.*/
    $m("PrefabsManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"arrowPrefab","t":4,"rt":BoosterMoveDestroy,"sn":"arrowPrefab"},{"a":2,"n":"blockHexaPrefab","t":4,"rt":BlockObj,"sn":"blockHexaPrefab"},{"a":2,"n":"blockPrefab","t":4,"rt":BlockObj,"sn":"blockPrefab"},{"a":2,"n":"bombItemPrefab","t":4,"rt":BombItem,"sn":"bombItemPrefab"},{"a":2,"n":"effDestroyBlockHexaPrefab","t":4,"rt":EffectObj,"sn":"effDestroyBlockHexaPrefab"},{"a":2,"n":"effDestroyBlockPrefab","t":4,"rt":EffectObj,"sn":"effDestroyBlockPrefab"},{"a":2,"n":"effectTime","t":4,"rt":EffectObj,"sn":"effectTime"},{"a":2,"n":"piecesClassicPrefab","t":4,"rt":$n[5].List$1(Piece),"sn":"piecesClassicPrefab"},{"a":2,"n":"piecesHexaPrefab","t":4,"rt":$n[5].List$1(Piece),"sn":"piecesHexaPrefab"},{"a":2,"n":"scoreTextEffect","t":4,"rt":$n[3].Rigidbody2D,"sn":"scoreTextEffect"},{"a":2,"n":"swordPrefab","t":4,"rt":BoosterMoveDestroy,"sn":"swordPrefab"}]}; }, $n);
    /*PrefabsManager end.*/

    /*SoundClipInfor start.*/
    $m("SoundClipInfor", function () { return {"att":1056769,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"audioClip","t":4,"rt":$n[3].AudioClip,"sn":"audioClip"},{"at":[new UnityEngine.RangeAttribute(0.0, 1.0)],"a":2,"n":"clipVolume","t":4,"rt":$n[0].Single,"sn":"clipVolume","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"id","t":4,"rt":$n[0].String,"sn":"id"}]}; }, $n);
    /*SoundClipInfor end.*/

    /*SoundManager start.*/
    $m("SoundManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ButtonClickedSound","t":8,"sn":"ButtonClickedSound","rt":$n[0].Void},{"a":2,"n":"MuteSource","t":8,"pi":[{"n":"sound","pt":$n[0].Boolean,"ps":0}],"sn":"MuteSource","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"SoundPlayOneShot","t":8,"pi":[{"n":"nameSound","pt":$n[0].String,"ps":0}],"sn":"SoundPlayOneShot","rt":$n[0].Void,"p":[$n[0].String]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"musicSource","t":4,"rt":$n[3].AudioSource,"sn":"musicSource"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"soundClipInfors","t":4,"rt":$n[5].List$1(SoundClipInfor),"sn":"soundClipInfors"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"soundSource","t":4,"rt":$n[3].AudioSource,"sn":"soundSource"}]}; }, $n);
    /*SoundManager end.*/

    /*SpriteManager start.*/
    $m("SpriteManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetGemSpriteByColor","t":8,"pi":[{"n":"col","pt":BlockGemColor,"ps":0}],"sn":"GetGemSpriteByColor","rt":$n[3].Sprite,"p":[BlockGemColor]},{"a":2,"n":"GetSpriteByColor","t":8,"pi":[{"n":"col","pt":BlockColor,"ps":0}],"sn":"GetSpriteByColor","rt":$n[3].Sprite,"p":[BlockColor]},{"a":2,"n":"SetupImage","t":8,"sn":"SetupImage","rt":$n[0].Void},{"a":2,"n":"ShowTextEffect","t":8,"pi":[{"n":"textImage","pt":$n[4].Image,"ps":0},{"n":"index","pt":$n[0].Int32,"ps":1},{"n":"position","pt":$n[3].Vector3,"ps":2}],"sn":"ShowTextEffect","rt":$n[0].Void,"p":[$n[4].Image,$n[0].Int32,$n[3].Vector3]},{"a":2,"n":"GetBlockShow2D","t":16,"rt":$n[5].List$1(UnityEngine.Sprite),"g":{"a":2,"n":"get_GetBlockShow2D","t":8,"rt":$n[5].List$1(UnityEngine.Sprite),"fg":"GetBlockShow2D"},"fn":"GetBlockShow2D"},{"a":2,"n":"GetBlocksShow3D","t":16,"rt":$n[5].List$1(UnityEngine.Sprite),"g":{"a":2,"n":"get_GetBlocksShow3D","t":8,"rt":$n[5].List$1(UnityEngine.Sprite),"fg":"GetBlocksShow3D"},"fn":"GetBlocksShow3D"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockColorSprites","t":4,"rt":System.Array.type(UnityEngine.Sprite),"sn":"blockColorSprites"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockGemSprites","t":4,"rt":System.Array.type(UnityEngine.Sprite),"sn":"blockGemSprites"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockShow2D","t":4,"rt":$n[5].List$1(UnityEngine.Sprite),"sn":"blockShow2D"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blockShow3D","t":4,"rt":$n[5].List$1(UnityEngine.Sprite),"sn":"blockShow3D"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksContainer2D","t":4,"rt":$n[5].List$1(UnityEngine.Sprite),"sn":"blocksContainer2D"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"blocksContainer3D","t":4,"rt":$n[5].List$1(UnityEngine.Sprite),"sn":"blocksContainer3D"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"textEffects","t":4,"rt":$n[5].List$1(UnityEngine.Sprite),"sn":"textEffects"}]}; }, $n);
    /*SpriteManager end.*/

    /*BlockColor start.*/
    $m("BlockColor", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Blue","is":true,"t":4,"rt":BlockColor,"sn":"Blue","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Brown","is":true,"t":4,"rt":BlockColor,"sn":"Brown","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Cyan","is":true,"t":4,"rt":BlockColor,"sn":"Cyan","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Empty","is":true,"t":4,"rt":BlockColor,"sn":"Empty","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Green","is":true,"t":4,"rt":BlockColor,"sn":"Green","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Orange","is":true,"t":4,"rt":BlockColor,"sn":"Orange","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Purple","is":true,"t":4,"rt":BlockColor,"sn":"Purple","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Red","is":true,"t":4,"rt":BlockColor,"sn":"Red","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"White","is":true,"t":4,"rt":BlockColor,"sn":"White","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"Yellow","is":true,"t":4,"rt":BlockColor,"sn":"Yellow","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}}]}; }, $n);
    /*BlockColor end.*/

    /*BlockGemColor start.*/
    $m("BlockGemColor", function () { return {"att":257,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Cyan","is":true,"t":4,"rt":BlockGemColor,"sn":"Cyan","box":function ($v) { return Bridge.box($v, BlockGemColor, System.Enum.toStringFn(BlockGemColor));}},{"a":2,"n":"Empty","is":true,"t":4,"rt":BlockGemColor,"sn":"Empty","box":function ($v) { return Bridge.box($v, BlockGemColor, System.Enum.toStringFn(BlockGemColor));}},{"a":2,"n":"Purple","is":true,"t":4,"rt":BlockGemColor,"sn":"Purple","box":function ($v) { return Bridge.box($v, BlockGemColor, System.Enum.toStringFn(BlockGemColor));}},{"a":2,"n":"Red","is":true,"t":4,"rt":BlockGemColor,"sn":"Red","box":function ($v) { return Bridge.box($v, BlockGemColor, System.Enum.toStringFn(BlockGemColor));}}]}; }, $n);
    /*BlockGemColor end.*/

    /*MonoHandler start.*/
    $m("MonoHandler", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"GUIEditor","t":8,"sn":"GUIEditor","rt":$n[0].Void}]}; }, $n);
    /*MonoHandler end.*/

    /*GameOverPopup start.*/
    $m("GameOverPopup", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"OnEventHome","t":8,"sn":"OnEventHome","rt":$n[0].Void},{"a":2,"n":"OnEventRate","t":8,"sn":"OnEventRate","rt":$n[0].Void},{"a":2,"n":"OnEventReplay","t":8,"sn":"OnEventReplay","rt":$n[0].Void},{"ov":true,"a":2,"n":"OnShowing","t":8,"pi":[{"n":"inData","pt":$n[0].Array.type(System.Object),"ps":0}],"sn":"OnShowing","rt":$n[0].Void,"p":[$n[0].Array.type(System.Object)]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bestScoreText","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"bestScoreText"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"scoreText","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"scoreText"}]}; }, $n);
    /*GameOverPopup end.*/

    /*SecondChancePopup start.*/
    $m("SecondChancePopup", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[0].Void},{"a":2,"n":"OnEventNoTks","t":8,"sn":"OnEventNoTks","rt":$n[0].Void},{"a":2,"n":"OnEventYes","t":8,"sn":"OnEventYes","rt":$n[0].Void},{"ov":true,"a":2,"n":"OnShowing","t":8,"pi":[{"n":"inData","pt":$n[0].Array.type(System.Object),"ps":0}],"sn":"OnShowing","rt":$n[0].Void,"p":[$n[0].Array.type(System.Object)]},{"a":1,"n":"StartCountTime","t":8,"sn":"StartCountTime","rt":$n[6].IEnumerator},{"a":1,"n":"duration","t":4,"rt":$n[0].Single,"sn":"duration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"durationText","t":4,"rt":$n[2].TextMeshProUGUI,"sn":"durationText"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"fillSecondChance","t":4,"rt":$n[4].Image,"sn":"fillSecondChance"},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"popupSecondChance","t":4,"rt":$n[3].GameObject,"sn":"popupSecondChance"},{"a":1,"n":"timeSecondChance","t":4,"rt":$n[0].Single,"sn":"timeSecondChance","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*SecondChancePopup end.*/

    /*SettingPopup start.*/
    $m("SettingPopup", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"OnEventMusic","t":8,"sn":"OnEventMusic","rt":$n[0].Void},{"a":2,"n":"OnEventSound","t":8,"sn":"OnEventSound","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"musicIcon","t":4,"rt":$n[4].Image,"sn":"musicIcon"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"off","t":4,"rt":$n[3].Sprite,"sn":"off"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"on","t":4,"rt":$n[3].Sprite,"sn":"on"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"rateURL","t":4,"rt":$n[0].String,"sn":"rateURL"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"soundIcon","t":4,"rt":$n[4].Image,"sn":"soundIcon"}]}; }, $n);
    /*SettingPopup end.*/

    /*GameScreen start.*/
    $m("GameScreen", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":2,"n":"Hide","t":8,"pi":[{"n":"back","pt":$n[0].Boolean,"ps":0},{"n":"immediate","pt":$n[0].Boolean,"ps":1}],"sn":"Hide","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Boolean]}]}; }, $n);
    /*GameScreen end.*/

    /*MenuScreen start.*/
    $m("MenuScreen", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"HideAllBoard","t":8,"sn":"HideAllBoard","rt":$n[0].Void},{"a":2,"n":"OnEventPlay","t":8,"sn":"OnEventPlay","rt":$n[0].Void},{"a":2,"n":"OnEventSelectBoard","t":8,"pi":[{"n":"board","pt":$n[0].Int32,"ps":0}],"sn":"OnEventSelectBoard","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":2,"n":"OnEventSelectMode","t":8,"pi":[{"n":"mode","pt":$n[0].Int32,"ps":0}],"sn":"OnEventSelectMode","rt":$n[0].Void,"p":[$n[0].Int32]},{"a":1,"n":"ReturnHome","t":8,"sn":"ReturnHome","rt":$n[0].Void},{"a":1,"n":"SetGameMode","t":8,"sn":"SetGameMode","rt":$n[0].Void},{"ov":true,"a":2,"n":"Show","t":8,"pi":[{"n":"back","pt":$n[0].Boolean,"ps":0},{"n":"immediate","pt":$n[0].Boolean,"ps":1}],"sn":"Show","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Boolean]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"at":[new UnityEngine.SpaceAttribute.$ctor1(5.0),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardPlaying","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"boardPlaying"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"boardsSelected","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"boardsSelected"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"currentBoard","t":4,"rt":$n[0].Int32,"sn":"currentBoard","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"currentMode","t":4,"rt":$n[0].Int32,"sn":"currentMode","box":function ($v) { return Bridge.box($v, System.Int32);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gameModeSelectObj","t":4,"rt":$n[5].List$1(UnityEngine.GameObject),"sn":"gameModeSelectObj"}]}; }, $n);
    /*MenuScreen end.*/

    /*ConstValue start.*/
    $m("ConstValue", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"ScoresIDGameModeAndroid","is":true,"t":4,"rt":$n[5].List$1(System.String),"sn":"ScoresIDGameModeAndroid"},{"a":2,"n":"ScoresIDGameModeIOS","is":true,"t":4,"rt":$n[5].List$1(System.String),"sn":"ScoresIDGameModeIOS"}]}; }, $n);
    /*ConstValue end.*/

    /*CurveMove start.*/
    $m("CurveMove", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Move","t":8,"pi":[{"n":"target","pt":$n[3].Transform,"ps":0},{"n":"position","pt":$n[3].Vector3,"ps":1},{"n":"action","pt":Function,"ps":2}],"sn":"Move","rt":$n[0].Void,"p":[$n[3].Transform,$n[3].Vector3,Function]},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"GetTarget","t":16,"rt":$n[3].Transform,"g":{"a":2,"n":"get_GetTarget","t":8,"rt":$n[3].Transform,"fg":"GetTarget"},"fn":"GetTarget"},{"a":1,"n":"elapsedTime","t":4,"rt":$n[0].Single,"sn":"elapsedTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"p0","t":4,"rt":$n[3].Vector3,"sn":"p0"},{"a":1,"n":"p1","t":4,"rt":$n[3].Vector3,"sn":"p1"},{"a":1,"n":"p2","t":4,"rt":$n[3].Vector3,"sn":"p2"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"speed","t":4,"rt":$n[0].Single,"sn":"speed","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"target","t":4,"rt":$n[3].Transform,"sn":"target"},{"a":1,"n":"triggerFinish","t":4,"rt":Function,"sn":"triggerFinish"}]}; }, $n);
    /*CurveMove end.*/

    /*DestroyByTime start.*/
    $m("DestroyByTime", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"FixedUpdate","t":8,"sn":"FixedUpdate","rt":$n[0].Void},{"a":2,"n":"SetTime","t":8,"pi":[{"n":"destroyTime","pt":$n[0].Single,"ps":0}],"sn":"SetTime","rt":$n[0].Void,"p":[$n[0].Single]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"destroyTime","t":4,"rt":$n[0].Single,"sn":"destroyTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"elapsedTime","t":4,"rt":$n[0].Single,"sn":"elapsedTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"hideObject","t":4,"rt":$n[0].Boolean,"sn":"hideObject","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*DestroyByTime end.*/

    /*AdjustRectTransformForSafeArea start.*/
    $m("AdjustRectTransformForSafeArea", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetMainGameViewSize","is":true,"t":8,"sn":"GetMainGameViewSize","rt":$n[3].Vector2},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"UpdateUI","t":8,"sn":"UpdateUI","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addHeightScreenNormal","t":4,"rt":$n[0].Single,"sn":"addHeightScreenNormal","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addHeightcreenRatioEqual2","t":4,"rt":$n[0].Single,"sn":"addHeightcreenRatioEqual2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addHeightcreenRatioLarge2","t":4,"rt":$n[0].Single,"sn":"addHeightcreenRatioLarge2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addHeightcreenRatioTablet","t":4,"rt":$n[0].Single,"sn":"addHeightcreenRatioTablet","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addOffSetMaxEqual2","t":4,"rt":$n[3].Vector2,"sn":"addOffSetMaxEqual2"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addOffSetMaxLarge2","t":4,"rt":$n[3].Vector2,"sn":"addOffSetMaxLarge2"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addOffSetMaxTablet","t":4,"rt":$n[3].Vector2,"sn":"addOffSetMaxTablet"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addOffSetMinEqual2","t":4,"rt":$n[3].Vector2,"sn":"addOffSetMinEqual2"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addOffSetMinLarge2","t":4,"rt":$n[3].Vector2,"sn":"addOffSetMinLarge2"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addOffSetMinTablet","t":4,"rt":$n[3].Vector2,"sn":"addOffSetMinTablet"},{"at":[new UnityEngine.HeaderAttribute("Mobile Normal"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addWidthScreenNormal","t":4,"rt":$n[0].Single,"sn":"addWidthScreenNormal","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Ratio == 2 (other mobile)"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addWidthScreenRatioEqual2","t":4,"rt":$n[0].Single,"sn":"addWidthScreenRatioEqual2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Ratio > 2 (iphoneX)"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addWidthScreenRatioLarge2","t":4,"rt":$n[0].Single,"sn":"addWidthScreenRatioLarge2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HeaderAttribute("Ratio <= 1.5(tablet)"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"addWidthScreenRatioTablet","t":4,"rt":$n[0].Single,"sn":"addWidthScreenRatioTablet","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"adjustForBannerAd","t":4,"rt":$n[0].Boolean,"sn":"adjustForBannerAd","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"bannerHeight","t":4,"rt":$n[0].Single,"sn":"bannerHeight","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bannerHeightLarge2","t":4,"rt":$n[0].Single,"sn":"bannerHeightLarge2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bannerHeightMobile","t":4,"rt":$n[0].Single,"sn":"bannerHeightMobile","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"bannerHeightTable","t":4,"rt":$n[0].Single,"sn":"bannerHeightTable","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"cutouts","t":4,"rt":System.Array.type(UnityEngine.Rect),"sn":"cutouts"},{"a":1,"n":"heightSafe","t":4,"rt":$n[0].Single,"sn":"heightSafe","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"heightScreenSafe","t":4,"rt":$n[0].Single,"sn":"heightScreenSafe","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"heightTestSafe","t":4,"rt":$n[0].Single,"sn":"heightTestSafe","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"offSetMax","t":4,"rt":$n[3].Vector2,"sn":"offSetMax"},{"a":1,"n":"offSetMin","t":4,"rt":$n[3].Vector2,"sn":"offSetMin"},{"a":1,"n":"originHeightRatioLarge2","t":4,"rt":$n[0].Single,"sn":"originHeightRatioLarge2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"originOffSetMax","t":4,"rt":$n[3].Vector2,"sn":"originOffSetMax"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"originOffSetMin","t":4,"rt":$n[3].Vector2,"sn":"originOffSetMin"},{"a":1,"n":"originWidthRatioLarge2","t":4,"rt":$n[0].Single,"sn":"originWidthRatioLarge2","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"ratio","t":4,"rt":$n[0].Single,"sn":"ratio","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"ratioTablet","t":4,"rt":$n[0].Single,"sn":"ratioTablet","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"rectT","t":4,"rt":$n[3].RectTransform,"sn":"rectT"},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"resolution","t":4,"rt":$n[0].Int32,"sn":"resolution","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"widthSafe","t":4,"rt":$n[0].Single,"sn":"widthSafe","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.HideInInspector()],"a":2,"n":"widthScreenSafe","t":4,"rt":$n[0].Single,"sn":"widthScreenSafe","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"widthTestSafe","t":4,"rt":$n[0].Single,"sn":"widthTestSafe","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*AdjustRectTransformForSafeArea end.*/

    /*LayoutSupportType start.*/
    $m("LayoutSupportType", function () { return {"att":8449,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GirdLayOutGroup","is":true,"t":4,"rt":LayoutSupportType,"sn":"GirdLayOutGroup","box":function ($v) { return Bridge.box($v, LayoutSupportType, System.Enum.toStringFn(LayoutSupportType));}},{"a":2,"n":"HorizontalOrVerticalLayoutGroup","is":true,"t":4,"rt":LayoutSupportType,"sn":"HorizontalOrVerticalLayoutGroup","box":function ($v) { return Bridge.box($v, LayoutSupportType, System.Enum.toStringFn(LayoutSupportType));}},{"a":2,"n":"LayoutElement","is":true,"t":4,"rt":LayoutSupportType,"sn":"LayoutElement","box":function ($v) { return Bridge.box($v, LayoutSupportType, System.Enum.toStringFn(LayoutSupportType));}}]}; }, $n);
    /*LayoutSupportType end.*/

    /*LayoutSupportDisplay start.*/
    $m("LayoutSupportDisplay", function () { return {"nested":[LayoutSupportDisplay.LayoutValue,LayoutSupportDisplay.HorizontalOrVerticalLayoutValue,LayoutSupportDisplay.GridLayoutGroupValue],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"SetUp","t":8,"sn":"SetUp","rt":$n[0].Void},{"a":1,"n":"SetUpGridLayoutGroup","t":8,"pi":[{"n":"gridLayoutGroup","pt":$n[4].GridLayoutGroup,"ps":0},{"n":"value","pt":LayoutSupportDisplay.GridLayoutGroupValue,"ps":1}],"sn":"SetUpGridLayoutGroup","rt":$n[0].Void,"p":[$n[4].GridLayoutGroup,LayoutSupportDisplay.GridLayoutGroupValue]},{"a":1,"n":"SetUpLayoutElement","t":8,"pi":[{"n":"layoutElement","pt":$n[4].LayoutElement,"ps":0},{"n":"value","pt":LayoutSupportDisplay.LayoutValue,"ps":1}],"sn":"SetUpLayoutElement","rt":$n[0].Void,"p":[$n[4].LayoutElement,LayoutSupportDisplay.LayoutValue]},{"a":1,"n":"SetUpLayoutGroup","t":8,"pi":[{"n":"layoutGroup","pt":$n[4].HorizontalOrVerticalLayoutGroup,"ps":0},{"n":"value","pt":LayoutSupportDisplay.HorizontalOrVerticalLayoutValue,"ps":1}],"sn":"SetUpLayoutGroup","rt":$n[0].Void,"p":[$n[4].HorizontalOrVerticalLayoutGroup,LayoutSupportDisplay.HorizontalOrVerticalLayoutValue]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"WindowChangeStart","t":8,"sn":"WindowChangeStart","rt":$n[0].Void},{"a":2,"n":"WindowChangeUpdate","t":8,"sn":"WindowChangeUpdate","rt":$n[0].Void},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gridLayoutGroupEqual2Ratio","t":4,"rt":LayoutSupportDisplay.GridLayoutGroupValue,"sn":"gridLayoutGroupEqual2Ratio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gridLayoutGroupLarge2Ratio","t":4,"rt":LayoutSupportDisplay.GridLayoutGroupValue,"sn":"gridLayoutGroupLarge2Ratio"},{"at":[new UnityEngine.HeaderAttribute("Grid LayoutGroup"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gridLayoutGroupNormalRatio","t":4,"rt":LayoutSupportDisplay.GridLayoutGroupValue,"sn":"gridLayoutGroupNormalRatio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"gridLayoutGroupTabletRatio","t":4,"rt":LayoutSupportDisplay.GridLayoutGroupValue,"sn":"gridLayoutGroupTabletRatio"},{"a":1,"n":"isUpdate","t":4,"rt":$n[0].Boolean,"sn":"isUpdate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutEqual2Ratio","t":4,"rt":LayoutSupportDisplay.LayoutValue,"sn":"layoutEqual2Ratio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutGroupEqual2Ratio","t":4,"rt":LayoutSupportDisplay.HorizontalOrVerticalLayoutValue,"sn":"layoutGroupEqual2Ratio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutGroupLarge2Ratio","t":4,"rt":LayoutSupportDisplay.HorizontalOrVerticalLayoutValue,"sn":"layoutGroupLarge2Ratio"},{"at":[new UnityEngine.HeaderAttribute("Horizontal Or Vertical LayoutGroup"),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutGroupNormalRatio","t":4,"rt":LayoutSupportDisplay.HorizontalOrVerticalLayoutValue,"sn":"layoutGroupNormalRatio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutGroupTabletRatio","t":4,"rt":LayoutSupportDisplay.HorizontalOrVerticalLayoutValue,"sn":"layoutGroupTabletRatio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutLarge2Ratio","t":4,"rt":LayoutSupportDisplay.LayoutValue,"sn":"layoutLarge2Ratio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutNormalRatio","t":4,"rt":LayoutSupportDisplay.LayoutValue,"sn":"layoutNormalRatio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutSupportType","t":4,"rt":LayoutSupportType,"sn":"layoutSupportType","box":function ($v) { return Bridge.box($v, LayoutSupportType, System.Enum.toStringFn(LayoutSupportType));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"layoutTabletRatio","t":4,"rt":LayoutSupportDisplay.LayoutValue,"sn":"layoutTabletRatio"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"rectTarget","t":4,"rt":$n[3].RectTransform,"sn":"rectTarget"}]}; }, $n);
    /*LayoutSupportDisplay end.*/

    /*LayoutSupportDisplay+LayoutValue start.*/
    $m("LayoutSupportDisplay.LayoutValue", function () { return {"td":LayoutSupportDisplay,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"minHeight","t":4,"rt":$n[0].Single,"sn":"minHeight","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"minWidth","t":4,"rt":$n[0].Single,"sn":"minWidth","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"useDefaultValue","t":4,"rt":$n[0].Boolean,"sn":"useDefaultValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"useRateRect","t":4,"rt":$n[0].Boolean,"sn":"useRateRect","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*LayoutSupportDisplay+LayoutValue end.*/

    /*LayoutSupportDisplay+HorizontalOrVerticalLayoutValue start.*/
    $m("LayoutSupportDisplay.HorizontalOrVerticalLayoutValue", function () { return {"td":LayoutSupportDisplay,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"bottom","t":4,"rt":$n[0].Int32,"sn":"bottom","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"left","t":4,"rt":$n[0].Int32,"sn":"left","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"right","t":4,"rt":$n[0].Int32,"sn":"right","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"spacing","t":4,"rt":$n[0].Single,"sn":"spacing","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"top","t":4,"rt":$n[0].Int32,"sn":"top","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"useDefaultValue","t":4,"rt":$n[0].Boolean,"sn":"useDefaultValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*LayoutSupportDisplay+HorizontalOrVerticalLayoutValue end.*/

    /*LayoutSupportDisplay+GridLayoutGroupValue start.*/
    $m("LayoutSupportDisplay.GridLayoutGroupValue", function () { return {"td":LayoutSupportDisplay,"att":1056770,"a":2,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"bottom","t":4,"rt":$n[0].Int32,"sn":"bottom","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"cellsize","t":4,"rt":$n[3].Vector2,"sn":"cellsize"},{"a":2,"n":"left","t":4,"rt":$n[0].Int32,"sn":"left","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"right","t":4,"rt":$n[0].Int32,"sn":"right","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"spacing","t":4,"rt":$n[3].Vector2,"sn":"spacing"},{"a":2,"n":"top","t":4,"rt":$n[0].Int32,"sn":"top","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"useDefaultValue","t":4,"rt":$n[0].Boolean,"sn":"useDefaultValue","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*LayoutSupportDisplay+GridLayoutGroupValue end.*/

    /*RatioResolution start.*/
    $m("RatioResolution", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetMainGameViewSize","is":true,"t":8,"sn":"GetMainGameViewSize","rt":$n[3].Vector2},{"a":2,"n":"GetResolution","is":true,"t":8,"sn":"GetResolution","rt":$n[0].Single,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*RatioResolution end.*/

    /*JsonArray start.*/
    $m("JsonArray", function () { return {"nested":[JsonArray.Wrapper$1],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"FromJson","is":true,"t":8,"pi":[{"n":"json","pt":$n[0].String,"ps":0}],"tpc":1,"tprm":["T"],"sn":"FromJson","rt":System.Array.type(System.Object),"p":[$n[0].String]},{"a":2,"n":"ToJson","is":true,"t":8,"pi":[{"n":"array","pt":System.Array.type(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"ToJson","rt":$n[0].String,"p":[System.Array.type(System.Object)]}]}; }, $n);
    /*JsonArray end.*/

    /*JsonArray+Wrapper$1 start.*/
    $m("JsonArray.Wrapper$1", function (T) { return {"td":JsonArray,"att":1056771,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"private_ad","t":4,"rt":System.Array.type(T),"sn":"private_ad"}]}; }, $n);
    /*JsonArray+Wrapper$1 end.*/

    /*MyExtensions start.*/
    $m("MyExtensions", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"Shuffle","is":true,"t":8,"pi":[{"n":"list","pt":$n[5].IList$1(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"Shuffle","rt":$n[0].Void,"p":[$n[5].IList$1(System.Object)]}]}; }, $n);
    /*MyExtensions end.*/

    /*SoundButton start.*/
    $m("SoundButton", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"OnPointerDown","t":8,"pi":[{"n":"eventData","pt":$n[9].PointerEventData,"ps":0}],"sn":"OnPointerDown","rt":$n[0].Void,"p":[$n[9].PointerEventData]}]}; }, $n);
    /*SoundButton end.*/

    /*Timer start.*/
    $m("Timer", function () { return {"nested":[Function],"att":1048577,"a":2,"m":[{"a":1,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":".ctor","t":1,"p":[$n[0].Single],"pi":[{"n":"time","pt":$n[0].Single,"ps":0}],"sn":"$ctor1"},{"a":2,"n":"Clear","t":8,"sn":"Clear","rt":$n[0].Void},{"a":1,"n":"DoTask","is":true,"t":8,"pi":[{"n":"task","pt":Function,"ps":0},{"n":"delay","pt":$n[0].Single,"ps":1}],"sn":"DoTask","rt":$n[6].IEnumerator,"p":[Function,$n[0].Single]},{"a":2,"n":"Schedule","is":true,"t":8,"pi":[{"n":"_behaviour","pt":$n[3].MonoBehaviour,"ps":0},{"n":"delay","pt":$n[0].Single,"ps":1},{"n":"task","pt":Function,"ps":2}],"sn":"Schedule","rt":$n[0].Void,"p":[$n[3].MonoBehaviour,$n[0].Single,Function]},{"a":2,"n":"StopSchedule","is":true,"t":8,"pi":[{"n":"_behaviour","pt":$n[3].MonoBehaviour,"ps":0}],"sn":"StopSchedule","rt":$n[0].Void,"p":[$n[3].MonoBehaviour]},{"a":2,"n":"Tick","t":8,"pi":[{"n":"time","pt":$n[0].Single,"ps":0}],"sn":"Tick","rt":$n[0].Boolean,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"alarmTime","t":4,"rt":$n[0].Single,"sn":"alarmTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"behaviour","is":true,"t":4,"rt":$n[3].MonoBehaviour,"sn":"behaviour"},{"a":1,"n":"currentTime","t":4,"rt":$n[0].Single,"sn":"currentTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*Timer end.*/

    /*UIAnimation start.*/
    $m("UIAnimation", function () { return {"nested":[UIAnimation.Type,UIAnimation.LoopType,UIAnimation.Style],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Alpha","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"Alpha","rt":UIAnimation,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single]},{"a":2,"n":"Alpha","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"Alpha$1","rt":UIAnimation,"p":[$n[3].GameObject,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":1,"n":"Check","t":8,"sn":"Check","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Color","is":true,"t":8,"pi":[{"n":"graphic","pt":$n[4].Graphic,"ps":0},{"n":"to","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"Color","rt":UIAnimation,"p":[$n[4].Graphic,$n[3].Color,$n[0].Single]},{"a":2,"n":"Color","is":true,"t":8,"pi":[{"n":"graphic","pt":$n[4].Graphic,"ps":0},{"n":"from","pt":$n[3].Color,"ps":1},{"n":"to","pt":$n[3].Color,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"Color$1","rt":UIAnimation,"p":[$n[4].Graphic,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":1,"n":"CreateAnimation","is":true,"t":8,"pi":[{"n":"type","pt":UIAnimation.Type,"ps":0},{"n":"gameObject","pt":$n[3].GameObject,"ps":1},{"n":"useCurrentFrom","pt":$n[0].Boolean,"ps":2},{"n":"from","pt":$n[0].Single,"ps":3},{"n":"to","pt":$n[0].Single,"ps":4},{"n":"duration","pt":$n[0].Single,"ps":5}],"sn":"CreateAnimation","rt":UIAnimation,"p":[UIAnimation.Type,$n[3].GameObject,$n[0].Boolean,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":1,"n":"CreateColorAnimation","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"useCurrentFrom","pt":$n[0].Boolean,"ps":1},{"n":"from","pt":$n[3].Color,"ps":2},{"n":"to","pt":$n[3].Color,"ps":3},{"n":"duration","pt":$n[0].Single,"ps":4}],"sn":"CreateColorAnimation","rt":UIAnimation,"p":[$n[3].GameObject,$n[0].Boolean,$n[3].Color,$n[3].Color,$n[0].Single]},{"a":1,"n":"CreateUIAnimation","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"type","pt":UIAnimation.Type,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"useCurrentFrom","pt":$n[0].Boolean,"ps":3}],"sn":"CreateUIAnimation","rt":UIAnimation,"p":[$n[3].GameObject,UIAnimation.Type,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DestroyAllAnimations","is":true,"t":8,"pi":[{"n":"targetGameObject","pt":$n[3].GameObject,"ps":0}],"sn":"DestroyAllAnimations","rt":$n[0].Void,"p":[$n[3].GameObject]},{"a":1,"n":"DestroyAnimation","t":8,"sn":"DestroyAnimation","rt":$n[0].Void},{"a":2,"n":"GetAnimation","is":true,"t":8,"pi":[{"n":"targetGameObject","pt":$n[3].GameObject,"ps":0},{"n":"animType","pt":UIAnimation.Type,"ps":1}],"sn":"GetAnimation","rt":UIAnimation,"p":[$n[3].GameObject,UIAnimation.Type]},{"a":2,"n":"GetAnimationsById","is":true,"t":8,"pi":[{"n":"targetGameObject","pt":$n[3].GameObject,"ps":0},{"n":"id","pt":$n[0].String,"ps":1}],"sn":"GetAnimationsById","rt":$n[5].List$1(UIAnimation),"p":[$n[3].GameObject,$n[0].String]},{"a":1,"n":"GetLerpT","t":8,"pi":[{"n":"time","pt":$n[0].Single,"ps":0}],"sn":"GetLerpT","rt":$n[0].Single,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"GetUIAnimation","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"type","pt":UIAnimation.Type,"ps":1}],"sn":"GetUIAnimation","rt":UIAnimation,"p":[$n[3].GameObject,UIAnimation.Type]},{"a":1,"n":"GetValue","t":8,"pi":[{"n":"t","pt":$n[0].Single,"ps":0}],"sn":"GetValue","rt":$n[0].Object,"p":[$n[0].Single]},{"a":2,"n":"Height","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"Height","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"Height","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"Height$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":1,"n":"Init","t":8,"sn":"Init","rt":$n[0].Void},{"a":2,"n":"Play","t":8,"sn":"Play","rt":$n[0].Void},{"a":2,"n":"PlayAllById","is":true,"t":8,"pi":[{"n":"targetGameObject","pt":$n[3].GameObject,"ps":0},{"n":"animationId","pt":$n[0].String,"ps":1}],"sn":"PlayAllById","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].String]},{"a":1,"n":"PlayAnimation","t":8,"sn":"PlayAnimation","rt":$n[0].Void},{"a":1,"n":"PlayAnimationAfterDelay","t":8,"pi":[{"n":"delay","pt":$n[0].Single,"ps":0}],"sn":"PlayAnimationAfterDelay","rt":$n[6].IEnumerator,"p":[$n[0].Single]},{"a":2,"n":"PositionX","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"PositionX","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"PositionX","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"PositionX$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"PositionY","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"PositionY","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"PositionY","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"PositionY$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"RotationZ","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"RotationZ","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"RotationZ","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"RotationZ$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"ScaleX","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"ScaleX","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"ScaleX","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"ScaleX$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"ScaleY","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"ScaleY","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"ScaleY","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"ScaleY$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":1,"n":"SetFromValue","t":8,"sn":"SetFromValue","rt":$n[0].Void},{"a":1,"n":"SetValue","t":8,"pi":[{"n":"val","pt":$n[0].Object,"ps":0}],"sn":"SetValue","rt":$n[0].Void,"p":[$n[0].Object]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":2,"n":"Stop","t":8,"sn":"Stop","rt":$n[0].Void},{"a":2,"n":"StopAllById","is":true,"t":8,"pi":[{"n":"targetGameObject","pt":$n[3].GameObject,"ps":0},{"n":"animationId","pt":$n[0].String,"ps":1}],"sn":"StopAllById","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].String]},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"UpdateAnimation","t":8,"pi":[{"n":"time","pt":$n[0].Single,"ps":0}],"sn":"UpdateAnimation","rt":$n[0].Void,"p":[$n[0].Single]},{"a":2,"n":"Width","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"Width","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"Width","is":true,"t":8,"pi":[{"n":"rectT","pt":$n[3].RectTransform,"ps":0},{"n":"from","pt":$n[0].Single,"ps":1},{"n":"to","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"Width$1","rt":UIAnimation,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Single]},{"a":2,"n":"IsPlaying","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsPlaying","t":8,"rt":$n[0].Boolean,"fg":"IsPlaying","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsPlaying"},{"a":2,"n":"OnAnimationFinished","t":16,"rt":Function,"g":{"a":2,"n":"get_OnAnimationFinished","t":8,"rt":Function,"fg":"OnAnimationFinished"},"s":{"a":2,"n":"set_OnAnimationFinished","t":8,"p":[Function],"rt":$n[0].Void,"fs":"OnAnimationFinished"},"fn":"OnAnimationFinished"},{"a":2,"n":"animationCurve","t":4,"rt":pc.AnimationCurve,"sn":"animationCurve"},{"a":1,"n":"canvasGroup","t":4,"rt":$n[3].CanvasGroup,"sn":"canvasGroup"},{"a":1,"n":"canvasGroupAdded","t":4,"rt":$n[0].Boolean,"sn":"canvasGroupAdded","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"destroyOnFinish","t":4,"rt":$n[0].Boolean,"sn":"destroyOnFinish","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"duration","t":4,"rt":$n[0].Single,"sn":"duration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"elapsedTime","t":4,"rt":$n[0].Single,"sn":"elapsedTime","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"fromColor","t":4,"rt":$n[3].Color,"sn":"fromColor"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"fromValue","t":4,"rt":$n[0].Single,"sn":"fromValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"graphic","t":4,"rt":$n[4].Graphic,"sn":"graphic"},{"a":2,"n":"id","t":4,"rt":$n[0].String,"sn":"id"},{"a":1,"n":"isDestroyed","t":4,"rt":$n[0].Boolean,"sn":"isDestroyed","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"isPlaying","t":4,"rt":$n[0].Boolean,"sn":"isPlaying","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"loopType","t":4,"rt":UIAnimation.LoopType,"sn":"loopType","box":function ($v) { return Bridge.box($v, UIAnimation.LoopType, System.Enum.toStringFn(UIAnimation.LoopType));}},{"a":2,"n":"playOnStart","t":4,"rt":$n[0].Boolean,"sn":"playOnStart","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"rectT","t":4,"rt":$n[3].RectTransform,"sn":"rectT"},{"a":2,"n":"startDelay","t":4,"rt":$n[0].Single,"sn":"startDelay","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"startOnFirstFrame","t":4,"rt":$n[0].Boolean,"sn":"startOnFirstFrame","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"style","t":4,"rt":UIAnimation.Style,"sn":"style","box":function ($v) { return Bridge.box($v, UIAnimation.Style, System.Enum.toStringFn(UIAnimation.Style));}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"toColor","t":4,"rt":$n[3].Color,"sn":"toColor"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"toValue","t":4,"rt":$n[0].Single,"sn":"toValue","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"type","t":4,"rt":UIAnimation.Type,"sn":"type","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"useCurrentFrom","t":4,"rt":$n[0].Boolean,"sn":"useCurrentFrom","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"backing":true,"n":"<OnAnimationFinished>k__BackingField","t":4,"rt":Function,"sn":"OnAnimationFinished"}]}; }, $n);
    /*UIAnimation end.*/

    /*UIAnimation+Type start.*/
    $m("UIAnimation.Type", function () { return {"td":UIAnimation,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Alpha","is":true,"t":4,"rt":UIAnimation.Type,"sn":"Alpha","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"Color","is":true,"t":4,"rt":UIAnimation.Type,"sn":"Color","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"Height","is":true,"t":4,"rt":UIAnimation.Type,"sn":"Height","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"PositionX","is":true,"t":4,"rt":UIAnimation.Type,"sn":"PositionX","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"PositionY","is":true,"t":4,"rt":UIAnimation.Type,"sn":"PositionY","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"RotationZ","is":true,"t":4,"rt":UIAnimation.Type,"sn":"RotationZ","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"ScaleX","is":true,"t":4,"rt":UIAnimation.Type,"sn":"ScaleX","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"ScaleY","is":true,"t":4,"rt":UIAnimation.Type,"sn":"ScaleY","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}},{"a":2,"n":"Width","is":true,"t":4,"rt":UIAnimation.Type,"sn":"Width","box":function ($v) { return Bridge.box($v, UIAnimation.Type, System.Enum.toStringFn(UIAnimation.Type));}}]}; }, $n);
    /*UIAnimation+Type end.*/

    /*UIAnimation+LoopType start.*/
    $m("UIAnimation.LoopType", function () { return {"td":UIAnimation,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"None","is":true,"t":4,"rt":UIAnimation.LoopType,"sn":"None","box":function ($v) { return Bridge.box($v, UIAnimation.LoopType, System.Enum.toStringFn(UIAnimation.LoopType));}},{"a":2,"n":"Repeat","is":true,"t":4,"rt":UIAnimation.LoopType,"sn":"Repeat","box":function ($v) { return Bridge.box($v, UIAnimation.LoopType, System.Enum.toStringFn(UIAnimation.LoopType));}},{"a":2,"n":"Reverse","is":true,"t":4,"rt":UIAnimation.LoopType,"sn":"Reverse","box":function ($v) { return Bridge.box($v, UIAnimation.LoopType, System.Enum.toStringFn(UIAnimation.LoopType));}}]}; }, $n);
    /*UIAnimation+LoopType end.*/

    /*UIAnimation+Style start.*/
    $m("UIAnimation.Style", function () { return {"td":UIAnimation,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Custom","is":true,"t":4,"rt":UIAnimation.Style,"sn":"Custom","box":function ($v) { return Bridge.box($v, UIAnimation.Style, System.Enum.toStringFn(UIAnimation.Style));}},{"a":2,"n":"EaseIn","is":true,"t":4,"rt":UIAnimation.Style,"sn":"EaseIn","box":function ($v) { return Bridge.box($v, UIAnimation.Style, System.Enum.toStringFn(UIAnimation.Style));}},{"a":2,"n":"EaseOut","is":true,"t":4,"rt":UIAnimation.Style,"sn":"EaseOut","box":function ($v) { return Bridge.box($v, UIAnimation.Style, System.Enum.toStringFn(UIAnimation.Style));}},{"a":2,"n":"Linear","is":true,"t":4,"rt":UIAnimation.Style,"sn":"Linear","box":function ($v) { return Bridge.box($v, UIAnimation.Style, System.Enum.toStringFn(UIAnimation.Style));}}]}; }, $n);
    /*UIAnimation+Style end.*/

    /*Utilities start.*/
    $m("Utilities", function () { return {"nested":[Function,Function],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"CalculateMD5Hash","is":true,"t":8,"pi":[{"n":"input","pt":$n[0].String,"ps":0}],"sn":"CalculateMD5Hash","rt":$n[0].String,"p":[$n[0].String]},{"a":2,"n":"CallExternalAndroid","is":true,"t":8,"pi":[{"n":"methodname","pt":$n[0].String,"ps":0},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"CallExternalAndroid$1","rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"CallExternalAndroid","is":true,"t":8,"pi":[{"n":"methodname","pt":$n[0].String,"ps":0},{"n":"args","ip":true,"pt":$n[0].Array.type(System.Object),"ps":1}],"tpc":1,"tprm":["T"],"sn":"CallExternalAndroid","rt":System.Object,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"CharToLower","is":true,"t":8,"pi":[{"n":"c","pt":$n[0].Char,"ps":0}],"sn":"CharToLower","rt":$n[0].Char,"p":[$n[0].Char],"box":function ($v) { return Bridge.box($v, System.Char, String.fromCharCode, System.Char.getHashCode);}},{"a":2,"n":"CompareLists","is":true,"t":8,"pi":[{"n":"list1","pt":$n[5].List$1(System.Object),"ps":0},{"n":"list2","pt":$n[5].List$1(System.Object),"ps":1}],"tpc":1,"tprm":["T"],"sn":"CompareLists","rt":$n[0].Boolean,"p":[$n[5].List$1(System.Object),$n[5].List$1(System.Object)],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ConvertToJsonString","is":true,"t":8,"pi":[{"n":"data","pt":$n[0].Object,"ps":0},{"n":"addQuoteEscapes","dv":false,"o":true,"pt":$n[0].Boolean,"ps":1}],"sn":"ConvertToJsonString","rt":$n[0].String,"p":[$n[0].Object,$n[0].Boolean]},{"a":2,"n":"CreateTexture","is":true,"t":8,"pi":[{"n":"width","pt":$n[0].Int32,"ps":0},{"n":"height","pt":$n[0].Int32,"ps":1},{"n":"color","pt":$n[3].Color,"ps":2}],"sn":"CreateTexture","rt":$n[3].Texture2D,"p":[$n[0].Int32,$n[0].Int32,$n[3].Color]},{"a":2,"n":"DestroyAllChildren","is":true,"t":8,"pi":[{"n":"parent","pt":$n[3].Transform,"ps":0}],"sn":"DestroyAllChildren","rt":$n[0].Void,"p":[$n[3].Transform]},{"a":2,"n":"EaseIn","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].Single,"ps":0}],"sn":"EaseIn","rt":$n[0].Single,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"EaseOut","is":true,"t":8,"pi":[{"n":"t","pt":$n[0].Single,"ps":0}],"sn":"EaseOut","rt":$n[0].Single,"p":[$n[0].Single],"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"Filter","is":true,"t":8,"pi":[{"n":"list","pt":$n[5].List$1(System.Object),"ps":0},{"n":"func","pt":Function,"ps":1}],"tpc":1,"tprm":["T"],"sn":"Filter","rt":$n[0].Void,"p":[$n[5].List$1(System.Object),Function]},{"a":2,"n":"FindFile","is":true,"t":8,"pi":[{"n":"fileName","pt":$n[0].String,"ps":0},{"n":"directory","pt":$n[0].String,"ps":1}],"sn":"FindFile","rt":$n[0].String,"p":[$n[0].String,$n[0].String]},{"a":2,"n":"GCD","is":true,"t":8,"pi":[{"n":"a","pt":$n[0].Int32,"ps":0},{"n":"b","pt":$n[0].Int32,"ps":1}],"sn":"GCD","rt":$n[0].Int32,"p":[$n[0].Int32,$n[0].Int32],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"GetCanvas","is":true,"t":8,"pi":[{"n":"transform","pt":$n[3].Transform,"ps":0}],"sn":"GetCanvas","rt":$n[3].Canvas,"p":[$n[3].Transform]},{"a":2,"n":"GetCanvasCamera","is":true,"t":8,"pi":[{"n":"canvasChild","pt":$n[3].Transform,"ps":0}],"sn":"GetCanvasCamera","rt":$n[3].Camera,"p":[$n[3].Transform]},{"a":2,"n":"GetFilesRecursively","is":true,"t":8,"pi":[{"n":"path","pt":$n[0].String,"ps":0},{"n":"searchPatter","pt":$n[0].String,"ps":1}],"sn":"GetFilesRecursively","rt":$n[5].List$1(System.String),"p":[$n[0].String,$n[0].String]},{"a":2,"n":"Map","is":true,"t":8,"pi":[{"n":"list","pt":$n[5].List$1(System.Object),"ps":0},{"n":"func","pt":Function,"ps":1}],"tpc":2,"tprm":["TIn","TOut"],"sn":"Map","rt":$n[5].List$1(System.Object),"p":[$n[5].List$1(System.Object),Function]},{"a":2,"n":"MouseDown","is":true,"t":8,"sn":"MouseDown","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MouseNone","is":true,"t":8,"sn":"MouseNone","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"MousePosition","is":true,"t":8,"sn":"MousePosition","rt":$n[3].Vector2},{"a":2,"n":"MouseUp","is":true,"t":8,"sn":"MouseUp","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"ParseCSVFile","is":true,"t":8,"pi":[{"n":"fileContents","pt":$n[0].String,"ps":0},{"n":"delimiter","pt":$n[0].Char,"ps":1}],"sn":"ParseCSVFile","rt":$n[5].List$1(System.Array.type(System.String)),"p":[$n[0].String,$n[0].Char]},{"a":2,"n":"PrintList","is":true,"t":8,"pi":[{"n":"list","pt":$n[5].List$1(System.Object),"ps":0}],"tpc":1,"tprm":["T"],"sn":"PrintList","rt":$n[0].Void,"p":[$n[5].List$1(System.Object)]},{"a":2,"n":"Rotate","is":true,"t":8,"pi":[{"n":"v","pt":$n[3].Vector2,"ps":0},{"n":"degrees","pt":$n[0].Single,"ps":1}],"sn":"Rotate","rt":$n[3].Vector2,"p":[$n[3].Vector2,$n[0].Single]},{"a":2,"n":"SetAlpha","is":true,"t":8,"pi":[{"n":"graphic","pt":$n[4].Graphic,"ps":0},{"n":"alpha","pt":$n[0].Single,"ps":1}],"sn":"SetAlpha","rt":$n[0].Void,"p":[$n[4].Graphic,$n[0].Single]},{"a":2,"n":"SetLayer","is":true,"t":8,"pi":[{"n":"gameObject","pt":$n[3].GameObject,"ps":0},{"n":"layer","pt":$n[0].Int32,"ps":1},{"n":"applyToChildren","dv":false,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"SetLayer","rt":$n[0].Void,"p":[$n[3].GameObject,$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"SwapValue","is":true,"t":8,"pi":[{"n":"value1","ref":true,"pt":System.Object,"ps":0},{"n":"value2","ref":true,"pt":System.Object,"ps":1}],"tpc":1,"tprm":["T"],"sn":"SwapValue","rt":$n[0].Void,"p":[System.Object,System.Object]},{"a":2,"n":"SwitchToRectTransform","is":true,"t":8,"pi":[{"n":"from","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].RectTransform,"ps":1}],"sn":"SwitchToRectTransform","rt":$n[3].Vector2,"p":[$n[3].RectTransform,$n[3].RectTransform]},{"a":2,"n":"SystemTimeInMilliseconds","is":true,"t":16,"rt":$n[0].Double,"g":{"a":2,"n":"get_SystemTimeInMilliseconds","t":8,"rt":$n[0].Double,"fg":"SystemTimeInMilliseconds","is":true,"box":function ($v) { return Bridge.box($v, System.Double, System.Double.format, System.Double.getHashCode);}},"fn":"SystemTimeInMilliseconds"},{"a":2,"n":"WorldHeight","is":true,"t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_WorldHeight","t":8,"rt":$n[0].Single,"fg":"WorldHeight","is":true,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"fn":"WorldHeight"},{"a":2,"n":"WorldWidth","is":true,"t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_WorldWidth","t":8,"rt":$n[0].Single,"fg":"WorldWidth","is":true,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"fn":"WorldWidth"},{"a":2,"n":"XScale","is":true,"t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_XScale","t":8,"rt":$n[0].Single,"fg":"XScale","is":true,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"fn":"XScale"},{"a":2,"n":"YScale","is":true,"t":16,"rt":$n[0].Single,"g":{"a":2,"n":"get_YScale","t":8,"rt":$n[0].Single,"fg":"YScale","is":true,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},"fn":"YScale"}]}; }, $n);
    /*Utilities end.*/

    /*BlockColorApplier start.*/
    $m("BlockColorApplier", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"currentColor","t":4,"rt":BlockColor,"sn":"currentColor","box":function ($v) { return Bridge.box($v, BlockColor, System.Enum.toStringFn(BlockColor));}},{"a":2,"n":"currentGemColor","t":4,"rt":BlockGemColor,"sn":"currentGemColor","box":function ($v) { return Bridge.box($v, BlockGemColor, System.Enum.toStringFn(BlockGemColor));}},{"a":1,"n":"deleteMode","t":4,"rt":$n[0].Boolean,"sn":"deleteMode","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"previewBlocks","t":4,"rt":System.Array.type(BlockBoard),"sn":"previewBlocks"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"previewGemBlocks","t":4,"rt":System.Array.type(BlockBoard),"sn":"previewGemBlocks"},{"a":2,"n":"rayDirection","t":4,"rt":$n[3].Vector2,"sn":"rayDirection"},{"a":2,"n":"rayLength","t":4,"rt":$n[0].Single,"sn":"rayLength","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"targetTag","t":4,"rt":$n[0].String,"sn":"targetTag"}]}; }, $n);
    /*BlockColorApplier end.*/

    /*DOTweenExtensions start.*/
    $m("DOTweenExtensions", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"AsyncWait","is":true,"t":8,"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0}],"sn":"AsyncWait","rt":$n[1].Task,"p":[$n[10].Tween]}]}; }, $n);
    /*DOTweenExtensions end.*/

    /*CameraSizeByResolution start.*/
    $m("CameraSizeByResolution", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"GetCurrentSize","t":8,"sn":"GetCurrentSize","rt":$n[0].Single,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"UpdateCameraSize","t":8,"pi":[{"n":"isPortrait","pt":$n[0].Boolean,"ps":0}],"sn":"UpdateCameraSize","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"UpdateTargetSizes","t":8,"pi":[{"n":"portraitTarget","pt":$n[0].Single,"ps":0},{"n":"landscapeTarget","pt":$n[0].Single,"ps":1}],"sn":"UpdateTargetSizes","rt":$n[0].Void,"p":[$n[0].Single,$n[0].Single]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"DebugUpdateCam","t":4,"rt":$n[0].Boolean,"sn":"DebugUpdateCam","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"cam","t":4,"rt":$n[3].Camera,"sn":"cam"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"landscapeTargetSize","t":4,"rt":$n[0].Single,"sn":"landscapeTargetSize","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"portraitTargetSize","t":4,"rt":$n[0].Single,"sn":"portraitTargetSize","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"referencePortraitResolution","t":4,"rt":$n[3].Vector2,"sn":"referencePortraitResolution"}]}; }, $n);
    /*CameraSizeByResolution end.*/

    /*OrientationManager start.*/
    $m("OrientationManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[0].Void},{"a":1,"n":"CheckIfPortrait","t":8,"sn":"CheckIfPortrait","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"HandleScreenOrientationChange","t":8,"sn":"HandleScreenOrientationChange","rt":$n[0].Void},{"a":1,"n":"InitializeOrientation","t":8,"sn":"InitializeOrientation","rt":$n[6].IEnumerator},{"a":1,"n":"OnDestroy","t":8,"sn":"OnDestroy","rt":$n[0].Void},{"a":1,"n":"OrientationUpdate","t":8,"sn":"OrientationUpdate","rt":$n[6].IEnumerator},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"UpdateOrientation","t":8,"pi":[{"n":"portrait","pt":$n[0].Boolean,"ps":0}],"sn":"UpdateOrientation","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"IsCurrentlyPortrait","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_IsCurrentlyPortrait","t":8,"rt":$n[0].Boolean,"fg":"IsCurrentlyPortrait","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"IsCurrentlyPortrait"},{"a":2,"n":"Instance","is":true,"t":4,"rt":OrientationManager,"sn":"Instance"},{"a":1,"n":"isCurrentlyPortrait","t":4,"rt":$n[0].Boolean,"sn":"isCurrentlyPortrait","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"lastScreenRatio","t":4,"rt":$n[0].Single,"sn":"lastScreenRatio","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"OrientationChangeEvent","is":true,"t":2,"ad":{"a":2,"n":"add_OrientationChangeEvent","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addOrientationChangeEvent","rt":$n[0].Void,"p":[Function]},"r":{"a":2,"n":"remove_OrientationChangeEvent","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeOrientationChangeEvent","rt":$n[0].Void,"p":[Function]}},{"a":2,"n":"OrientationUpdateEvent","is":true,"t":2,"ad":{"a":2,"n":"add_OrientationUpdateEvent","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"addOrientationUpdateEvent","rt":$n[0].Void,"p":[Function]},"r":{"a":2,"n":"remove_OrientationUpdateEvent","is":true,"t":8,"pi":[{"n":"value","pt":Function,"ps":0}],"sn":"removeOrientationUpdateEvent","rt":$n[0].Void,"p":[Function]}}]}; }, $n);
    /*OrientationManager end.*/

    /*RectTransformByOrientation start.*/
    $m("RectTransformByOrientation", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"InitializeRect","t":8,"sn":"InitializeRect","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"UpdateRect","t":8,"pi":[{"n":"isPortrait","pt":$n[0].Boolean,"ps":0}],"sn":"UpdateRect","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":1,"n":"UpdateRectPos","t":8,"pi":[{"n":"leftTopRightBottom","pt":$n[3].Vector4,"ps":0}],"sn":"UpdateRectPos","rt":$n[0].Void,"p":[$n[3].Vector4]},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"landscapeScale","t":4,"rt":$n[3].Vector3,"sn":"landscapeScale"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"portraitScale","t":4,"rt":$n[3].Vector3,"sn":"portraitScale"},{"a":1,"n":"trans","t":4,"rt":$n[3].RectTransform,"sn":"trans"}]}; }, $n);
    /*RectTransformByOrientation end.*/

    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty start.*/
    $m("IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*IAmAnEmptyScriptJustToMakeCodelessProjectsCompileProperty end.*/

    /*ScreenFrameWork.Screen start.*/
    $m("ScreenFrameWork.Screen", function () { return {"nested":[$n[11].Screen.OnTransitionEvent,$n[11].Screen.TransitionInfo],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":2,"n":"Hide","t":8,"pi":[{"n":"back","pt":$n[0].Boolean,"ps":0},{"n":"immediate","pt":$n[0].Boolean,"ps":1}],"sn":"Hide","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Boolean]},{"v":true,"a":2,"n":"Initialize","t":8,"sn":"Initialize","rt":$n[0].Void},{"a":1,"n":"SetVisibility","t":8,"pi":[{"n":"isVisible","pt":$n[0].Boolean,"ps":0}],"sn":"SetVisibility","rt":$n[0].Void,"p":[$n[0].Boolean]},{"v":true,"a":2,"n":"Show","t":8,"pi":[{"n":"back","pt":$n[0].Boolean,"ps":0},{"n":"immediate","pt":$n[0].Boolean,"ps":1}],"sn":"Show","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Boolean]},{"a":1,"n":"StartFadeAnimation","t":8,"pi":[{"n":"transitionInfo","pt":$n[11].Screen.TransitionInfo,"ps":0},{"n":"show","pt":$n[0].Boolean,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"StartFadeAnimation","rt":$n[0].Void,"p":[$n[11].Screen.TransitionInfo,$n[0].Boolean,$n[0].Single]},{"a":1,"n":"StartSwipeAnimation","t":8,"pi":[{"n":"transitionInfo","pt":$n[11].Screen.TransitionInfo,"ps":0},{"n":"show","pt":$n[0].Boolean,"ps":1},{"n":"back","pt":$n[0].Boolean,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"StartSwipeAnimation","rt":$n[0].Void,"p":[$n[11].Screen.TransitionInfo,$n[0].Boolean,$n[0].Boolean,$n[0].Single]},{"a":1,"n":"Transition","t":8,"pi":[{"n":"transitionInfo","pt":$n[11].Screen.TransitionInfo,"ps":0},{"n":"back","pt":$n[0].Boolean,"ps":1},{"n":"immediate","pt":$n[0].Boolean,"ps":2},{"n":"show","pt":$n[0].Boolean,"ps":3}],"sn":"Transition","rt":$n[0].Void,"p":[$n[11].Screen.TransitionInfo,$n[0].Boolean,$n[0].Boolean,$n[0].Boolean]},{"a":2,"n":"Id","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_Id","t":8,"rt":$n[0].String,"fg":"Id"},"fn":"Id"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"hideTransition","t":4,"rt":$n[11].Screen.TransitionInfo,"sn":"hideTransition"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"id","t":4,"rt":$n[0].String,"sn":"id"},{"at":[new UnityEngine.SpaceAttribute.ctor(),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"showTransition","t":4,"rt":$n[11].Screen.TransitionInfo,"sn":"showTransition"}]}; }, $n);
    /*ScreenFrameWork.Screen end.*/

    /*ScreenFrameWork.Screen+OnTransitionEvent start.*/
    $m("ScreenFrameWork.Screen.OnTransitionEvent", function () { return {"td":$n[11].Screen,"att":1056771,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*ScreenFrameWork.Screen+OnTransitionEvent end.*/

    /*ScreenFrameWork.Screen+TransitionInfo start.*/
    $m("ScreenFrameWork.Screen.TransitionInfo", function () { return {"td":$n[11].Screen,"nested":[$n[11].Screen.TransitionInfo.Type],"att":1056771,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"animate","t":4,"rt":$n[0].Boolean,"sn":"animate","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"animationCurve","t":4,"rt":pc.AnimationCurve,"sn":"animationCurve"},{"a":2,"n":"animationDuration","t":4,"rt":$n[0].Single,"sn":"animationDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"animationStyle","t":4,"rt":UIAnimation.Style,"sn":"animationStyle","box":function ($v) { return Bridge.box($v, UIAnimation.Style, System.Enum.toStringFn(UIAnimation.Style));}},{"a":2,"n":"animationType","t":4,"rt":$n[11].Screen.TransitionInfo.Type,"sn":"animationType","box":function ($v) { return Bridge.box($v, ScreenFrameWork.Screen.TransitionInfo.Type, System.Enum.toStringFn(ScreenFrameWork.Screen.TransitionInfo.Type));}},{"a":2,"n":"onTransition","t":4,"rt":$n[11].Screen.OnTransitionEvent,"sn":"onTransition"}]}; }, $n);
    /*ScreenFrameWork.Screen+TransitionInfo end.*/

    /*ScreenFrameWork.Screen+TransitionInfo+Type start.*/
    $m("ScreenFrameWork.Screen.TransitionInfo.Type", function () { return {"td":$n[11].Screen.TransitionInfo,"att":258,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Fade","is":true,"t":4,"rt":$n[11].Screen.TransitionInfo.Type,"sn":"Fade","box":function ($v) { return Bridge.box($v, ScreenFrameWork.Screen.TransitionInfo.Type, System.Enum.toStringFn(ScreenFrameWork.Screen.TransitionInfo.Type));}},{"a":2,"n":"Swipe","is":true,"t":4,"rt":$n[11].Screen.TransitionInfo.Type,"sn":"Swipe","box":function ($v) { return Bridge.box($v, ScreenFrameWork.Screen.TransitionInfo.Type, System.Enum.toStringFn(ScreenFrameWork.Screen.TransitionInfo.Type));}}]}; }, $n);
    /*ScreenFrameWork.Screen+TransitionInfo+Type end.*/

    /*ScreenFrameWork.ScreenBackButton start.*/
    $m("ScreenFrameWork.ScreenBackButton", function () { return {"att":1048577,"a":2,"at":[new UnityEngine.RequireComponent.ctor(UnityEngine.UI.Button)],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnButtonClicked","t":8,"sn":"OnButtonClicked","rt":$n[0].Void},{"a":1,"n":"OnSwitchingScreens","t":8,"pi":[{"n":"fromScreenId","pt":$n[0].String,"ps":0},{"n":"toScreenId","pt":$n[0].String,"ps":1}],"sn":"OnSwitchingScreens","rt":$n[0].Void,"p":[$n[0].String,$n[0].String]},{"a":1,"n":"PlayAnimation","t":8,"pi":[{"n":"anim","pt":UIAnimation,"ps":0}],"sn":"PlayAnimation","rt":$n[0].Void,"p":[UIAnimation]},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Button","t":16,"rt":$n[4].Button,"g":{"a":1,"n":"get_Button","t":8,"rt":$n[4].Button,"fg":"Button"},"fn":"Button"},{"a":1,"n":"CanvasGroup","t":16,"rt":$n[3].CanvasGroup,"g":{"a":1,"n":"get_CanvasGroup","t":8,"rt":$n[3].CanvasGroup,"fg":"CanvasGroup"},"fn":"CanvasGroup"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"alphaStart","t":4,"rt":$n[0].Single,"sn":"alphaStart","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"fadeDuration","t":4,"rt":$n[0].Single,"sn":"fadeDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"scene","t":4,"rt":$n[0].String,"sn":"scene"}]}; }, $n);
    /*ScreenFrameWork.ScreenBackButton end.*/

    /*ScreenFrameWork.ScreenManager start.*/
    $m("ScreenFrameWork.ScreenManager", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"ov":true,"a":3,"n":"Awake","t":8,"sn":"Awake","rt":$n[0].Void},{"a":2,"n":"Back","t":8,"pi":[{"n":"scene","pt":$n[0].String,"ps":0}],"sn":"Back","rt":$n[0].Void,"p":[$n[0].String]},{"a":1,"n":"ClearBackStack","t":8,"sn":"ClearBackStack","rt":$n[0].Void},{"a":1,"n":"GetScreenById","t":8,"pi":[{"n":"id","pt":$n[0].String,"ps":0}],"sn":"GetScreenById","rt":$n[11].Screen,"p":[$n[0].String]},{"a":2,"n":"Home","t":8,"sn":"Home","rt":$n[0].Void},{"a":2,"n":"Show","t":8,"pi":[{"n":"screenId","pt":$n[0].String,"ps":0}],"sn":"Show","rt":$n[0].Void,"p":[$n[0].String]},{"a":1,"n":"Show","t":8,"pi":[{"n":"screenId","pt":$n[0].String,"ps":0},{"n":"back","pt":$n[0].Boolean,"ps":1},{"n":"immediate","pt":$n[0].Boolean,"ps":2}],"sn":"Show$1","rt":$n[0].Void,"p":[$n[0].String,$n[0].Boolean,$n[0].Boolean]},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":2,"n":"CurrentScreenId","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_CurrentScreenId","t":8,"rt":$n[0].String,"fg":"CurrentScreenId"},"fn":"CurrentScreenId"},{"a":2,"n":"HomeScreenId","t":16,"rt":$n[0].String,"g":{"a":2,"n":"get_HomeScreenId","t":8,"rt":$n[0].String,"fg":"HomeScreenId"},"fn":"HomeScreenId"},{"a":2,"n":"MainScreen","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_MainScreen","t":8,"rt":$n[0].Boolean,"fg":"MainScreen","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"MainScreen"},{"a":2,"n":"OnShowingScreen","t":4,"rt":Function,"sn":"OnShowingScreen"},{"a":2,"n":"OnSwitchingScreens","t":4,"rt":Function,"sn":"OnSwitchingScreens"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"backStack","t":4,"rt":$n[5].List$1(System.String),"sn":"backStack"},{"a":1,"n":"currentScreen","t":4,"rt":$n[11].Screen,"sn":"currentScreen"},{"at":[new UnityEngine.TooltipAttribute("The home screen to of the app, ei. the first screen that shows when the app starts."),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"homeScreenId","t":4,"rt":$n[0].String,"sn":"homeScreenId"},{"a":1,"n":"isAnimating","t":4,"rt":$n[0].Boolean,"sn":"isAnimating","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"at":[new UnityEngine.TooltipAttribute("The list of Screen components that are used in the game."),new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"screens","t":4,"rt":$n[5].List$1(ScreenFrameWork.Screen),"sn":"screens"}]}; }, $n);
    /*ScreenFrameWork.ScreenManager end.*/

    /*ScreenFrameWork.SingletonComponent$1 start.*/
    $m("ScreenFrameWork.SingletonComponent$1", function (T) { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"v":true,"a":3,"n":"Awake","t":8,"sn":"Awake","rt":$n[0].Void},{"a":2,"n":"Exists","is":true,"t":8,"sn":"Exists","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"SetInstance","t":8,"sn":"SetInstance","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"Instance","is":true,"t":16,"rt":T,"g":{"a":2,"n":"get_Instance","t":8,"rt":T,"fg":"Instance","is":true},"fn":"Instance"},{"a":1,"n":"instance","is":true,"t":4,"rt":T,"sn":"instance"},{"a":1,"n":"isInitialized","t":4,"rt":$n[0].Boolean,"sn":"isInitialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*ScreenFrameWork.SingletonComponent$1 end.*/

    /*ScreenFrameWork.UIMonoBehaviour start.*/
    $m("ScreenFrameWork.UIMonoBehaviour", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Pulse","t":8,"pi":[{"n":"origScale","pt":$n[3].Vector2,"ps":0},{"n":"pulseAmount","pt":$n[0].Int32,"ps":1},{"n":"pulseForce","pt":$n[0].Single,"ps":2},{"n":"pulseAnimDuration","pt":$n[0].Single,"ps":3}],"sn":"Pulse","rt":$n[0].Void,"p":[$n[3].Vector2,$n[0].Int32,$n[0].Single,$n[0].Single]},{"a":2,"n":"Shake","t":8,"pi":[{"n":"origX","pt":$n[0].Single,"ps":0},{"n":"shakeAmount","pt":$n[0].Int32,"ps":1},{"n":"shakeForce","pt":$n[0].Single,"ps":2},{"n":"shakeAnimDuration","pt":$n[0].Single,"ps":3}],"sn":"Shake","rt":$n[0].Void,"p":[$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Single]},{"a":1,"n":"ShakeLeft","t":8,"pi":[{"n":"origX","pt":$n[0].Single,"ps":0},{"n":"animDuration","pt":$n[0].Single,"ps":1},{"n":"shakeForce","pt":$n[0].Single,"ps":2}],"sn":"ShakeLeft","rt":$n[0].Void,"p":[$n[0].Single,$n[0].Single,$n[0].Single]},{"a":1,"n":"ShakeRight","t":8,"pi":[{"n":"origX","pt":$n[0].Single,"ps":0},{"n":"animDuration","pt":$n[0].Single,"ps":1},{"n":"shakeForce","pt":$n[0].Single,"ps":2}],"sn":"ShakeRight","rt":$n[0].Void,"p":[$n[0].Single,$n[0].Single,$n[0].Single]},{"a":1,"n":"StartPulse","t":8,"pi":[{"n":"origScale","pt":$n[3].Vector2,"ps":0},{"n":"pulseAmount","pt":$n[0].Int32,"ps":1},{"n":"pulseForce","pt":$n[0].Single,"ps":2},{"n":"pulseAnimDuration","pt":$n[0].Single,"ps":3}],"sn":"StartPulse","rt":$n[6].IEnumerator,"p":[$n[3].Vector2,$n[0].Int32,$n[0].Single,$n[0].Single]},{"a":1,"n":"StartShake","t":8,"pi":[{"n":"origX","pt":$n[0].Single,"ps":0},{"n":"shakeAmount","pt":$n[0].Int32,"ps":1},{"n":"shakeForce","pt":$n[0].Single,"ps":2},{"n":"shakeAnimDuration","pt":$n[0].Single,"ps":3}],"sn":"StartShake","rt":$n[6].IEnumerator,"p":[$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Single]},{"a":1,"n":"StartTwist","t":8,"pi":[{"n":"twistAmount","pt":$n[0].Int32,"ps":0},{"n":"twistForce","pt":$n[0].Single,"ps":1},{"n":"twistAnimDuration","pt":$n[0].Single,"ps":2}],"sn":"StartTwist","rt":$n[6].IEnumerator,"p":[$n[0].Int32,$n[0].Single,$n[0].Single]},{"a":1,"n":"StopRoutine","t":8,"pi":[{"n":"routine","pt":$n[6].IEnumerator,"ps":0}],"sn":"StopRoutine","rt":$n[0].Void,"p":[$n[6].IEnumerator]},{"a":2,"n":"Twist","t":8,"pi":[{"n":"twistAmount","pt":$n[0].Int32,"ps":0},{"n":"twistForce","pt":$n[0].Single,"ps":1},{"n":"twistAnimDuration","pt":$n[0].Single,"ps":2}],"sn":"Twist","rt":$n[0].Void,"p":[$n[0].Int32,$n[0].Single,$n[0].Single]},{"a":2,"n":"CG","t":16,"rt":$n[3].CanvasGroup,"g":{"a":2,"n":"get_CG","t":8,"rt":$n[3].CanvasGroup,"fg":"CG"},"fn":"CG"},{"a":2,"n":"RectT","t":16,"rt":$n[3].RectTransform,"g":{"a":2,"n":"get_RectT","t":8,"rt":$n[3].RectTransform,"fg":"RectT"},"fn":"RectT"},{"a":1,"n":"canvasGroup","t":4,"rt":$n[3].CanvasGroup,"sn":"canvasGroup"},{"a":1,"n":"pulseRoutine","t":4,"rt":$n[6].IEnumerator,"sn":"pulseRoutine"},{"a":1,"n":"shakeRoutine","t":4,"rt":$n[6].IEnumerator,"sn":"shakeRoutine"},{"a":1,"n":"twistRoutine","t":4,"rt":$n[6].IEnumerator,"sn":"twistRoutine"}]}; }, $n);
    /*ScreenFrameWork.UIMonoBehaviour end.*/

    /*PopUpFrameWork.Popup start.*/
    $m("PopUpFrameWork.Popup", function () { return {"nested":[$n[8].Popup.AnimType,Function],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"DoFadeAnim","t":8,"sn":"DoFadeAnim","rt":$n[0].Void},{"a":1,"n":"DoZoomAnim","t":8,"sn":"DoZoomAnim","rt":$n[0].Void},{"a":2,"n":"Hide","t":8,"pi":[{"n":"cancelled","pt":$n[0].Boolean,"ps":0}],"sn":"Hide","rt":$n[0].Void,"p":[$n[0].Boolean]},{"a":2,"n":"Hide","t":8,"pi":[{"n":"cancelled","pt":$n[0].Boolean,"ps":0},{"n":"outData","pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"Hide$1","rt":$n[0].Void,"p":[$n[0].Boolean,$n[0].Array.type(System.Object)]},{"a":2,"n":"HideWithAction","t":8,"pi":[{"n":"action","pt":$n[0].String,"ps":0}],"sn":"HideWithAction","rt":$n[0].Void,"p":[$n[0].String]},{"v":true,"a":2,"n":"Initialize","t":8,"sn":"Initialize","rt":$n[0].Void},{"v":true,"a":2,"n":"OnHiding","t":8,"sn":"OnHiding","rt":$n[0].Void},{"v":true,"a":2,"n":"OnShowing","t":8,"pi":[{"n":"inData","pt":$n[0].Array.type(System.Object),"ps":0}],"sn":"OnShowing","rt":$n[0].Void,"p":[$n[0].Array.type(System.Object)]},{"v":true,"a":2,"n":"OnShowing","t":8,"pi":[{"n":"unityAction","pt":Function,"ps":0}],"sn":"OnShowing$1","rt":$n[0].Void,"p":[Function]},{"a":2,"n":"Show","t":8,"sn":"Show","rt":$n[0].Void},{"a":2,"n":"Show","t":8,"pi":[{"n":"inData","pt":$n[0].Array.type(System.Object),"ps":0},{"n":"callback","pt":Function,"ps":1},{"n":"actionCallBack","dv":null,"o":true,"pt":Function,"ps":2}],"sn":"Show$1","rt":$n[0].Void,"p":[$n[0].Array.type(System.Object),Function,Function]},{"a":2,"n":"CanAndroidBackClosePopup","t":16,"rt":$n[0].Boolean,"g":{"a":2,"n":"get_CanAndroidBackClosePopup","t":8,"rt":$n[0].Boolean,"fg":"CanAndroidBackClosePopup","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"CanAndroidBackClosePopup"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":3,"n":"animContainer","t":4,"rt":$n[3].RectTransform,"sn":"animContainer"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":3,"n":"animCurve","t":4,"rt":pc.AnimationCurve,"sn":"animCurve"},{"at":[new UnityEngine.HeaderAttribute("Anim Settings"),new UnityEngine.SerializeFieldAttribute()],"a":3,"n":"animDuration","t":4,"rt":$n[0].Single,"sn":"animDuration","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":3,"n":"animType","t":4,"rt":$n[8].Popup.AnimType,"sn":"animType","box":function ($v) { return Bridge.box($v, PopUpFrameWork.Popup.AnimType, System.Enum.toStringFn(PopUpFrameWork.Popup.AnimType));}},{"a":1,"n":"callback","t":4,"rt":Function,"sn":"callback"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":3,"n":"canAndroidBackClosePopup","t":4,"rt":$n[0].Boolean,"sn":"canAndroidBackClosePopup","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"isInitialized","t":4,"rt":$n[0].Boolean,"sn":"isInitialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"isShowing","t":4,"rt":$n[0].Boolean,"sn":"isShowing","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*PopUpFrameWork.Popup end.*/

    /*PopUpFrameWork.Popup+AnimType start.*/
    $m("PopUpFrameWork.Popup.AnimType", function () { return {"td":$n[8].Popup,"att":260,"a":3,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"Fade","is":true,"t":4,"rt":$n[8].Popup.AnimType,"sn":"Fade","box":function ($v) { return Bridge.box($v, PopUpFrameWork.Popup.AnimType, System.Enum.toStringFn(PopUpFrameWork.Popup.AnimType));}},{"a":2,"n":"Zoom","is":true,"t":4,"rt":$n[8].Popup.AnimType,"sn":"Zoom","box":function ($v) { return Bridge.box($v, PopUpFrameWork.Popup.AnimType, System.Enum.toStringFn(PopUpFrameWork.Popup.AnimType));}}]}; }, $n);
    /*PopUpFrameWork.Popup+AnimType end.*/

    /*PopUpFrameWork.PopupManager start.*/
    $m("PopUpFrameWork.PopupManager", function () { return {"nested":[$n[8].PopupManager.PopupInfo],"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":3,"n":"Awake","t":8,"sn":"Awake","rt":$n[0].Void},{"a":2,"n":"CloseActivePopup","t":8,"sn":"CloseActivePopup","rt":$n[0].Boolean,"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"GetPopupById","t":8,"pi":[{"n":"id","pt":$n[0].String,"ps":0}],"sn":"GetPopupById","rt":$n[8].Popup,"p":[$n[0].String]},{"a":2,"n":"OnPopupHiding","t":8,"pi":[{"n":"popup","pt":$n[8].Popup,"ps":0}],"sn":"OnPopupHiding","rt":$n[0].Void,"p":[$n[8].Popup]},{"a":2,"n":"Show","t":8,"pi":[{"n":"id","pt":$n[0].String,"ps":0}],"sn":"Show","rt":$n[0].Void,"p":[$n[0].String]},{"a":2,"n":"Show","t":8,"pi":[{"n":"id","pt":$n[0].String,"ps":0},{"n":"inData","pt":$n[0].Array.type(System.Object),"ps":1}],"sn":"Show$1","rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object)]},{"a":2,"n":"Show","t":8,"pi":[{"n":"id","pt":$n[0].String,"ps":0},{"n":"callBack","pt":Function,"ps":1}],"sn":"Show$3","rt":$n[0].Void,"p":[$n[0].String,Function]},{"a":2,"n":"Show","t":8,"pi":[{"n":"id","pt":$n[0].String,"ps":0},{"n":"inData","pt":$n[0].Array.type(System.Object),"ps":1},{"n":"popupClosed","pt":Function,"ps":2}],"sn":"Show$2","rt":$n[0].Void,"p":[$n[0].String,$n[0].Array.type(System.Object),Function]},{"a":1,"n":"activePopups","t":4,"rt":$n[5].List$1(PopUpFrameWork.Popup),"sn":"activePopups"},{"a":2,"n":"instance","is":true,"t":4,"rt":$n[8].PopupManager,"sn":"instance"},{"at":[new UnityEngine.SerializeFieldAttribute()],"a":1,"n":"popupInfos","t":4,"rt":$n[5].List$1(PopUpFrameWork.PopupManager.PopupInfo),"sn":"popupInfos"}]}; }, $n);
    /*PopUpFrameWork.PopupManager end.*/

    /*PopUpFrameWork.PopupManager+PopupInfo start.*/
    $m("PopUpFrameWork.PopupManager.PopupInfo", function () { return {"td":$n[8].PopupManager,"att":1056771,"a":1,"at":[new System.SerializableAttribute()],"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"at":[new UnityEngine.TooltipAttribute("The Popup component to show.")],"a":2,"n":"popup","t":4,"rt":$n[8].Popup,"sn":"popup"},{"at":[new UnityEngine.TooltipAttribute("The popups id, used to show the popup. Should be unique between all other popups.")],"a":2,"n":"popupId","t":4,"rt":$n[0].String,"sn":"popupId"}]}; }, $n);
    /*PopUpFrameWork.PopupManager+PopupInfo end.*/

    /*DentedPixel.LeanDummy start.*/
    $m("DentedPixel.LeanDummy", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"}]}; }, $n);
    /*DentedPixel.LeanDummy end.*/

    /*DentedPixel.LTExamples.PathBezier start.*/
    $m("DentedPixel.LTExamples.PathBezier", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"OnDrawGizmos","t":8,"sn":"OnDrawGizmos","rt":$n[0].Void},{"a":1,"n":"OnEnable","t":8,"sn":"OnEnable","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"Update","t":8,"sn":"Update","rt":$n[0].Void},{"a":1,"n":"avatar1","t":4,"rt":$n[3].GameObject,"sn":"avatar1"},{"a":1,"n":"cr","t":4,"rt":LTBezierPath,"sn":"cr"},{"a":1,"n":"iter","t":4,"rt":$n[0].Single,"sn":"iter","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":2,"n":"trans","t":4,"rt":System.Array.type(UnityEngine.Transform),"sn":"trans"}]}; }, $n);
    /*DentedPixel.LTExamples.PathBezier end.*/

    /*DentedPixel.LTExamples.TestingUnitTests start.*/
    $m("DentedPixel.LTExamples.TestingUnitTests", function () { return {"att":1048577,"a":2,"m":[{"a":2,"isSynthetic":true,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"Awake","t":8,"sn":"Awake","rt":$n[0].Void},{"a":1,"n":"Start","t":8,"sn":"Start","rt":$n[0].Void},{"a":1,"n":"cubeNamed","t":8,"pi":[{"n":"name","pt":$n[0].String,"ps":0}],"sn":"cubeNamed","rt":$n[3].GameObject,"p":[$n[0].String]},{"a":1,"n":"eventGameObjectCalled","t":8,"pi":[{"n":"e","pt":LTEvent,"ps":0}],"sn":"eventGameObjectCalled","rt":$n[0].Void,"p":[LTEvent]},{"a":1,"n":"eventGeneralCalled","t":8,"pi":[{"n":"e","pt":LTEvent,"ps":0}],"sn":"eventGeneralCalled","rt":$n[0].Void,"p":[LTEvent]},{"a":1,"n":"lotsOfCancels","t":8,"sn":"lotsOfCancels","rt":$n[6].IEnumerator},{"a":1,"n":"pauseTimeNow","t":8,"sn":"pauseTimeNow","rt":$n[6].IEnumerator},{"a":1,"n":"rotateRepeatAllFinished","t":8,"sn":"rotateRepeatAllFinished","rt":$n[0].Void},{"a":1,"n":"rotateRepeatFinished","t":8,"sn":"rotateRepeatFinished","rt":$n[0].Void},{"a":1,"n":"timeBasedTesting","t":8,"sn":"timeBasedTesting","rt":$n[6].IEnumerator},{"a":1,"n":"boxNoCollider","t":4,"rt":$n[3].GameObject,"sn":"boxNoCollider"},{"a":2,"n":"cube1","t":4,"rt":$n[3].GameObject,"sn":"cube1"},{"a":2,"n":"cube2","t":4,"rt":$n[3].GameObject,"sn":"cube2"},{"a":2,"n":"cube3","t":4,"rt":$n[3].GameObject,"sn":"cube3"},{"a":2,"n":"cube4","t":4,"rt":$n[3].GameObject,"sn":"cube4"},{"a":2,"n":"cubeAlpha1","t":4,"rt":$n[3].GameObject,"sn":"cubeAlpha1"},{"a":2,"n":"cubeAlpha2","t":4,"rt":$n[3].GameObject,"sn":"cubeAlpha2"},{"a":1,"n":"eventGameObjectWasCalled","t":4,"rt":$n[0].Boolean,"sn":"eventGameObjectWasCalled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"eventGeneralWasCalled","t":4,"rt":$n[0].Boolean,"sn":"eventGeneralWasCalled","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"groupGOs","t":4,"rt":System.Array.type(UnityEngine.GameObject),"sn":"groupGOs"},{"a":1,"n":"groupTweens","t":4,"rt":System.Array.type(LTDescr),"sn":"groupTweens"},{"a":1,"n":"groupTweensCnt","t":4,"rt":$n[0].Int32,"sn":"groupTweensCnt","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"lt1Id","t":4,"rt":$n[0].Int32,"sn":"lt1Id","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"lt2","t":4,"rt":LTDescr,"sn":"lt2"},{"a":1,"n":"lt3","t":4,"rt":LTDescr,"sn":"lt3"},{"a":1,"n":"lt4","t":4,"rt":LTDescr,"sn":"lt4"},{"a":1,"n":"pauseTweenDidFinish","t":4,"rt":$n[0].Boolean,"sn":"pauseTweenDidFinish","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":1,"n":"rotateRepeat","t":4,"rt":$n[0].Int32,"sn":"rotateRepeat","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"rotateRepeatAngle","t":4,"rt":$n[0].Int32,"sn":"rotateRepeatAngle","box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"timeElapsedIgnoreTimeScale","t":4,"rt":$n[0].Single,"sn":"timeElapsedIgnoreTimeScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"timeElapsedNormalTimeScale","t":4,"rt":$n[0].Single,"sn":"timeElapsedNormalTimeScale","box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}}]}; }, $n);
    /*DentedPixel.LTExamples.TestingUnitTests end.*/

    /*DG.Tweening.DOTweenModuleAudio start.*/
    $m("DG.Tweening.DOTweenModuleAudio", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOComplete","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0},{"n":"withCallbacks","dv":false,"o":true,"pt":$n[0].Boolean,"ps":1}],"sn":"DOComplete","rt":$n[0].Int32,"p":[$n[12].AudioMixer,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].AudioSource,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[3].AudioSource,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFlip","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOFlip","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOGoto","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0},{"n":"to","pt":$n[0].Single,"ps":1},{"n":"andPlay","dv":false,"o":true,"pt":$n[0].Boolean,"ps":2}],"sn":"DOGoto","rt":$n[0].Int32,"p":[$n[12].AudioMixer,$n[0].Single,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOKill","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0},{"n":"complete","dv":false,"o":true,"pt":$n[0].Boolean,"ps":1}],"sn":"DOKill","rt":$n[0].Int32,"p":[$n[12].AudioMixer,$n[0].Boolean],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPause","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOPause","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPitch","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].AudioSource,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOPitch","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[3].AudioSource,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOPlay","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOPlay","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPlayBackwards","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOPlayBackwards","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOPlayForward","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOPlayForward","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DORestart","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DORestart","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DORewind","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DORewind","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOSetFloat","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0},{"n":"floatName","pt":$n[0].String,"ps":1},{"n":"endValue","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"DOSetFloat","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[12].AudioMixer,$n[0].String,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOSmoothRewind","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOSmoothRewind","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":2,"n":"DOTogglePause","is":true,"t":8,"pi":[{"n":"target","pt":$n[12].AudioMixer,"ps":0}],"sn":"DOTogglePause","rt":$n[0].Int32,"p":[$n[12].AudioMixer],"box":function ($v) { return Bridge.box($v, System.Int32);}}]}; }, $n);
    /*DG.Tweening.DOTweenModuleAudio end.*/

    /*DG.Tweening.DOTweenModulePhysics start.*/
    $m("DG.Tweening.DOTweenModulePhysics", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOJump","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"endValue","pt":$n[3].Vector3,"ps":1},{"n":"jumpPower","pt":$n[0].Single,"ps":2},{"n":"numJumps","pt":$n[0].Int32,"ps":3},{"n":"duration","pt":$n[0].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5}],"sn":"DOJump","rt":$n[10].Sequence,"p":[$n[3].Rigidbody,$n[3].Vector3,$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Boolean]},{"a":4,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"path","pt":$n[14].Path,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":3}],"sn":"DOLocalPath$1","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody,$n[14].Path,$n[0].Single,$n[10].PathMode]},{"a":2,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[10].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[0].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[0].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOLocalPath","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody,System.Array.type(UnityEngine.Vector3),$n[0].Single,$n[10].PathType,$n[10].PathMode,$n[0].Int32,$n[0].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DOLookAt","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"towards","pt":$n[3].Vector3,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"axisConstraint","dv":0,"o":true,"pt":$n[10].AxisConstraint,"ps":3},{"n":"up","dv":null,"o":true,"pt":$n[0].Nullable$1(UnityEngine.Vector3),"ps":4}],"sn":"DOLookAt","rt":$n[13].TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions),"p":[$n[3].Rigidbody,$n[3].Vector3,$n[0].Single,$n[10].AxisConstraint,$n[0].Nullable$1(UnityEngine.Vector3)]},{"a":2,"n":"DOMove","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"endValue","pt":$n[3].Vector3,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMove","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody,$n[3].Vector3,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOMoveX","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMoveX","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOMoveY","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMoveY","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOMoveZ","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMoveZ","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":4,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"path","pt":$n[14].Path,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":3}],"sn":"DOPath$1","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody,$n[14].Path,$n[0].Single,$n[10].PathMode]},{"a":2,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector3),"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[10].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[0].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[0].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOPath","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody,System.Array.type(UnityEngine.Vector3),$n[0].Single,$n[10].PathType,$n[10].PathMode,$n[0].Int32,$n[0].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DORotate","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody,"ps":0},{"n":"endValue","pt":$n[3].Vector3,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"mode","dv":0,"o":true,"pt":$n[10].RotateMode,"ps":3}],"sn":"DORotate","rt":$n[13].TweenerCore$3(UnityEngine.Quaternion,UnityEngine.Vector3,DG.Tweening.Plugins.Options.QuaternionOptions),"p":[$n[3].Rigidbody,$n[3].Vector3,$n[0].Single,$n[10].RotateMode]}]}; }, $n);
    /*DG.Tweening.DOTweenModulePhysics end.*/

    /*DG.Tweening.DOTweenModulePhysics2D start.*/
    $m("DG.Tweening.DOTweenModulePhysics2D", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOJump","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"jumpPower","pt":$n[0].Single,"ps":2},{"n":"numJumps","pt":$n[0].Int32,"ps":3},{"n":"duration","pt":$n[0].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5}],"sn":"DOJump","rt":$n[10].Sequence,"p":[$n[3].Rigidbody2D,$n[3].Vector2,$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Boolean]},{"a":4,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"path","pt":$n[14].Path,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":3}],"sn":"DOLocalPath$1","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody2D,$n[14].Path,$n[0].Single,$n[10].PathMode]},{"a":2,"n":"DOLocalPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector2),"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[10].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[0].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[0].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOLocalPath","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody2D,System.Array.type(UnityEngine.Vector2),$n[0].Single,$n[10].PathType,$n[10].PathMode,$n[0].Int32,$n[0].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DOMove","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMove","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody2D,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOMoveX","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMoveX","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody2D,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOMoveY","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMoveY","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Rigidbody2D,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":4,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"path","pt":$n[14].Path,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":3}],"sn":"DOPath$1","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody2D,$n[14].Path,$n[0].Single,$n[10].PathMode]},{"a":2,"n":"DOPath","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"path","pt":System.Array.type(UnityEngine.Vector2),"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"pathType","dv":0,"o":true,"pt":$n[10].PathType,"ps":3},{"n":"pathMode","dv":1,"o":true,"pt":$n[10].PathMode,"ps":4},{"n":"resolution","dv":10,"o":true,"pt":$n[0].Int32,"ps":5},{"n":"gizmoColor","dv":null,"o":true,"pt":$n[0].Nullable$1(UnityEngine.Color),"ps":6}],"sn":"DOPath","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].Rigidbody2D,System.Array.type(UnityEngine.Vector2),$n[0].Single,$n[10].PathType,$n[10].PathMode,$n[0].Int32,$n[0].Nullable$1(UnityEngine.Color)]},{"a":2,"n":"DORotate","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Rigidbody2D,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DORotate","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[3].Rigidbody2D,$n[0].Single,$n[0].Single]}]}; }, $n);
    /*DG.Tweening.DOTweenModulePhysics2D end.*/

    /*DG.Tweening.DOTweenModuleSprite start.*/
    $m("DG.Tweening.DOTweenModuleSprite", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].SpriteRenderer,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOBlendableColor","rt":$n[10].Tweener,"p":[$n[3].SpriteRenderer,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].SpriteRenderer,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOColor","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[3].SpriteRenderer,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].SpriteRenderer,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[3].SpriteRenderer,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].SpriteRenderer,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOGradientColor","rt":$n[10].Sequence,"p":[$n[3].SpriteRenderer,pc.ColorGradient,$n[0].Single]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleSprite end.*/

    /*DG.Tweening.DOTweenModuleUI start.*/
    $m("DG.Tweening.DOTweenModuleUI", function () { return {"nested":[$n[10].DOTweenModuleUI.Utils],"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOAnchorMax","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorMax","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorMin","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorMin","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPos","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPos3D","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector3,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPos3D","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[3].Vector3,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPos3DX","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPos3DX","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPos3DY","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPos3DY","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPos3DZ","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPos3DZ","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,UnityEngine.Vector3,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPosX","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPosX","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOAnchorPosY","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOAnchorPosY","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOBlendableColor","rt":$n[10].Tweener,"p":[$n[4].Graphic,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOBlendableColor$1","rt":$n[10].Tweener,"p":[$n[4].Image,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOBlendableColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOBlendableColor$2","rt":$n[10].Tweener,"p":[$n[4].Text,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOColor","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Graphic,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOColor$1","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Image,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Outline,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOColor$2","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Outline,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[3].Color,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOColor$3","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Text,$n[3].Color,$n[0].Single]},{"a":2,"n":"DOCounter","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"fromValue","pt":$n[0].Int32,"ps":1},{"n":"endValue","pt":$n[0].Int32,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3},{"n":"addThousandsSeparator","dv":true,"o":true,"pt":$n[0].Boolean,"ps":4},{"n":"culture","dv":null,"o":true,"pt":$n[15].CultureInfo,"ps":5}],"sn":"DOCounter","rt":$n[13].TweenerCore$3(System.Int32,System.Int32,DG.Tweening.Plugins.Options.NoOptions),"p":[$n[4].Text,$n[0].Int32,$n[0].Int32,$n[0].Single,$n[0].Boolean,$n[15].CultureInfo]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].CanvasGroup,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[3].CanvasGroup,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Graphic,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade$1","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Graphic,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade$2","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Image,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Outline,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade$3","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Outline,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFade","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFade$4","rt":$n[13].TweenerCore$3(UnityEngine.Color,UnityEngine.Color,DG.Tweening.Plugins.Options.ColorOptions),"p":[$n[4].Text,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFillAmount","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOFillAmount","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[4].Image,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOFlexibleSize","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].LayoutElement,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOFlexibleSize","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].LayoutElement,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Image,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOGradientColor","rt":$n[10].Sequence,"p":[$n[4].Image,pc.ColorGradient,$n[0].Single]},{"a":2,"n":"DOHorizontalNormalizedPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].ScrollRect,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOHorizontalNormalizedPos","rt":$n[10].Tweener,"p":[$n[4].ScrollRect,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOJumpAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"jumpPower","pt":$n[0].Single,"ps":2},{"n":"numJumps","pt":$n[0].Int32,"ps":3},{"n":"duration","pt":$n[0].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5}],"sn":"DOJumpAnchorPos","rt":$n[10].Sequence,"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOMinSize","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].LayoutElement,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOMinSize","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].LayoutElement,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DONormalizedPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].ScrollRect,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DONormalizedPos","rt":$n[10].Tweener,"p":[$n[4].ScrollRect,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOPivot","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOPivot","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"DOPivotX","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOPivotX","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOPivotY","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOPivotY","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single]},{"a":2,"n":"DOPreferredSize","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].LayoutElement,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOPreferredSize","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].LayoutElement,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOPunchAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"punch","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"vibrato","dv":10,"o":true,"pt":$n[0].Int32,"ps":3},{"n":"elasticity","dv":1.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5}],"sn":"DOPunchAnchorPos","rt":$n[10].Tweener,"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOScale","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Outline,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOScale","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[4].Outline,$n[3].Vector2,$n[0].Single]},{"a":2,"n":"DOShakeAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"duration","pt":$n[0].Single,"ps":1},{"n":"strength","dv":100.0,"o":true,"pt":$n[0].Single,"ps":2},{"n":"vibrato","dv":10,"o":true,"pt":$n[0].Int32,"ps":3},{"n":"randomness","dv":90.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5},{"n":"fadeOut","dv":true,"o":true,"pt":$n[0].Boolean,"ps":6},{"n":"randomnessMode","dv":0,"o":true,"pt":$n[10].ShakeRandomnessMode,"ps":7}],"sn":"DOShakeAnchorPos","rt":$n[10].Tweener,"p":[$n[3].RectTransform,$n[0].Single,$n[0].Single,$n[0].Int32,$n[0].Single,$n[0].Boolean,$n[0].Boolean,$n[10].ShakeRandomnessMode]},{"a":2,"n":"DOShakeAnchorPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"duration","pt":$n[0].Single,"ps":1},{"n":"strength","pt":$n[3].Vector2,"ps":2},{"n":"vibrato","dv":10,"o":true,"pt":$n[0].Int32,"ps":3},{"n":"randomness","dv":90.0,"o":true,"pt":$n[0].Single,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5},{"n":"fadeOut","dv":true,"o":true,"pt":$n[0].Boolean,"ps":6},{"n":"randomnessMode","dv":0,"o":true,"pt":$n[10].ShakeRandomnessMode,"ps":7}],"sn":"DOShakeAnchorPos$1","rt":$n[10].Tweener,"p":[$n[3].RectTransform,$n[0].Single,$n[3].Vector2,$n[0].Int32,$n[0].Single,$n[0].Boolean,$n[0].Boolean,$n[10].ShakeRandomnessMode]},{"a":2,"n":"DOShapeCircle","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"center","pt":$n[3].Vector2,"ps":1},{"n":"endValueDegrees","pt":$n[0].Single,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3},{"n":"relativeCenter","dv":false,"o":true,"pt":$n[0].Boolean,"ps":4},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":5}],"sn":"DOShapeCircle","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.CircleOptions),"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Single,$n[0].Boolean,$n[0].Boolean]},{"a":2,"n":"DOSizeDelta","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].RectTransform,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOSizeDelta","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].RectTransform,$n[3].Vector2,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOText","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Text,"ps":0},{"n":"endValue","pt":$n[0].String,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"richTextEnabled","dv":true,"o":true,"pt":$n[0].Boolean,"ps":3},{"n":"scrambleMode","dv":0,"o":true,"pt":$n[10].ScrambleMode,"ps":4},{"n":"scrambleChars","dv":null,"o":true,"pt":$n[0].String,"ps":5}],"sn":"DOText","rt":$n[13].TweenerCore$3(System.String,System.String,DG.Tweening.Plugins.Options.StringOptions),"p":[$n[4].Text,$n[0].String,$n[0].Single,$n[0].Boolean,$n[10].ScrambleMode,$n[0].String]},{"a":2,"n":"DOValue","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].Slider,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOValue","rt":$n[13].TweenerCore$3(System.Single,System.Single,DG.Tweening.Plugins.Options.FloatOptions),"p":[$n[4].Slider,$n[0].Single,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"DOVerticalNormalizedPos","is":true,"t":8,"pi":[{"n":"target","pt":$n[4].ScrollRect,"ps":0},{"n":"endValue","pt":$n[0].Single,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2},{"n":"snapping","dv":false,"o":true,"pt":$n[0].Boolean,"ps":3}],"sn":"DOVerticalNormalizedPos","rt":$n[10].Tweener,"p":[$n[4].ScrollRect,$n[0].Single,$n[0].Single,$n[0].Boolean]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUI end.*/

    /*DG.Tweening.DOTweenModuleUI+Utils start.*/
    $m("DG.Tweening.DOTweenModuleUI.Utils", function () { return {"td":$n[10].DOTweenModuleUI,"att":1048962,"a":2,"s":true,"m":[{"a":2,"n":"SwitchToRectTransform","is":true,"t":8,"pi":[{"n":"from","pt":$n[3].RectTransform,"ps":0},{"n":"to","pt":$n[3].RectTransform,"ps":1}],"sn":"SwitchToRectTransform","rt":$n[3].Vector2,"p":[$n[3].RectTransform,$n[3].RectTransform]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUI+Utils end.*/

    /*DG.Tweening.DOTweenModuleUnityVersion start.*/
    $m("DG.Tweening.DOTweenModuleUnityVersion", function () { return {"att":1048961,"a":2,"s":true,"m":[{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Material,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"duration","pt":$n[0].Single,"ps":2}],"sn":"DOGradientColor","rt":$n[10].Sequence,"p":[$n[3].Material,pc.ColorGradient,$n[0].Single]},{"a":2,"n":"DOGradientColor","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Material,"ps":0},{"n":"gradient","pt":pc.ColorGradient,"ps":1},{"n":"property","pt":$n[0].String,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"DOGradientColor$1","rt":$n[10].Sequence,"p":[$n[3].Material,pc.ColorGradient,$n[0].String,$n[0].Single]},{"a":2,"n":"DOOffset","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Material,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"propertyID","pt":$n[0].Int32,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"DOOffset","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Material,$n[3].Vector2,$n[0].Int32,$n[0].Single]},{"a":2,"n":"DOTiling","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Material,"ps":0},{"n":"endValue","pt":$n[3].Vector2,"ps":1},{"n":"propertyID","pt":$n[0].Int32,"ps":2},{"n":"duration","pt":$n[0].Single,"ps":3}],"sn":"DOTiling","rt":$n[13].TweenerCore$3(UnityEngine.Vector2,UnityEngine.Vector2,DG.Tweening.Plugins.Options.VectorOptions),"p":[$n[3].Material,$n[3].Vector2,$n[0].Int32,$n[0].Single]},{"a":2,"n":"WaitForCompletion","is":true,"t":8,"pi":[{"n":"t","pt":$n[10].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[0].Boolean,"ps":1}],"sn":"WaitForCompletion","rt":$n[3].CustomYieldInstruction,"p":[$n[10].Tween,$n[0].Boolean]},{"a":2,"n":"WaitForElapsedLoops","is":true,"t":8,"pi":[{"n":"t","pt":$n[10].Tween,"ps":0},{"n":"elapsedLoops","pt":$n[0].Int32,"ps":1},{"n":"returnCustomYieldInstruction","pt":$n[0].Boolean,"ps":2}],"sn":"WaitForElapsedLoops","rt":$n[3].CustomYieldInstruction,"p":[$n[10].Tween,$n[0].Int32,$n[0].Boolean]},{"a":2,"n":"WaitForKill","is":true,"t":8,"pi":[{"n":"t","pt":$n[10].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[0].Boolean,"ps":1}],"sn":"WaitForKill","rt":$n[3].CustomYieldInstruction,"p":[$n[10].Tween,$n[0].Boolean]},{"a":2,"n":"WaitForPosition","is":true,"t":8,"pi":[{"n":"t","pt":$n[10].Tween,"ps":0},{"n":"position","pt":$n[0].Single,"ps":1},{"n":"returnCustomYieldInstruction","pt":$n[0].Boolean,"ps":2}],"sn":"WaitForPosition","rt":$n[3].CustomYieldInstruction,"p":[$n[10].Tween,$n[0].Single,$n[0].Boolean]},{"a":2,"n":"WaitForRewind","is":true,"t":8,"pi":[{"n":"t","pt":$n[10].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[0].Boolean,"ps":1}],"sn":"WaitForRewind","rt":$n[3].CustomYieldInstruction,"p":[$n[10].Tween,$n[0].Boolean]},{"a":2,"n":"WaitForStart","is":true,"t":8,"pi":[{"n":"t","pt":$n[10].Tween,"ps":0},{"n":"returnCustomYieldInstruction","pt":$n[0].Boolean,"ps":1}],"sn":"WaitForStart","rt":$n[3].CustomYieldInstruction,"p":[$n[10].Tween,$n[0].Boolean]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUnityVersion end.*/

    /*DG.Tweening.DOTweenCYInstruction start.*/
    $m("DG.Tweening.DOTweenCYInstruction", function () { return {"nested":[$n[10].DOTweenCYInstruction.WaitForCompletion,$n[10].DOTweenCYInstruction.WaitForRewind,$n[10].DOTweenCYInstruction.WaitForKill,$n[10].DOTweenCYInstruction.WaitForElapsedLoops,$n[10].DOTweenCYInstruction.WaitForPosition,$n[10].DOTweenCYInstruction.WaitForStart],"att":1048961,"a":2,"s":true}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForCompletion", function () { return {"td":$n[10].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[10].Tween],"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[0].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[10].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForCompletion end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForRewind", function () { return {"td":$n[10].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[10].Tween],"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[0].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[10].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForRewind end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForKill start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForKill", function () { return {"td":$n[10].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[10].Tween],"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[0].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[10].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForKill end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForElapsedLoops", function () { return {"td":$n[10].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[10].Tween,$n[0].Int32],"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0},{"n":"elapsedLoops","pt":$n[0].Int32,"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[0].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"elapsedLoops","t":4,"rt":$n[0].Int32,"sn":"elapsedLoops","ro":true,"box":function ($v) { return Bridge.box($v, System.Int32);}},{"a":1,"n":"t","t":4,"rt":$n[10].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForElapsedLoops end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForPosition", function () { return {"td":$n[10].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[10].Tween,$n[0].Single],"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0},{"n":"position","pt":$n[0].Single,"ps":1}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[0].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"position","t":4,"rt":$n[0].Single,"sn":"position","ro":true,"box":function ($v) { return Bridge.box($v, System.Single, System.Single.format, System.Single.getHashCode);}},{"a":1,"n":"t","t":4,"rt":$n[10].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForPosition end.*/

    /*DG.Tweening.DOTweenCYInstruction+WaitForStart start.*/
    $m("DG.Tweening.DOTweenCYInstruction.WaitForStart", function () { return {"td":$n[10].DOTweenCYInstruction,"att":1048578,"a":2,"m":[{"a":2,"n":".ctor","t":1,"p":[$n[10].Tween],"pi":[{"n":"tween","pt":$n[10].Tween,"ps":0}],"sn":"ctor"},{"ov":true,"a":2,"n":"keepWaiting","t":16,"rt":$n[0].Boolean,"g":{"ov":true,"a":2,"n":"get_keepWaiting","t":8,"rt":$n[0].Boolean,"fg":"keepWaiting","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},"fn":"keepWaiting"},{"a":1,"n":"t","t":4,"rt":$n[10].Tween,"sn":"t","ro":true}]}; }, $n);
    /*DG.Tweening.DOTweenCYInstruction+WaitForStart end.*/

    /*DG.Tweening.DOTweenModuleUtils start.*/
    $m("DG.Tweening.DOTweenModuleUtils", function () { return {"nested":[$n[10].DOTweenModuleUtils.Physics],"att":1048961,"a":2,"s":true,"m":[{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":2,"n":"Init","is":true,"t":8,"sn":"Init","rt":$n[0].Void},{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":1,"n":"Preserver","is":true,"t":8,"sn":"Preserver","rt":$n[0].Void},{"a":1,"n":"_initialized","is":true,"t":4,"rt":$n[0].Boolean,"sn":"_initialized","box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUtils end.*/

    /*DG.Tweening.DOTweenModuleUtils+Physics start.*/
    $m("DG.Tweening.DOTweenModuleUtils.Physics", function () { return {"td":$n[10].DOTweenModuleUtils,"att":1048962,"a":2,"s":true,"m":[{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":2,"n":"CreateDOTweenPathTween","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].MonoBehaviour,"ps":0},{"n":"tweenRigidbody","pt":$n[0].Boolean,"ps":1},{"n":"isLocal","pt":$n[0].Boolean,"ps":2},{"n":"path","pt":$n[14].Path,"ps":3},{"n":"duration","pt":$n[0].Single,"ps":4},{"n":"pathMode","pt":$n[10].PathMode,"ps":5}],"sn":"CreateDOTweenPathTween","rt":$n[13].TweenerCore$3(UnityEngine.Vector3,DG.Tweening.Plugins.Core.PathCore.Path,DG.Tweening.Plugins.Options.PathOptions),"p":[$n[3].MonoBehaviour,$n[0].Boolean,$n[0].Boolean,$n[14].Path,$n[0].Single,$n[10].PathMode]},{"at":[new UnityEngine.Scripting.PreserveAttribute()],"a":2,"n":"HasRigidbody","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Component,"ps":0}],"sn":"HasRigidbody","rt":$n[0].Boolean,"p":[$n[3].Component],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"HasRigidbody2D","is":true,"t":8,"pi":[{"n":"target","pt":$n[3].Component,"ps":0}],"sn":"HasRigidbody2D","rt":$n[0].Boolean,"p":[$n[3].Component],"box":function ($v) { return Bridge.box($v, System.Boolean, System.Boolean.toString);}},{"a":2,"n":"SetOrientationOnPath","is":true,"t":8,"pi":[{"n":"options","pt":$n[16].PathOptions,"ps":0},{"n":"t","pt":$n[10].Tween,"ps":1},{"n":"newRot","pt":$n[3].Quaternion,"ps":2},{"n":"trans","pt":$n[3].Transform,"ps":3}],"sn":"SetOrientationOnPath","rt":$n[0].Void,"p":[$n[16].PathOptions,$n[10].Tween,$n[3].Quaternion,$n[3].Transform]}]}; }, $n);
    /*DG.Tweening.DOTweenModuleUtils+Physics end.*/

    }});
